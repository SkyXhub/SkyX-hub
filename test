--[[  
    SkyX ESP Script with Luna UI
    This demonstrates how to create an ESP system with Luna Interface Suite
]]

-- Load the Luna library
local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/main/source.lua", true))()

-- Create the window
local Window = Luna:CreateWindow({
    Name = "SkyX ESP System",
    Subtitle = "by SkyX Hub",
    LogoID = nil,
    LoadingEnabled = true,
    LoadingTitle = "SkyX ESP",
    LoadingSubtitle = "Premium ESP System",
    ConfigSettings = {
        RootFolder = nil,
        ConfigFolder = "SkyX_ESP"
    },
    KeySystem = false
})

-- Create tabs
local MainTab = Window:CreateTab({
    Name = "Main",
    Icon = "crosshair",
    ImageSource = "Lucide",
    ShowTitle = true
})

local PlayersTab = Window:CreateTab({
    Name = "Players",
    Icon = "user",
    ImageSource = "Lucide",
    ShowTitle = true
})

local WorldTab = Window:CreateTab({
    Name = "World",
    Icon = "globe",
    ImageSource = "Lucide",
    ShowTitle = true
})

local SettingsTab = Window:CreateTab({
    Name = "Settings",
    Icon = "settings",
    ImageSource = "Lucide",
    ShowTitle = true
})

-- Create sections in tabs
MainTab:CreateSection("ESP Controls")
PlayersTab:CreateSection("Player ESP")
WorldTab:CreateSection("World ESP")
SettingsTab:CreateSection("Visual Settings")
SettingsTab:CreateSection("Configuration")

-- ESP Configuration (Default Settings)
local Config = {
    Enabled = false,
    Players = {
        Enabled = false,
        ShowName = true,
        ShowDistance = true,
        ShowHealth = true,
        ShowBoxes = true,
        ShowTracers = false,
        NameColor = Color3.fromRGB(255, 255, 255),
        BoxColor = Color3.fromRGB(255, 0, 0),
        TracerColor = Color3.fromRGB(0, 255, 0),
        TeamCheck = true,
        TeamColor = true,
        MaxDistance = 1000
    },
    Objects = {
        Enabled = false,
        Items = {},
        ItemColor = Color3.fromRGB(0, 255, 255),
        ShowDistance = true,
        MaxDistance = 500
    },
    Visuals = {
        Transparency = 0.5,
        TextSize = 14,
        TextOutline = true,
        BoxesOutline = true,
        TracerOrigin = "Bottom" -- "Bottom", "Center", "Mouse"
    }
}

-- ESP Drawing Objects
local ESPObjects = {}
local DrawnItems = {}

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- ESP Helper Functions
local function CalculateDistance(position)
    return (Camera.CFrame.Position - position).Magnitude
end

local function GetPlayerColor(player)
    if Config.Players.TeamColor and player.Team then
        return player.TeamColor.Color
    else
        return Config.Players.BoxColor
    end
end

local function IsOnScreen(position)
    local _, onScreen = Camera:WorldToScreenPoint(position)
    return onScreen
end

local function CreateDrawingObject(type, properties)
    local object = Drawing.new(type)
    for prop, value in pairs(properties) do
        object[prop] = value
    end
    return object
end

local function SetupPlayerESP(player)
    if player == LocalPlayer then return end
    
    ESPObjects[player] = {
        Name = CreateDrawingObject("Text", {
            Text = player.Name,
            Size = Config.Visuals.TextSize,
            Center = true,
            Outline = Config.Visuals.TextOutline,
            Color = Config.Players.NameColor,
            Transparency = 1
        }),
        Box = CreateDrawingObject("Square", {
            Thickness = 1,
            Filled = false,
            Color = GetPlayerColor(player),
            Transparency = Config.Visuals.Transparency
        }),
        BoxFill = CreateDrawingObject("Square", {
            Thickness = 1,
            Filled = true,
            Color = GetPlayerColor(player),
            Transparency = Config.Visuals.Transparency * 0.3
        }),
        BoxOutline = CreateDrawingObject("Square", {
            Thickness = 3,
            Filled = false,
            Color = Color3.fromRGB(0, 0, 0),
            Transparency = Config.Visuals.Transparency * 0.5
        }),
        Tracer = CreateDrawingObject("Line", {
            Thickness = 1,
            Color = Config.Players.TracerColor,
            Transparency = Config.Visuals.Transparency
        }),
        TracerOutline = CreateDrawingObject("Line", {
            Thickness = 3,
            Color = Color3.fromRGB(0, 0, 0),
            Transparency = Config.Visuals.Transparency * 0.5
        }),
        HealthBar = CreateDrawingObject("Square", {
            Thickness = 1,
            Filled = true,
            Color = Color3.fromRGB(0, 255, 0),
            Transparency = Config.Visuals.Transparency
        }),
        HealthBarOutline = CreateDrawingObject("Square", {
            Thickness = 1,
            Filled = false,
            Color = Color3.fromRGB(0, 0, 0),
            Transparency = Config.Visuals.Transparency
        }),
        Distance = CreateDrawingObject("Text", {
            Size = Config.Visuals.TextSize,
            Center = true,
            Outline = Config.Visuals.TextOutline,
            Color = Color3.fromRGB(255, 255, 255),
            Transparency = 1
        })
    }
    
    return ESPObjects[player]
end

local function RemovePlayerESP(player)
    if ESPObjects[player] then
        for _, object in pairs(ESPObjects[player]) do
            object:Remove()
        end
        ESPObjects[player] = nil
    end
end

local function SetupItemESP(item, name, color)
    if DrawnItems[item] then return DrawnItems[item] end
    
    DrawnItems[item] = {
        Name = CreateDrawingObject("Text", {
            Text = name,
            Size = Config.Visuals.TextSize,
            Center = true,
            Outline = Config.Visuals.TextOutline,
            Color = color or Config.Objects.ItemColor,
            Transparency = 1
        }),
        Distance = CreateDrawingObject("Text", {
            Size = Config.Visuals.TextSize - 2,
            Center = true,
            Outline = Config.Visuals.TextOutline,
            Color = Color3.fromRGB(255, 255, 255),
            Transparency = 1
        })
    }
    
    return DrawnItems[item]
end

local function RemoveItemESP(item)
    if DrawnItems[item] then
        for _, object in pairs(DrawnItems[item]) do
            object:Remove()
        end
        DrawnItems[item] = nil
    end
end

local function UpdatePlayerESP()
    for player, objects in pairs(ESPObjects) do
        if player and player:IsA("Player") and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") then
            local humanoid = player.Character:FindFirstChild("Humanoid")
            local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
            local head = player.Character:FindFirstChild("Head")
            if not rootPart or not humanoid then continue end
            
            local distance = CalculateDistance(rootPart.Position)
            if distance > Config.Players.MaxDistance then
                for _, object in pairs(objects) do
                    object.Visible = false
                end
                continue
            end
            
            if Config.Players.TeamCheck and player.Team == LocalPlayer.Team then
                for _, object in pairs(objects) do
                    object.Visible = false
                end
                continue
            end
            
            -- Determine if player is visible on screen
            local rootPos = rootPart.Position
            local screenPos, onScreen = Camera:WorldToScreenPoint(rootPos)
            if not onScreen then
                for _, object in pairs(objects) do
                    object.Visible = false
                end
                continue
            end
            
            -- Calculate box size based on distance
            local sizeMultiplier = 1 / (distance * 0.2)
            sizeMultiplier = math.clamp(sizeMultiplier, 0.1, 0.75) 
            
            local size = Vector2.new(35, 50) * sizeMultiplier
            local position = Vector2.new(screenPos.X - size.X / 2, screenPos.Y - size.Y / 2)
            
            -- Update box
            objects.Box.Size = size
            objects.Box.Position = position
            objects.Box.Visible = Config.Players.ShowBoxes
            objects.Box.Color = GetPlayerColor(player)
            
            -- Update box fill
            objects.BoxFill.Size = size
            objects.BoxFill.Position = position
            objects.BoxFill.Visible = Config.Players.ShowBoxes
            objects.BoxFill.Color = GetPlayerColor(player)
            
            -- Update box outline
            if Config.Visuals.BoxesOutline then
                objects.BoxOutline.Size = size
                objects.BoxOutline.Position = position
                objects.BoxOutline.Visible = Config.Players.ShowBoxes
            else
                objects.BoxOutline.Visible = false
            end
            
            -- Update name text
            if Config.Players.ShowName then
                objects.Name.Text = player.Name
                objects.Name.Position = Vector2.new(screenPos.X, position.Y - 15)
                objects.Name.Visible = true
            else
                objects.Name.Visible = false
            end
            
            -- Update distance text
            if Config.Players.ShowDistance then
                objects.Distance.Text = string.format("[%d m]", math.floor(distance))
                objects.Distance.Position = Vector2.new(screenPos.X, position.Y + size.Y + 5)
                objects.Distance.Visible = true
            else
                objects.Distance.Visible = false
            end
            
            -- Update health bar
            if Config.Players.ShowHealth and humanoid then
                local healthPercent = humanoid.Health / humanoid.MaxHealth
                local barHeight = size.Y * healthPercent
                
                objects.HealthBarOutline.Size = Vector2.new(4, size.Y + 2)
                objects.HealthBarOutline.Position = Vector2.new(position.X - 7, position.Y - 1)
                objects.HealthBarOutline.Visible = true
                
                objects.HealthBar.Size = Vector2.new(2, barHeight)
                objects.HealthBar.Position = Vector2.new(position.X - 6, position.Y + (size.Y - barHeight))
                objects.HealthBar.Visible = true
                
                -- Update health bar color based on health percentage
                objects.HealthBar.Color = Color3.fromRGB(
                    255 * (1 - healthPercent),
                    255 * healthPercent,
                    0
                )
            else
                objects.HealthBar.Visible = false
                objects.HealthBarOutline.Visible = false
            end
            
            -- Update tracers
            if Config.Players.ShowTracers then
                local tracerStart
                if Config.Visuals.TracerOrigin == "Bottom" then
                    tracerStart = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                elseif Config.Visuals.TracerOrigin == "Center" then
                    tracerStart = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                elseif Config.Visuals.TracerOrigin == "Mouse" then
                    tracerStart = UserInputService:GetMouseLocation()
                end
                
                objects.TracerOutline.From = tracerStart
                objects.TracerOutline.To = Vector2.new(screenPos.X, screenPos.Y)
                objects.TracerOutline.Visible = true
                
                objects.Tracer.From = tracerStart
                objects.Tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                objects.Tracer.Color = GetPlayerColor(player)
                objects.Tracer.Visible = true
            else
                objects.Tracer.Visible = false
                objects.TracerOutline.Visible = false
            end
        else
            for _, object in pairs(objects) do
                object.Visible = false
            end
        end
    end
end

local function UpdateItemsESP()
    for item, objects in pairs(DrawnItems) do
        if not item or not item:IsA("BasePart") or not item.Parent then
            RemoveItemESP(item)
            continue
        end
        
        local distance = CalculateDistance(item.Position)
        if distance > Config.Objects.MaxDistance then
            for _, object in pairs(objects) do
                object.Visible = false
            end
            continue
        end
        
        local screenPos, onScreen = Camera:WorldToScreenPoint(item.Position)
        if not onScreen then
            for _, object in pairs(objects) do
                object.Visible = false
            end
            continue
        end
        
        -- Update name text
        objects.Name.Position = Vector2.new(screenPos.X, screenPos.Y - 15)
        objects.Name.Visible = true
        
        -- Update distance text
        if Config.Objects.ShowDistance then
            objects.Distance.Text = string.format("[%d m]", math.floor(distance))
            objects.Distance.Position = Vector2.new(screenPos.X, screenPos.Y + 5)
            objects.Distance.Visible = true
        else
            objects.Distance.Visible = false
        end
    end
end

-- Main ESP update function
local function UpdateESP()
    if not Config.Enabled then
        for _, objects in pairs(ESPObjects) do
            for _, object in pairs(objects) do
                object.Visible = false
            end
        end
        
        for _, objects in pairs(DrawnItems) do
            for _, object in pairs(objects) do
                object.Visible = false
            end
        end
        return
    end
    
    if Config.Players.Enabled then
        UpdatePlayerESP()
    else
        for _, objects in pairs(ESPObjects) do
            for _, object in pairs(objects) do
                object.Visible = false
            end
        end
    end
    
    if Config.Objects.Enabled then
        UpdateItemsESP()
    else
        for _, objects in pairs(DrawnItems) do
            for _, object in pairs(objects) do
                object.Visible = false
            end
        end
    end
end

-- Player addition and removal handling
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        SetupPlayerESP(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        SetupPlayerESP(player)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    RemovePlayerESP(player)
end)

-- Item scanning function
local function ScanForItems()
    if not Config.Objects.Enabled then return end
    
    -- For this demo, we'll look for certain items in the workspace
    -- Real implementation should be customized for the specific game
    for _, item in pairs(Config.Objects.Items) do
        local parts = workspace:FindPartsInRegion3WithWhiteList(
            Region3.new(
                Vector3.new(-10000, -10000, -10000),
                Vector3.new(10000, 10000, 10000)
            ),
            {item.Part},
            100
        )
        
        for _, part in ipairs(parts) do
            if part:IsA("BasePart") then
                SetupItemESP(part, item.Name, item.Color)
            end
        end
    end
end

-- Item scanning periodic check
local ItemScanConnection = nil

-- UI BUILDING SECTION

-- Main ESP Toggle
local MainToggle = MainTab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = false,
    Callback = function(Value)
        Config.Enabled = Value
        if Value then
            Luna:Notification({ 
                Title = "ESP System",
                Icon = "check-circle",
                ImageSource = "Lucide",
                Content = "ESP is now enabled"
            })
        else
            Luna:Notification({ 
                Title = "ESP System",
                Icon = "x-circle",
                ImageSource = "Lucide",
                Content = "ESP is now disabled"
            })
        end
    end
}, "MainESPToggle")

-- Player ESP Settings
local PlayerToggle = PlayersTab:CreateToggle({
    Name = "Player ESP",
    CurrentValue = false,
    Callback = function(Value)
        Config.Players.Enabled = Value
    end
}, "PlayerESPToggle")

PlayersTab:CreateToggle({
    Name = "Show Names",
    CurrentValue = true,
    Callback = function(Value)
        Config.Players.ShowName = Value
    end
}, "ShowNamesToggle")

PlayersTab:CreateToggle({
    Name = "Show Boxes",
    CurrentValue = true,
    Callback = function(Value)
        Config.Players.ShowBoxes = Value
    end
}, "ShowBoxesToggle")

PlayersTab:CreateToggle({
    Name = "Show Health",
    CurrentValue = true,
    Callback = function(Value)
        Config.Players.ShowHealth = Value
    end
}, "ShowHealthToggle")

PlayersTab:CreateToggle({
    Name = "Show Distance",
    CurrentValue = true,
    Callback = function(Value)
        Config.Players.ShowDistance = Value
    end
}, "ShowDistanceToggle")

PlayersTab:CreateToggle({
    Name = "Show Tracers",
    CurrentValue = false,
    Callback = function(Value)
        Config.Players.ShowTracers = Value
    end
}, "ShowTracersToggle")

PlayersTab:CreateDropdown({
    Name = "Tracer Origin",
    Options = {"Bottom", "Center", "Mouse"},
    CurrentOption = "Bottom",
    MultipleOptions = false,
    Callback = function(Option)
        Config.Visuals.TracerOrigin = Option
    end
}, "TracerOriginDropdown")

PlayersTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = true,
    Callback = function(Value)
        Config.Players.TeamCheck = Value
    end
}, "TeamCheckToggle")

PlayersTab:CreateToggle({
    Name = "Use Team Color",
    CurrentValue = true,
    Callback = function(Value)
        Config.Players.TeamColor = Value
    end
}, "TeamColorToggle")

PlayersTab:CreateSlider({
    Name = "Max Distance",
    Range = {100, 5000},
    Increment = 100,
    CurrentValue = 1000,
    Callback = function(Value)
        Config.Players.MaxDistance = Value
    end
}, "PlayerDistanceSlider")

PlayersTab:CreateColorPicker({
    Name = "Box Color",
    Color = Color3.fromRGB(255, 0, 0),
    Callback = function(Value)
        Config.Players.BoxColor = Value
    end
}, "BoxColorPicker")

PlayersTab:CreateColorPicker({
    Name = "Tracer Color",
    Color = Color3.fromRGB(0, 255, 0),
    Callback = function(Value)
        Config.Players.TracerColor = Value
    end
}, "TracerColorPicker")

PlayersTab:CreateColorPicker({
    Name = "Name Color",
    Color = Color3.fromRGB(255, 255, 255),
    Callback = function(Value)
        Config.Players.NameColor = Value
    end
}, "NameColorPicker")

-- World ESP Settings
local WorldToggle = WorldTab:CreateToggle({
    Name = "Item ESP",
    CurrentValue = false,
    Callback = function(Value)
        Config.Objects.Enabled = Value
        
        if Value then
            if not ItemScanConnection then
                ItemScanConnection = RunService.Heartbeat:Connect(function()
                    ScanForItems()
                end)
            end
            Luna:Notification({
                Title = "ESP System",
                Icon = "check",
                ImageSource = "Lucide",
                Content = "Item ESP Enabled"
            })
        else
            if ItemScanConnection then
                ItemScanConnection:Disconnect()
                ItemScanConnection = nil
            end
        end
    end
}, "ItemESPToggle")

WorldTab:CreateToggle({
    Name = "Show Distance",
    CurrentValue = true,
    Callback = function(Value)
        Config.Objects.ShowDistance = Value
    end
}, "ItemDistanceToggle")

WorldTab:CreateSlider({
    Name = "Max Distance",
    Range = {100, 2000},
    Increment = 50,
    CurrentValue = 500,
    Callback = function(Value)
        Config.Objects.MaxDistance = Value
    end
}, "ItemDistanceSlider")

WorldTab:CreateColorPicker({
    Name = "Item Color",
    Color = Color3.fromRGB(0, 255, 255),
    Callback = function(Value)
        Config.Objects.ItemColor = Value
    end
}, "ItemColorPicker")

WorldTab:CreateButton({
    Name = "Add Chests",
    Callback = function()
        -- Example: Add chests to the items list
        table.insert(Config.Objects.Items, {
            Name = "Chest",
            Part = workspace:FindFirstChild("Chest") or workspace, -- Replace with actual path in the game
            Color = Color3.fromRGB(255, 215, 0)
        })
        
        Luna:Notification({
            Title = "ESP System",
            Icon = "box",
            ImageSource = "Lucide",
            Content = "Added Chests to ESP"
        })
    end
})

WorldTab:CreateButton({
    Name = "Add Collectibles",
    Callback = function()
        -- Example: Add collectibles to the items list
        table.insert(Config.Objects.Items, {
            Name = "Collectible",
            Part = workspace:FindFirstChild("Collectible") or workspace, -- Replace with actual path in the game
            Color = Color3.fromRGB(0, 255, 128)
        })
        
        Luna:Notification({
            Title = "ESP System",
            Icon = "gem",
            ImageSource = "Lucide",
            Content = "Added Collectibles to ESP"
        })
    end
})

-- Settings Tab - Visual Settings
SettingsTab:CreateSlider({
    Name = "ESP Transparency",
    Range = {0.1, 1},
    Increment = 0.05,
    CurrentValue = 0.5,
    Callback = function(Value)
        Config.Visuals.Transparency = Value
    end
}, "TransparencySlider")

SettingsTab:CreateSlider({
    Name = "Text Size",
    Range = {10, 24},
    Increment = 1,
    CurrentValue = 14,
    Callback = function(Value)
        Config.Visuals.TextSize = Value
    end
}, "TextSizeSlider")

SettingsTab:CreateToggle({
    Name = "Text Outline",
    CurrentValue = true,
    Callback = function(Value)
        Config.Visuals.TextOutline = Value
    end
}, "TextOutlineToggle")

SettingsTab:CreateToggle({
    Name = "Box Outline",
    CurrentValue = true,
    Callback = function(Value)
        Config.Visuals.BoxesOutline = Value
    end
}, "BoxOutlineToggle")

-- Settings Tab - Config Section
SettingsTab:CreateButton({
    Name = "Reset Settings",
    Callback = function()
        -- Reset all settings to default
        Config = {
            Enabled = false,
            Players = {
                Enabled = false,
                ShowName = true,
                ShowDistance = true,
                ShowHealth = true,
                ShowBoxes = true,
                ShowTracers = false,
                NameColor = Color3.fromRGB(255, 255, 255),
                BoxColor = Color3.fromRGB(255, 0, 0),
                TracerColor = Color3.fromRGB(0, 255, 0),
                TeamCheck = true,
                TeamColor = true,
                MaxDistance = 1000
            },
            Objects = {
                Enabled = false,
                Items = {},
                ItemColor = Color3.fromRGB(0, 255, 255),
                ShowDistance = true,
                MaxDistance = 500
            },
            Visuals = {
                Transparency = 0.5,
                TextSize = 14,
                TextOutline = true,
                BoxesOutline = true,
                TracerOrigin = "Bottom"
            }
        }
        
        -- Update toggles and sliders to match reset settings
        MainToggle:Set({CurrentValue = false})
        PlayerToggle:Set({CurrentValue = false})
        WorldToggle:Set({CurrentValue = false})
        
        Luna:Notification({
            Title = "ESP System",
            Icon = "refresh-cw",
            ImageSource = "Lucide",
            Content = "Settings Reset to Default"
        })
    end
})

-- Start ESP update loop
RunService:BindToRenderStep("ESP_Update", 201, UpdateESP)

-- Notification when script loads
Luna:Notification({
    Title = "SkyX ESP System",
    Icon = "check-circle",
    ImageSource = "Lucide",
    Content = "ESP System loaded successfully!"
})

-- Clean up on script unload
local Cleanup = Instance.new("BindableEvent")
Cleanup.Event:Connect(function()
    RunService:UnbindFromRenderStep("ESP_Update")
    
    for _, objects in pairs(ESPObjects) do
        for _, object in pairs(objects) do
            object:Remove()
        end
    end
    
    for _, objects in pairs(DrawnItems) do
        for _, object in pairs(objects) do
            object:Remove()
        end
    end
    
    if ItemScanConnection then
        ItemScanConnection:Disconnect()
    end
    
    ESPObjects = {}
    DrawnItems = {}
    Config = {}
    
    Luna:Destroy()
    Cleanup:Destroy()
end)

-- Load saved configurations
Luna:LoadAutoloadConfig()

return Cleanup -- Return cleanup bindable event for external script control
