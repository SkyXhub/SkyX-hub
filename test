--[[
    ðŸŒŠ SkyX Hub - Fishing Simulator Script (Orion Version) ðŸŒŠ
    ENHANCED KEYLESS VERSION 3.0.0
    
    Features:
    - NO KEY SYSTEM - Completely Free Access
    - Auto Fishing (Smart fish catching)
    - ESP for Special Fish
    - Teleport to Best Fishing Spots
    - Auto Sell
    - Fish Rarity Filter
    - Fish Collection Tracker
    - Touch-Friendly Mobile Interface
    - Automatic Rare Fish Alerts
    
    Ocean Theme UI - Optimized for mobile executors (Swift, Fluxus, KRNL, Delta, etc.)
    Works great on: Swift, Fluxus, KRNL, Delta, Arceus X and other mobile executors
    
    Using Orion Library: https://raw.githubusercontent.com/jensonhirst/Orion/main/source
]]

-- Set up the global environment
local globalEnv = getgenv and getgenv() or _G

-- Prevent duplicate execution
if globalEnv.SkyXFishingScriptLoaded then
    warn("SkyX Fishing Script is already running!")
    return
end

-- Mark script as loaded
globalEnv.SkyXFishingScriptLoaded = true

-- Set up SkyX global environment if not already defined
if not globalEnv.SkyX then
    globalEnv.SkyX = {
        Version = "3.0.0",
        LoadTime = os.time(),
        Platform = (syn and "Synapse") or 
                  (KRNL_LOADED and "Krnl") or 
                  (secure_load and "Sentinel") or 
                  (fluxus and "Fluxus") or
                  (delta and "Delta") or
                  (identifyexecutor and identifyexecutor()) or 
                  "Unknown Executor",
        AntiBanEnabled = true,
        WebhookEnabled = true,
        DiscordWebhookURL = "https://discord.com/api/webhooks/1364438745067290664/J6ZLEkt_lZtwbQnssigtUr5Uj80fhzQmdH0QoitsSwJr2xgDOjIzl5Kfo1Cr1UuFo-2v",
    }
end

-- Game services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local VirtualUser = game:GetService("VirtualUser")
local Workspace = game:GetService("Workspace")
local HttpService = game:GetService("HttpService")

-- Get player
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- Anti-AFK function
local function setupAntiAFK()
    LocalPlayer.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
    print("Anti-AFK enabled")
end

-- Setup anti-AFK
pcall(setupAntiAFK)

-- Send execution data to Discord webhook
local function sendWebhookData()
    if not (globalEnv.SkyX.WebhookEnabled and globalEnv.SkyX.DiscordWebhookURL) then
        return
    end
    
    spawn(function()
        pcall(function()
            local gameId = game.PlaceId
            local gameName = game:GetService("MarketplaceService"):GetProductInfo(gameId).Name
            local executor = globalEnv.SkyX.Platform
            local playerId = LocalPlayer.UserId
            local playerName = LocalPlayer.Name
            
            -- Format the Discord webhook data
            local webhookData = {
                username = "SkyX Hub Execution Tracker",
                avatar_url = "https://i.imgur.com/4M34hi2.png",
                embeds = {
                    {
                        title = "Fishing Script Executed",
                        description = "The Fishing Script has been executed by a user",
                        color = 3447003, -- Blue color
                        fields = {
                            {
                                name = "Game",
                                value = gameName,
                                inline = true
                            },
                            {
                                name = "Player",
                                value = playerName,
                                inline = true
                            },
                            {
                                name = "User ID",
                                value = tostring(playerId),
                                inline = true
                            },
                            {
                                name = "Executor",
                                value = executor,
                                inline = true
                            },
                            {
                                name = "Place ID",
                                value = tostring(gameId),
                                inline = true
                            }
                        },
                        footer = {
                            text = "SkyX Hub â€¢ " .. os.date("%Y-%m-%d %H:%M:%S")
                        }
                    }
                }
            }
            
            -- Send directly to Discord webhook
            local jsonData = HttpService:JSONEncode(webhookData)
            
            HttpService:PostAsync(
                globalEnv.SkyX.DiscordWebhookURL,
                jsonData,
                Enum.HttpContentType.ApplicationJson,
                false
            )
            
            print("SkyX Fishing: Discord webhook notification sent successfully")
        end)
    end)
end

-- Try to send webhook notification
pcall(sendWebhookData)

-- Loading the Orion Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/jensonhirst/Orion/main/source')))()

-- Fish data from game
local fishData = {}
local fishPools = {}

-- Try to get the fish data from the game
pcall(function()
    -- Check if there's a fish module in ReplicatedStorage
    for _, module in pairs(ReplicatedStorage:GetDescendants()) do
        if module:IsA("ModuleScript") and (module.Name:find("Fish") or module.Name:find("fish")) then
            local success, result = pcall(function()
                return require(module)
            end)
            
            if success and type(result) == "table" then
                -- Check if this looks like fish data
                for k, v in pairs(result) do
                    if type(v) == "table" and (v.Icon or v.Rarity or v.WeightPool) then
                        fishData = result
                        print("Found fish data in module: " .. module:GetFullName())
                        break
                    end
                end
            end
        end
    end
    
    -- Check for fish pools
    for _, module in pairs(ReplicatedStorage:GetDescendants()) do
        if module:IsA("ModuleScript") and (module.Name:find("Pool") or module.Name:find("pool")) then
            local success, result = pcall(function()
                return require(module)
            end)
            
            if success and type(result) == "table" then
                -- Check if this looks like fish pool data
                for k, v in pairs(result) do
                    if type(v) == "table" and v.Pool and type(v.Pool) == "table" then
                        fishPools = result
                        print("Found fish pools in module: " .. module:GetFullName())
                        break
                    end
                end
            end
        end
    end
end)

-- If we couldn't get the data from the game, use the data provided
if not next(fishData) then
    -- This is a simplified version of the data for demo purposes
    fishData = {
        ["Moon Idol Sea 1"] = {
            Icon = "rbxassetid://74189195141290", 
            BlockPassiveCapture = true, 
            WeightPool = {500, 500}, 
            Chance = 1, 
            Rarity = "Secret",
            From = "Blue Moon - First Sea"
        },
        ["Lunar Monkfish"] = {
            Icon = "rbxassetid://82672626514771", 
            WeightPool = {800, 2500}, 
            Chance = 50, 
            Rarity = "Mythical",
            From = "Blue Moon - First Sea"
        },
        ["Icy Daggerfish"] = {
            Icon = "rbxassetid://135539930141529", 
            WeightPool = {80, 235}, 
            Chance = 60, 
            Rarity = "Legendary",
            From = "Blue Moon - First Sea"
        },
        ["Starbellied Wolf Fish"] = {
            Icon = "rbxassetid://89388598287015", 
            WeightPool = {70, 240}, 
            Chance = 70, 
            Rarity = "Rare",
            From = "Blue Moon - First Sea"
        },
        ["Blue Langanose"] = {
            Icon = "rbxassetid://100875351246693", 
            WeightPool = {600, 1800}, 
            Chance = 80, 
            Rarity = "Unusual",
            From = "Blue Moon - First Sea"
        },
        ["Frost Ray"] = {
            Icon = "rbxassetid://135376186443805", 
            WeightPool = {800, 2400}, 
            Chance = 85, 
            Rarity = "Uncommon",
            From = "Blue Moon - First Sea"
        }
    }
    
    fishPools = {
        ["Ashfall Pool"] = {
            Pool = {
                "Ember Catfish", 
                "Blistered Eel", 
                "Lava Lamprey", 
                "Molten Minnow", 
                "Pyro Pike", 
                "Cinder Carp", 
                "Coelacanth"
            },
            Priority = 1
        },
        ["Ancient Orcas Pool"] = {
            Pool = {
                "Ancient Orca",
                "Colossal Squid",
                "Oarfish",
                "Crown Bass",
                "Mythic Fish"
            },
            Priority = 4
        }
    }
end

-- Create a rarity ranking
local rarityRanking = {
    ["Trash"] = 1,
    ["Common"] = 2,
    ["Uncommon"] = 3,
    ["Unusual"] = 4,
    ["Rare"] = 5,
    ["Legendary"] = 6,
    ["Mythical"] = 7,
    ["Secret"] = 8
}

-- Create fish lists by rarity
local fishByRarity = {}
for rarity, _ in pairs(rarityRanking) do
    fishByRarity[rarity] = {}
end

for fishName, fishInfo in pairs(fishData) do
    local rarity = fishInfo.Rarity
    if rarity and fishByRarity[rarity] then
        table.insert(fishByRarity[rarity], fishName)
    end
end

-- Create location lists for teleporting
local fishingLocations = {}
local processedLocations = {}

for fishName, fishInfo in pairs(fishData) do
    if fishInfo.From and not processedLocations[fishInfo.From] then
        table.insert(fishingLocations, fishInfo.From)
        processedLocations[fishInfo.From] = true
    end
end

-- Sort locations
table.sort(fishingLocations)

-- Global settings for auto fishing
local autoFishingSettings = {
    enabled = false,
    minRarity = "Common",
    targetFish = nil,
    autoSell = false,
    keepLegendaryPlus = true,
    maxFishingTime = 120, -- Max time to wait for a fish in seconds
    fishCaughtCount = 0,
    rareCaughtCount = 0
}

-- Function to find fishing remote
local function findFishingRemote()
    -- Common remote names in fishing games
    local remoteNames = {
        "Fish", "CastRod", "StartFishing", "Cast", "CastLine", "ThrowLine",
        "fish", "castRod", "startFishing", "cast", "castLine", "throwLine"
    }
    
    -- Check for remotes in ReplicatedStorage
    for _, remoteName in pairs(remoteNames) do
        for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
            if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                if obj.Name == remoteName or obj.Name:find(remoteName) then
                    return obj
                end
            end
        end
    end
    
    -- If we can't find a specific fishing remote, try to find any usable remote
    for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
        if (obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction")) and
           (obj.Name:lower():find("fish") or obj.Name:lower():find("rod") or obj.Name:lower():find("cast")) then
            return obj
        end
    end
    
    return nil
end

-- Function to find sell remote
local function findSellRemote()
    -- Common sell remote names
    local remoteNames = {
        "Sell", "SellFish", "SellAll", "Sell All", "Cash", "Exchange",
        "sell", "sellFish", "sellAll", "cash", "exchange"
    }
    
    -- Check for remotes in ReplicatedStorage
    for _, remoteName in pairs(remoteNames) do
        for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
            if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                if obj.Name == remoteName or obj.Name:find(remoteName) then
                    return obj
                end
            end
        end
    end
    
    -- If we can't find a specific sell remote, try to find any usable remote
    for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
        if (obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction")) and
           (obj.Name:lower():find("sell") or obj.Name:lower():find("cash") or obj.Name:lower():find("money")) then
            return obj
        end
    end
    
    return nil
end

-- Function to sell fish
local function sellFish()
    local sellRemote = findSellRemote()
    
    if sellRemote then
        -- Try to call the remote with various arguments
        local success = false
        
        -- Try without arguments first
        pcall(function()
            if sellRemote:IsA("RemoteEvent") then
                sellRemote:FireServer()
                success = true
            elseif sellRemote:IsA("RemoteFunction") then
                sellRemote:InvokeServer()
                success = true
            end
        end)
        
        if not success then
            -- Try with a boolean argument (common for SellAll)
            pcall(function()
                if sellRemote:IsA("RemoteEvent") then
                    sellRemote:FireServer(true)
                    success = true
                elseif sellRemote:IsA("RemoteFunction") then
                    sellRemote:InvokeServer(true)
                    success = true
                end
            end)
        end
        
        if success then
            OrionLib:MakeNotification({
                Name = "Auto Sell",
                Content = "Successfully sold fish",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        else
            OrionLib:MakeNotification({
                Name = "Auto Sell Failed",
                Content = "Found sell remote but failed to sell fish",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    else
        -- Try to teleport to sell area as fallback
        for _, obj in pairs(workspace:GetDescendants()) do
            if (obj.Name:lower():find("sell") or obj.Name:lower():find("cash")) and 
               (obj:IsA("BasePart") or (obj:IsA("Model") and obj.PrimaryPart)) then
                
                if obj:IsA("BasePart") then
                    Character:SetPrimaryPartCFrame(CFrame.new(obj.Position + Vector3.new(0, 5, 0)))
                else
                    Character:SetPrimaryPartCFrame(CFrame.new(obj.PrimaryPart.Position + Vector3.new(0, 5, 0)))
                end
                
                OrionLib:MakeNotification({
                    Name = "Auto Sell",
                    Content = "Teleported to sell area",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
                break
            end
        end
    end
end

-- Function to check if fish rarity is acceptable
local function isFishRarityAcceptable(fishName)
    if not fishName or not fishData[fishName] then return false end
    
    -- If we have a target fish, only accept that fish
    if autoFishingSettings.targetFish and autoFishingSettings.targetFish ~= "None" then
        return fishName == autoFishingSettings.targetFish
    end
    
    local fishInfo = fishData[fishName]
    local rarity = fishInfo.Rarity
    
    if not rarity or not rarityRanking[rarity] or not rarityRanking[autoFishingSettings.minRarity] then
        return false
    end
    
    return rarityRanking[rarity] >= rarityRanking[autoFishingSettings.minRarity]
end

-- Function to auto fish
local function startAutoFishing()
    if not autoFishingSettings.enabled then return end
    
    local isRunning = false
    
    spawn(function()
        while autoFishingSettings.enabled do
            if isRunning then
                wait(1)
                continue
            end
            
            isRunning = true
            
            -- Try to find the fishing remote
            local fishingRemote = findFishingRemote()
            
            if fishingRemote then
                -- Try to cast the fishing rod
                local success = false
                
                pcall(function()
                    if fishingRemote:IsA("RemoteEvent") then
                        fishingRemote:FireServer()
                        success = true
                    elseif fishingRemote:IsA("RemoteFunction") then
                        fishingRemote:InvokeServer()
                        success = true
                    end
                end)
                
                if success then
                    print("Cast fishing rod")
                    
                    -- Wait for a bite
                    local startTime = os.time()
                    local fishCaught = false
                    
                    while os.time() - startTime < autoFishingSettings.maxFishingTime and not fishCaught and autoFishingSettings.enabled do
                        -- Check for any indicators of a fish bite
                        for _, obj in pairs(LocalPlayer.PlayerGui:GetDescendants()) do
                            if obj:IsA("TextLabel") or obj:IsA("TextButton") then
                                if obj.Text:lower():find("catch") or obj.Text:lower():find("reel") then
                                    fishCaught = true
                                    break
                                end
                            end
                        end
                        
                        -- Also check for any GUI changes indicating a fish
                        for _, obj in pairs(LocalPlayer.PlayerGui:GetDescendants()) do
                            if obj:IsA("Frame") or obj:IsA("ImageLabel") then
                                if obj.Name:lower():find("fish") or obj.Name:lower():find("catch") or obj.Name:lower():find("bite") then
                                    if obj.Visible and not obj:FindFirstChild("SkyXChecked") then
                                        -- Mark this as checked
                                        local marker = Instance.new("StringValue")
                                        marker.Name = "SkyXChecked"
                                        marker.Parent = obj
                                        
                                        fishCaught = true
                                        break
                                    end
                                end
                            end
                        end
                        
                        wait(0.1)
                    end
                    
                    if fishCaught and autoFishingSettings.enabled then
                        -- Try to catch the fish
                        pcall(function()
                            -- Simulate clicking the catch button or pressing space
                            mouse1click()
                            VirtualUser:CaptureController()
                            VirtualUser:ClickButton1(Vector2.new(0, 0))
                            game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                        end)
                        
                        -- Wait for the caught fish display
                        wait(1)
                        
                        -- Try to determine what fish was caught
                        local caughtFish = "Unknown Fish"
                        
                        for _, obj in pairs(LocalPlayer.PlayerGui:GetDescendants()) do
                            if obj:IsA("TextLabel") and obj.Visible then
                                for fishName, _ in pairs(fishData) do
                                    if obj.Text:find(fishName) then
                                        caughtFish = fishName
                                        break
                                    end
                                end
                                
                                if caughtFish ~= "Unknown Fish" then
                                    break
                                end
                            end
                        end
                        
                        -- Check if this fish meets our rarity criteria
                        local meetsCriteria = isFishRarityAcceptable(caughtFish)
                        
                        -- Update stats
                        autoFishingSettings.fishCaughtCount = autoFishingSettings.fishCaughtCount + 1
                        
                        local fishInfo = fishData[caughtFish]
                        if fishInfo and fishInfo.Rarity and 
                           (fishInfo.Rarity == "Legendary" or fishInfo.Rarity == "Mythical" or fishInfo.Rarity == "Secret") then
                            autoFishingSettings.rareCaughtCount = autoFishingSettings.rareCaughtCount + 1
                        end
                        
                        -- Display notification
                        local rarity = fishInfo and fishInfo.Rarity or "Unknown"
                        OrionLib:MakeNotification({
                            Name = "Fish Caught",
                            Content = "Caught: " .. caughtFish .. " (Rarity: " .. rarity .. ")",
                            Image = "rbxassetid://4483345998",
                            Time = 3
                        })
                        
                        -- Auto sell if enabled and fish doesn't meet criteria
                        if autoFishingSettings.autoSell and 
                           (not meetsCriteria or 
                            (not autoFishingSettings.keepLegendaryPlus or 
                             (fishInfo and fishInfo.Rarity and 
                              rarityRanking[fishInfo.Rarity] < rarityRanking["Legendary"]))) then
                            wait(1)
                            sellFish()
                        end
                    end
                    
                    -- Wait before casting again
                    wait(2)
                else
                    -- If we failed to cast, wait a bit and try again
                    wait(5)
                end
            else
                -- If we couldn't find the fishing remote, wait and try again
                OrionLib:MakeNotification({
                    Name = "Auto Fishing Error",
                    Content = "Could not find fishing remote. Make sure you're in a fishing game.",
                    Image = "rbxassetid://4483345998",
                    Time = 5
                })
                wait(10)
            end
            
            isRunning = false
        end
    end)
end

-- Create a Window with mobile-friendly settings
local Window = OrionLib:MakeWindow({
    Name = "ðŸŒŠ SkyX Hub - Fishing ðŸŒŠ", 
    HidePremium = false, 
    SaveConfig = true, 
    ConfigFolder = "SkyXHub",
    IntroEnabled = true,
    IntroText = "SkyX Hub - Keyless",
    IntroIcon = "rbxassetid://4483345998",
    Icon = "rbxassetid://4483345998",
    CloseCallback = function()
        -- Stop auto fishing when window is closed
        autoFishingSettings.enabled = false
    end
})

-- Auto Fishing Tab
local AutoFishTab = Window:MakeTab({
    Name = "Auto Fish",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Teleport Tab
local TeleportTab = Window:MakeTab({
    Name = "Teleport",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Stats Tab
local StatsTab = Window:MakeTab({
    Name = "Stats",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Settings Tab
local SettingsTab = Window:MakeTab({
    Name = "Settings",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Auto Fishing Tab Elements
local AutoFishSection = AutoFishTab:AddSection({
    Name = "Auto Fishing Controls"
})

AutoFishSection:AddToggle({
    Name = "Auto Fishing",
    Default = false,
    Callback = function(Value)
        autoFishingSettings.enabled = Value
        
        if Value then
            startAutoFishing()
            OrionLib:MakeNotification({
                Name = "Auto Fishing",
                Content = "Started auto fishing",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        else
            OrionLib:MakeNotification({
                Name = "Auto Fishing",
                Content = "Stopped auto fishing",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
        end
    end    
})

AutoFishSection:AddDropdown({
    Name = "Minimum Rarity",
    Default = "Common",
    Options = {"Trash", "Common", "Uncommon", "Unusual", "Rare", "Legendary", "Mythical", "Secret"},
    Callback = function(Value)
        autoFishingSettings.minRarity = Value
        OrionLib:MakeNotification({
            Name = "Rarity Filter",
            Content = "Set minimum rarity to: " .. Value,
            Image = "rbxassetid://4483345998",
            Time = 3
        })
    end    
})

AutoFishSection:AddToggle({
    Name = "Auto Sell",
    Default = false,
    Callback = function(Value)
        autoFishingSettings.autoSell = Value
    end    
})

AutoFishSection:AddToggle({
    Name = "Keep Legendary+",
    Default = true,
    Callback = function(Value)
        autoFishingSettings.keepLegendaryPlus = Value
    end    
})

AutoFishSection:AddButton({
    Name = "Sell Fish Now",
    Callback = function()
        sellFish()
    end
})

AutoFishSection:AddSlider({
    Name = "Max Fishing Time",
    Min = 30,
    Max = 240,
    Default = 120,
    Color = Color3.fromRGB(0, 162, 255),
    Increment = 10,
    ValueName = "seconds",
    Callback = function(Value)
        autoFishingSettings.maxFishingTime = Value
    end    
})

-- Teleport Tab Elements
local TeleportSection = TeleportTab:AddSection({
    Name = "Teleport Locations"
})

TeleportSection:AddButton({
    Name = "Teleport to Shop",
    Callback = function()
        for _, obj in pairs(workspace:GetDescendants()) do
            if (obj.Name:lower():find("shop") or obj.Name:lower():find("store")) and 
                (obj:IsA("BasePart") or (obj:IsA("Model") and obj.PrimaryPart)) then
                
                if obj:IsA("BasePart") then
                    Character:SetPrimaryPartCFrame(CFrame.new(obj.Position + Vector3.new(0, 5, 0)))
                else
                    Character:SetPrimaryPartCFrame(CFrame.new(obj.PrimaryPart.Position + Vector3.new(0, 5, 0)))
                end
                
                OrionLib:MakeNotification({
                    Name = "Teleport",
                    Content = "Teleported to shop area",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
                break
            end
        end
    end
})

TeleportSection:AddButton({
    Name = "Teleport to Sell",
    Callback = function()
        for _, obj in pairs(workspace:GetDescendants()) do
            if (obj.Name:lower():find("sell") or obj.Name:lower():find("cash")) and 
                (obj:IsA("BasePart") or (obj:IsA("Model") and obj.PrimaryPart)) then
                
                if obj:IsA("BasePart") then
                    Character:SetPrimaryPartCFrame(CFrame.new(obj.Position + Vector3.new(0, 5, 0)))
                else
                    Character:SetPrimaryPartCFrame(CFrame.new(obj.PrimaryPart.Position + Vector3.new(0, 5, 0)))
                end
                
                OrionLib:MakeNotification({
                    Name = "Teleport",
                    Content = "Teleported to sell area",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
                break
            end
        end
    end
})

TeleportSection:AddButton({
    Name = "Teleport to Dock",
    Callback = function()
        for _, obj in pairs(workspace:GetDescendants()) do
            if (obj.Name:lower():find("dock") or obj.Name:lower():find("pier")) and 
                (obj:IsA("BasePart") or (obj:IsA("Model") and obj.PrimaryPart)) then
                
                if obj:IsA("BasePart") then
                    Character:SetPrimaryPartCFrame(CFrame.new(obj.Position + Vector3.new(0, 5, 0)))
                else
                    Character:SetPrimaryPartCFrame(CFrame.new(obj.PrimaryPart.Position + Vector3.new(0, 5, 0)))
                end
                
                OrionLib:MakeNotification({
                    Name = "Teleport",
                    Content = "Teleported to dock area",
                    Image = "rbxassetid://4483345998",
                    Time = 3
                })
                break
            end
        end
    end
})

-- Stats Tab Elements
local StatsSection = StatsTab:AddSection({
    Name = "Fishing Statistics"
})

-- Create labels for fish stats
local fishCountLabel = StatsSection:AddLabel("Total Fish Caught: 0")
local rareFishLabel = StatsSection:AddLabel("Rare/Legendary Fish: 0")

-- Update stats periodically
spawn(function()
    while wait(1) do
        if not fishCountLabel or not rareFishLabel then break end
        
        fishCountLabel:Set("Total Fish Caught: " .. autoFishingSettings.fishCaughtCount)
        rareFishLabel:Set("Rare/Legendary Fish: " .. autoFishingSettings.rareCaughtCount)
    end
end)

-- Settings Tab Elements
local SettingsSection = SettingsTab:AddSection({
    Name = "Script Settings"
})

SettingsSection:AddToggle({
    Name = "Anti-AFK",
    Default = true,
    Callback = function(Value)
        -- Anti-AFK is already set up, this is just a visual toggle
    end    
})

SettingsSection:AddButton({
    Name = "Copy Discord Invite",
    Callback = function()
        pcall(function()
            setclipboard("https://discord.gg/ugyvkJXhFh")
        end)
        OrionLib:MakeNotification({
            Name = "Discord",
            Content = "Invite link copied to clipboard",
            Image = "rbxassetid://4483345998",
            Time = 3
        })
    end
})

SettingsSection:AddButton({
    Name = "Destroy GUI",
    Callback = function()
        autoFishingSettings.enabled = false
        globalEnv.SkyXFishingScriptLoaded = false
        
        OrionLib:Destroy()
        OrionLib:MakeNotification({
            Name = "Closing",
            Content = "SkyX Fishing GUI closed",
            Image = "rbxassetid://4483345998",
            Time = 3
        })
    end
})

-- Show initial notification
OrionLib:MakeNotification({
    Name = "SkyX Hub",
    Content = "Fishing Script loaded successfully!",
    Image = "rbxassetid://4483345998",
    Time = 5
})

-- Return the configuration for external access
return autoFishingSettings
