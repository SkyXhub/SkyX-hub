--[[    
    OrionX Comprehensive Example Script
    A full demonstration of OrionX UI features
    
    This script will work on any game and shows all the UI elements
    with proper error handling and organization.
]]

-- Load the OrionX UI Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/SkyXhub/OrionX-UI/refs/heads/main/OrionX-UI.lua')))() -- Use your actual URL here

-- Create the main window with all options
local Window = OrionLib:MakeWindow({
    Name = "OrionX Complete Demo",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "OrionXDemo",
    IntroEnabled = true,
    IntroText = "OrionX Demo",
    IntroIcon = "home", -- Using built-in named icon
    Icon = "home", -- Using built-in named icon
    CloseCallback = function()
        print("UI closed - performing cleanup")
    end
})

-- Function to create a notification with error handling
local function createNotification(title, content, image, time)
    pcall(function()
        OrionLib:MakeNotification({
            Name = title or "Notification",
            Content = content or "This is a notification",
            Image = image or "info", -- Using built-in named icon as default
            Time = time or 5
        })
    end)
end

-- Welcome notification
createNotification(
    "OrionX Demo Loaded",
    "Welcome to the complete OrionX UI example!",
    "check",
    7
)

-- Create Main Tab
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "home",
    PremiumOnly = false
})

-- Add Sections
local InfoSection = MainTab:AddSection({
    Name = "Information"
})

-- Add a label with error handling
InfoSection:AddLabel("Welcome to OrionX UI Library Demo")

-- Add a paragraph with error handling
InfoSection:AddParagraph("About This Demo", "This script demonstrates all UI elements and features of the OrionX UI Library. Explore the different tabs to see all available components.")

-- Add a button with error handling
InfoSection:AddButton({
    Name = "Show Notification",
    Callback = function()
        createNotification("Button Pressed", "You clicked the button!", "check", 3)
    end    
})

-- Create Controls Tab
local ControlsTab = Window:MakeTab({
    Name = "Controls",
    Icon = "settings",
    PremiumOnly = false
})

-- Add Basic Controls Section
local BasicControlsSection = ControlsTab:AddSection({
    Name = "Basic Controls"
})

-- Add a toggle with error handling
local toggleEnabled = false
BasicControlsSection:AddToggle({
    Name = "Toggle Example",
    Default = false,
    Save = true,
    Flag = "toggleExample",
    Callback = function(Value)
        toggleEnabled = Value
        print("Toggle set to: ", Value)
    end    
})

-- Add a slider with error handling
BasicControlsSection:AddSlider({
    Name = "Slider Example",
    Min = 0,
    Max = 100,
    Default = 50,
    Color = Color3.fromRGB(255, 100, 100),
    Increment = 1,
    ValueName = "value",
    Save = true,
    Flag = "sliderExample",
    Callback = function(Value)
        print("Slider value: ", Value)
    end    
})

-- Add a dropdown with error handling
BasicControlsSection:AddDropdown({
    Name = "Dropdown Example",
    Default = "Option 1",
    Options = {"Option 1", "Option 2", "Option 3", "Option 4", "Option 5"},
    Save = true,
    Flag = "dropdownExample",
    Callback = function(Option)
        print("Selected option: ", Option)
    end    
})

-- Advanced Controls Section
local AdvancedControlsSection = ControlsTab:AddSection({
    Name = "Advanced Controls"
})

-- Add a keybind with error handling
AdvancedControlsSection:AddBind({
    Name = "Keybind Example",
    Default = Enum.KeyCode.F,
    Hold = false,
    Save = true,
    Flag = "keybindExample",
    Callback = function()
        createNotification("Keybind Pressed", "You pressed the keybind!", "key", 3)
    end    
})

-- Add a color picker with error handling
AdvancedControlsSection:AddColorpicker({
    Name = "Color Picker",
    Default = Color3.fromRGB(255, 0, 0),
    Save = true,
    Flag = "colorpickerExample",
    Callback = function(Value)
        print("Selected color: ", Value)
    end    
})

-- Add a textbox with error handling
AdvancedControlsSection:AddTextbox({
    Name = "Textbox Example",
    Default = "Default text",
    TextDisappear = false,
    Callback = function(Text)
        print("Entered text: ", Text)
    end    
})

-- Create Theme Tab
local ThemeTab = Window:MakeTab({
    Name = "Appearance",
    Icon = "brush",
    PremiumOnly = false
})

-- Create Events Tab
local EventsTab = Window:MakeTab({
    Name = "Events",
    Icon = "bolt",
    PremiumOnly = false
})

-- Add Events Section
local EventsSection = EventsTab:AddSection({
    Name = "Event Testing"
})

-- Add a button to trigger multiple events
EventsSection:AddButton({
    Name = "Trigger Multiple Events",
    Callback = function()
        -- Update UI elements
        pcall(function()
            createNotification("Events Triggered", "Updating multiple UI elements", "check", 3)
            
            -- Change toggle state
            toggleEnabled = not toggleEnabled
            OrionLib.Flags["toggleExample"]:Set(toggleEnabled)
            
            -- Change slider value
            local randomValue = math.random(0, 100)
            OrionLib.Flags["sliderExample"]:Set(randomValue)
            
            -- Change dropdown value
            local options = {"Option 1", "Option 2", "Option 3", "Option 4", "Option 5"}
            local randomOption = options[math.random(1, #options)]
            OrionLib.Flags["dropdownExample"]:Refresh(options, true)
            OrionLib.Flags["dropdownExample"]:Set(randomOption)
        end)
    end    
})

-- Create utility functions section
local UtilitySection = EventsTab:AddSection({
    Name = "Utility Functions"
})

-- Add a button to check game information
UtilitySection:AddButton({
    Name = "Get Game Info",
    Callback = function()
        local success, result = pcall(function()
            local gameId = game.GameId
            local placeId = game.PlaceId
            local placeName = game:GetService("MarketplaceService"):GetProductInfo(placeId).Name
            local playerCount = #game:GetService("Players"):GetPlayers()
            
            createNotification(
                "Game Information",
                "Game: " .. placeName .. " (" .. placeId .. ")\nPlayers: " .. playerCount,
                "info",
                5
            )
        end)
        
        if not success then
            createNotification("Error", "Failed to get game info: " .. tostring(result), "warning", 5)
        end
    end
})

-- Create a Premium tab that's only visible to premium users
local PremiumTab = Window:MakeTab({
    Name = "Premium",
    Icon = "crown",
    PremiumOnly = true
})

-- If the user has access to premium tab, add content
if PremiumTab then
    local PremiumSection = PremiumTab:AddSection({
        Name = "Premium Features"
    })
    
    PremiumSection:AddParagraph("Premium Access", "You have access to premium features!")
    
    PremiumSection:AddButton({
        Name = "Premium Feature",
        Callback = function()
            createNotification("Premium", "This is a premium feature!", "star", 3)
        end
    })
end

-- Initialize the UI
OrionLib:Init()

-- Add a friendly message at the end
print("OrionX UI Demo initialized successfully!")
