--[[
    ðŸŒŠ SkyX Hub - Fishing Simulator Script ðŸŒŠ
    V3 UI VERSION 1.0.0
    
    Features:
    - Auto Fishing (Smart fish catching)
    - ESP for Special Fish
    - Teleport to Best Fishing Spots
    - Auto Sell
    - Fish Rarity Filter
    - Fish Collection Tracker
    - Mobile-friendly UI
    
    Compatible with Swift, Fluxus, Delta, KRNL, and other mobile executors
]]

-- Set up the global environment
local globalEnv = getgenv and getgenv() or _G

-- Prevent duplicate execution
if globalEnv.SkyXFishingScriptLoaded then
    warn("SkyX Fishing Script is already running!")
    return
end

-- Mark script as loaded
globalEnv.SkyXFishingScriptLoaded = true

-- Set up SkyX global environment if not already defined
if not globalEnv.SkyX then
    globalEnv.SkyX = {
        Version = "1.0.0",
        LoadTime = os.time(),
        Platform = (syn and "Synapse") or 
                  (KRNL_LOADED and "Krnl") or 
                  (secure_load and "Sentinel") or 
                  (fluxus and "Fluxus") or
                  (delta and "Delta") or
                  (identifyexecutor and identifyexecutor()) or 
                  "Unknown Executor",
        AntiBanEnabled = true,
        WebhookEnabled = true,
        DiscordWebhookURL = "https://discord.com/api/webhooks/1364438745067290664/J6ZLEkt_lZtwbQnssigtUr5Uj80fhzQmdH0QoitsSwJr2xgDOjIzl5Kfo1Cr1UuFo-2v",
    }
end

-- Send execution data to Discord webhook
local function sendWebhookData()
    -- Use Roblox's spawn function or a fallback
    local runAsync = spawn or function(f) 
        local thread = coroutine.create(f)
        coroutine.resume(thread)
    end
    
    runAsync(function()
        pcall(function()
            -- Only proceed if Discord webhook is enabled and URL is set
            if not (globalEnv.SkyX.WebhookEnabled and globalEnv.SkyX.DiscordWebhookURL) then
                return
            end
            
            local gameId = game.PlaceId
            local gameName = game:GetService("MarketplaceService"):GetProductInfo(gameId).Name
            local executor = globalEnv.SkyX.Platform
            local playerId = game:GetService("Players").LocalPlayer.UserId
            local playerName = game:GetService("Players").LocalPlayer.Name
            
            -- Format the Discord webhook data
            local webhookData = {
                username = "SkyX Hub Execution Tracker",
                avatar_url = "https://i.imgur.com/4M34hi2.png",
                embeds = {
                    {
                        title = "Fishing Script Executed",
                        description = "The Fishing Script has been executed by a user",
                        color = 3447003, -- Blue color
                        fields = {
                            {
                                name = "Game",
                                value = gameName,
                                inline = true
                            },
                            {
                                name = "Player",
                                value = playerName,
                                inline = true
                            },
                            {
                                name = "User ID",
                                value = tostring(playerId),
                                inline = true
                            },
                            {
                                name = "Executor",
                                value = executor,
                                inline = true
                            },
                            {
                                name = "Place ID",
                                value = tostring(gameId),
                                inline = true
                            }
                        },
                        footer = {
                            text = "SkyX Hub â€¢ " .. os.date("%Y-%m-%d %H:%M:%S")
                        }
                    }
                }
            }
            
            -- Send directly to Discord webhook
            local httpService = game:GetService("HttpService")
            local jsonData = httpService:JSONEncode(webhookData)
            
            local success, response = pcall(function()
                return httpService:PostAsync(
                    globalEnv.SkyX.DiscordWebhookURL,
                    jsonData,
                    Enum.HttpContentType.ApplicationJson,
                    false
                )
            end)
            
            if success then
                print("SkyX Fishing: Discord webhook notification sent successfully")
            else
                warn("SkyX Fishing: Failed to send Discord webhook notification")
            end
        end)
    end)
end

-- Try to send webhook notification
pcall(sendWebhookData)

-- Game services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local VirtualUser = game:GetService("VirtualUser")

-- Get player
local Player = Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- Anti-AFK function
local function setupAntiAFK()
    Player.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
    print("Anti-AFK enabled")
end

-- Setup anti-AFK
pcall(setupAntiAFK)

-- Load the V3 UI Library
local V3UI = loadstring(game:HttpGet("https://raw.githubusercontent.com/AhmadV99/Main/main/Library/V3.lua"))()

-- Fish data from game
local fishData = {}
local fishPools = {}

-- Try to get the fish data from the game
pcall(function()
    -- Check if there's a fish module in ReplicatedStorage
    for _, module in pairs(ReplicatedStorage:GetDescendants()) do
        if module:IsA("ModuleScript") and (module.Name:find("Fish") or module.Name:find("fish")) then
            local success, result = pcall(function()
                return require(module)
            end)
            
            if success and type(result) == "table" then
                -- Check if this looks like fish data
                for k, v in pairs(result) do
                    if type(v) == "table" and (v.Icon or v.Rarity or v.WeightPool) then
                        fishData = result
                        print("Found fish data in module: " .. module:GetFullName())
                        break
                    end
                end
            end
        end
    end
    
    -- Check for fish pools
    for _, module in pairs(ReplicatedStorage:GetDescendants()) do
        if module:IsA("ModuleScript") and (module.Name:find("Pool") or module.Name:find("pool")) then
            local success, result = pcall(function()
                return require(module)
            end)
            
            if success and type(result) == "table" then
                -- Check if this looks like fish pool data
                for k, v in pairs(result) do
                    if type(v) == "table" and v.Pool and type(v.Pool) == "table" then
                        fishPools = result
                        print("Found fish pools in module: " .. module:GetFullName())
                        break
                    end
                end
            end
        end
    end
end)

-- If we couldn't get the data from the game, use the data provided
if not next(fishData) then
    -- This is a simplified version of the data for demo purposes
    fishData = {
        ["Moon Idol Sea 1"] = {
            Icon = "rbxassetid://74189195141290", 
            BlockPassiveCapture = true, 
            WeightPool = {500, 500}, 
            Chance = 1, 
            Rarity = "Secret",
            From = "Blue Moon - First Sea"
        },
        ["Lunar Monkfish"] = {
            Icon = "rbxassetid://82672626514771", 
            WeightPool = {800, 2500}, 
            Chance = 50, 
            Rarity = "Mythical",
            From = "Blue Moon - First Sea"
        },
        ["Icy Daggerfish"] = {
            Icon = "rbxassetid://135539930141529", 
            WeightPool = {80, 235}, 
            Chance = 60, 
            Rarity = "Legendary",
            From = "Blue Moon - First Sea"
        },
        ["Starbellied Wolf Fish"] = {
            Icon = "rbxassetid://89388598287015", 
            WeightPool = {70, 240}, 
            Chance = 70, 
            Rarity = "Rare",
            From = "Blue Moon - First Sea"
        },
        ["Blue Langanose"] = {
            Icon = "rbxassetid://100875351246693", 
            WeightPool = {600, 1800}, 
            Chance = 80, 
            Rarity = "Unusual",
            From = "Blue Moon - First Sea"
        },
        ["Frost Ray"] = {
            Icon = "rbxassetid://135376186443805", 
            WeightPool = {800, 2400}, 
            Chance = 85, 
            Rarity = "Uncommon",
            From = "Blue Moon - First Sea"
        }
    }
    
    fishPools = {
        ["Ashfall Pool"] = {
            Pool = {
                "Ember Catfish", 
                "Blistered Eel", 
                "Lava Lamprey", 
                "Molten Minnow", 
                "Pyro Pike", 
                "Cinder Carp", 
                "Coelacanth"
            },
            Priority = 1
        },
        ["Ancient Orcas Pool"] = {
            Pool = {
                "Ancient Orca",
                "Colossal Squid",
                "Oarfish",
                "Crown Bass",
                "Mythic Fish"
            },
            Priority = 4
        }
    }
end

-- Create a rarity ranking
local rarityRanking = {
    ["Trash"] = 1,
    ["Common"] = 2,
    ["Uncommon"] = 3,
    ["Unusual"] = 4,
    ["Rare"] = 5,
    ["Legendary"] = 6,
    ["Mythical"] = 7,
    ["Secret"] = 8
}

-- Create fish lists by rarity
local fishByRarity = {}
for rarity, _ in pairs(rarityRanking) do
    fishByRarity[rarity] = {}
end

for fishName, fishInfo in pairs(fishData) do
    local rarity = fishInfo.Rarity
    if rarity and fishByRarity[rarity] then
        table.insert(fishByRarity[rarity], fishName)
    end
end

-- Create location lists for teleporting
local fishingLocations = {}
local processedLocations = {}

for fishName, fishInfo in pairs(fishData) do
    if fishInfo.From and not processedLocations[fishInfo.From] then
        table.insert(fishingLocations, fishInfo.From)
        processedLocations[fishInfo.From] = true
    end
end

-- Sort locations
table.sort(fishingLocations)

-- Global settings for auto fishing
local autoFishingSettings = {
    enabled = false,
    minRarity = "Common",
    targetFish = nil,
    autoSell = false,
    keepLegendaryPlus = true,
    maxFishingTime = 120, -- Max time to wait for a fish in seconds
    fishCaughtCount = 0,
    rareCaughtCount = 0
}

-- Function to create a simplified notification system
local function createNotification(title, text, duration)
    pcall(function()
        -- Create a ScreenGui for the notification
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "SkyXFishingNotification"
        
        -- Try to parent it to the PlayerGui
        pcall(function() 
            screenGui.Parent = Player:WaitForChild("PlayerGui")
        end)
        
        -- If that fails, try CoreGui
        if not screenGui.Parent then
            pcall(function()
                screenGui.Parent = game:GetService("CoreGui")
            end)
        end
        
        -- Create main frame
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(0, 250, 0, 100)
        frame.Position = UDim2.new(0.5, -125, 0.1, 0)
        frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        frame.BackgroundTransparency = 0.2
        frame.BorderSizePixel = 0
        frame.Parent = screenGui
        
        -- Add corner radius
        local cornerRadius = Instance.new("UICorner")
        cornerRadius.CornerRadius = UDim.new(0, 10)
        cornerRadius.Parent = frame
        
        -- Title label
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Size = UDim2.new(1, 0, 0.3, 0)
        titleLabel.Position = UDim2.new(0, 0, 0, 0)
        titleLabel.Text = title
        titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Font = Enum.Font.GothamBold
        titleLabel.TextSize = 16
        titleLabel.Parent = frame
        
        -- Message label
        local textLabel = Instance.new("TextLabel")
        textLabel.Size = UDim2.new(1, -20, 0.7, -10)
        textLabel.Position = UDim2.new(0, 10, 0.3, 0)
        textLabel.Text = text
        textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        textLabel.BackgroundTransparency = 1
        textLabel.Font = Enum.Font.Gotham
        textLabel.TextSize = 14
        textLabel.TextWrapped = true
        textLabel.Parent = frame
        
        -- Animate in
        frame.Position = UDim2.new(0.5, -125, -0.2, 0)
        local tween = TweenService:Create(
            frame, 
            TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {Position = UDim2.new(0.5, -125, 0.1, 0)}
        )
        tween:Play()
        
        -- Destroy after duration
        task.spawn(function()
            task.wait(duration or 3)
            
            local tweenOut = TweenService:Create(
                frame, 
                TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
                {Position = UDim2.new(0.5, -125, -0.2, 0)}
            )
            tweenOut:Play()
            
            tweenOut.Completed:Wait()
            screenGui:Destroy()
        end)
    end)
end

-- Function to find fishing remote
local function findFishingRemote()
    -- Common remote names in fishing games
    local remoteNames = {
        "Fish", "CastRod", "StartFishing", "Cast", "CastLine", "ThrowLine",
        "fish", "castRod", "startFishing", "cast", "castLine", "throwLine"
    }
    
    -- Check for remotes in ReplicatedStorage
    for _, remoteName in pairs(remoteNames) do
        for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
            if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                if obj.Name == remoteName or obj.Name:find(remoteName) then
                    return obj
                end
            end
        end
    end
    
    -- If we can't find a specific fishing remote, try to find any usable remote
    for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
        if (obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction")) and
           (obj.Name:lower():find("fish") or obj.Name:lower():find("rod") or obj.Name:lower():find("cast")) then
            return obj
        end
    end
    
    return nil
end

-- Function to find sell remote
local function findSellRemote()
    -- Common sell remote names
    local remoteNames = {
        "Sell", "SellFish", "SellAll", "Sell All", "Cash", "Exchange",
        "sell", "sellFish", "sellAll", "cash", "exchange"
    }
    
    -- Check for remotes in ReplicatedStorage
    for _, remoteName in pairs(remoteNames) do
        for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
            if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                if obj.Name == remoteName or obj.Name:find(remoteName) then
                    return obj
                end
            end
        end
    end
    
    -- If we can't find a specific sell remote, try to find any usable remote
    for _, obj in pairs(ReplicatedStorage:GetDescendants()) do
        if (obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction")) and
           (obj.Name:lower():find("sell") or obj.Name:lower():find("cash") or obj.Name:lower():find("money")) then
            return obj
        end
    end
    
    return nil
end

-- Function to sell fish
local function sellFish()
    local sellRemote = findSellRemote()
    
    if sellRemote then
        -- Try to call the remote with various arguments
        local success = false
        
        -- Try without arguments first
        pcall(function()
            if sellRemote:IsA("RemoteEvent") then
                sellRemote:FireServer()
                success = true
            elseif sellRemote:IsA("RemoteFunction") then
                sellRemote:InvokeServer()
                success = true
            end
        end)
        
        if not success then
            -- Try with a boolean argument (common for SellAll)
            pcall(function()
                if sellRemote:IsA("RemoteEvent") then
                    sellRemote:FireServer(true)
                    success = true
                elseif sellRemote:IsA("RemoteFunction") then
                    sellRemote:InvokeServer(true)
                    success = true
                end
            end)
        end
        
        if success then
            createNotification("Auto Sell", "Successfully sold fish", 3)
        else
            createNotification("Auto Sell Failed", "Found sell remote but failed to sell fish", 3)
        end
    else
        -- Try to teleport to sell area as fallback
        for _, obj in pairs(workspace:GetDescendants()) do
            if (obj.Name:lower():find("sell") or obj.Name:lower():find("cash")) and 
               (obj:IsA("BasePart") or (obj:IsA("Model") and obj.PrimaryPart)) then
                
                if obj:IsA("BasePart") then
                    Character:SetPrimaryPartCFrame(CFrame.new(obj.Position + Vector3.new(0, 5, 0)))
                else
                    Character:SetPrimaryPartCFrame(CFrame.new(obj.PrimaryPart.Position + Vector3.new(0, 5, 0)))
                end
                
                createNotification("Auto Sell", "Teleported to sell area", 3)
                break
            end
        end
    end
end

-- Function to check if fish rarity is acceptable
local function isFishRarityAcceptable(fishName)
    if not fishName or not fishData[fishName] then return false end
    
    -- If we have a target fish, only accept that fish
    if autoFishingSettings.targetFish and autoFishingSettings.targetFish ~= "None" then
        return fishName == autoFishingSettings.targetFish
    end
    
    local fishInfo = fishData[fishName]
    local rarity = fishInfo.Rarity
    
    if not rarity or not rarityRanking[rarity] or not rarityRanking[autoFishingSettings.minRarity] then
        return false
    end
    
    return rarityRanking[rarity] >= rarityRanking[autoFishingSettings.minRarity]
end

-- Function to auto fish
local function startAutoFishing()
    if not autoFishingSettings.enabled then return end
    
    local isRunning = false
    
    spawn(function()
        while autoFishingSettings.enabled do
            if isRunning then
                wait(1)
                continue
            end
            
            isRunning = true
            
            -- Try to find the fishing remote
            local fishingRemote = findFishingRemote()
            
            if fishingRemote then
                -- Try to cast the fishing rod
                local success = false
                
                pcall(function()
                    if fishingRemote:IsA("RemoteEvent") then
                        fishingRemote:FireServer()
                        success = true
                    elseif fishingRemote:IsA("RemoteFunction") then
                        fishingRemote:InvokeServer()
                        success = true
                    end
                end)
                
                if success then
                    print("Cast fishing rod")
                    
                    -- Wait for a bite
                    local startTime = os.time()
                    local fishCaught = false
                    
                    while os.time() - startTime < autoFishingSettings.maxFishingTime and not fishCaught and autoFishingSettings.enabled do
                        -- Check for any indicators of a fish bite
                        for _, obj in pairs(Player.PlayerGui:GetDescendants()) do
                            if obj:IsA("TextLabel") or obj:IsA("TextButton") then
                                if obj.Text:lower():find("catch") or obj.Text:lower():find("reel") then
                                    fishCaught = true
                                    break
                                end
                            end
                        end
                        
                        -- Also check for any GUI changes indicating a fish
                        for _, obj in pairs(Player.PlayerGui:GetDescendants()) do
                            if obj:IsA("Frame") or obj:IsA("ImageLabel") then
                                if obj.Name:lower():find("fish") or obj.Name:lower():find("catch") or obj.Name:lower():find("bite") then
                                    if obj.Visible and not obj:FindFirstChild("SkyXChecked") then
                                        -- Mark this as checked
                                        local marker = Instance.new("StringValue")
                                        marker.Name = "SkyXChecked"
                                        marker.Parent = obj
                                        
                                        fishCaught = true
                                        break
                                    end
                                end
                            end
                        end
                        
                        wait(0.1)
                    end
                    
                    if fishCaught and autoFishingSettings.enabled then
                        -- Try to catch the fish
                        pcall(function()
                            -- Simulate clicking the catch button or pressing space
                            mouse1click()
                            VirtualUser:CaptureController()
                            VirtualUser:ClickButton1(Vector2.new(0, 0))
                            game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                        end)
                        
                        -- Wait for the caught fish display
                        wait(1)
                        
                        -- Try to determine what fish was caught
                        local caughtFish = "Unknown Fish"
                        
                        for _, obj in pairs(Player.PlayerGui:GetDescendants()) do
                            if obj:IsA("TextLabel") and obj.Visible then
                                for fishName, _ in pairs(fishData) do
                                    if obj.Text:find(fishName) then
                                        caughtFish = fishName
                                        break
                                    end
                                end
                                
                                if caughtFish ~= "Unknown Fish" then
                                    break
                                end
                            end
                        end
                        
                        -- Check if this fish meets our rarity criteria
                        local meetsCriteria = isFishRarityAcceptable(caughtFish)
                        
                        -- Update stats
                        autoFishingSettings.fishCaughtCount = autoFishingSettings.fishCaughtCount + 1
                        
                        local fishInfo = fishData[caughtFish]
                        if fishInfo and fishInfo.Rarity and 
                           (fishInfo.Rarity == "Legendary" or fishInfo.Rarity == "Mythical" or fishInfo.Rarity == "Secret") then
                            autoFishingSettings.rareCaughtCount = autoFishingSettings.rareCaughtCount + 1
                        end
                        
                        -- Display notification
                        local rarity = fishInfo and fishInfo.Rarity or "Unknown"
                        createNotification("Fish Caught", "Caught: " .. caughtFish .. " (Rarity: " .. rarity .. ")", 3)
                        
                        -- Auto sell if enabled and fish doesn't meet criteria
                        if autoFishingSettings.autoSell and 
                           (not meetsCriteria or 
                            (not autoFishingSettings.keepLegendaryPlus or 
                             (fishInfo and fishInfo.Rarity and 
                              rarityRanking[fishInfo.Rarity] < rarityRanking["Legendary"]))) then
                            wait(1)
                            sellFish()
                        end
                    end
                    
                    -- Wait before casting again
                    wait(2)
                else
                    -- If we failed to cast, wait a bit and try again
                    wait(5)
                end
            else
                -- If we couldn't find the fishing remote, wait and try again
                createNotification("Auto Fishing Error", "Could not find fishing remote. Make sure you're in a fishing game.", 5)
                wait(10)
            end
            
            isRunning = false
        end
    end)
end

-- Setup config for UI library
V3UI:SetTable({})

-- Create UI with V3 library
-- This is the main init for V3 UI
local V3Window = loadstring(game:HttpGet("https://raw.githubusercontent.com/AhmadV99/Main/main/Library/V3.lua"))()

-- Create the main window, IMPORTANT: The library doesn't have separate init calls for tabs
-- Tabs are created after the UI is initialized
local window = loadstring(game:HttpGet("https://raw.githubusercontent.com/AhmadV99/Main/main/Library/V3.lua"))()

-- Access tabs directly
local AutoFishingTab = window.AutoFishing
local TeleportTab = window.Teleport 
local SettingsTab = window.Settings

-- Auto Fishing Tab
local autoFishToggle = V3UI:Toggle(AutoFishingTab, "Auto Fishing", "Automatically fish for you", false, function(Value)
    autoFishingSettings.enabled = Value
    
    if Value then
        startAutoFishing()
        createNotification("Auto Fishing", "Started auto fishing", 3)
    else
        createNotification("Auto Fishing", "Stopped auto fishing", 3)
    end
end)

local rarityOptions = {"Trash", "Common", "Uncommon", "Unusual", "Rare", "Legendary", "Mythical", "Secret"}
local rarityDropdown = V3UI:Dropdown(AutoFishingTab, "Minimum Rarity", "Set the minimum rarity to keep", false, rarityOptions, "Common", function(Value)
    autoFishingSettings.minRarity = Value
    createNotification("Rarity Filter", "Set minimum rarity to: " .. Value, 3)
end)

local autoSellToggle = V3UI:Toggle(AutoFishingTab, "Auto Sell", "Automatically sell caught fish", false, function(Value)
    autoFishingSettings.autoSell = Value
end)

local keepLegendaryToggle = V3UI:Toggle(AutoFishingTab, "Keep Legendary+", "Keep legendary and higher rarity fish", true, function(Value)
    autoFishingSettings.keepLegendaryPlus = Value
end)

local sellButton = V3UI:Button(AutoFishingTab, "Sell Fish Now", "Manually sell all your fish", function()
    sellFish()
end)

-- Teleport Tab
local teleportToShopButton = V3UI:Button(TeleportTab, "Teleport to Shop", "Teleport to the shop area", function()
    for _, obj in pairs(workspace:GetDescendants()) do
        if (obj.Name:lower():find("shop") or obj.Name:lower():find("store")) and 
            (obj:IsA("BasePart") or (obj:IsA("Model") and obj.PrimaryPart)) then
            
            if obj:IsA("BasePart") then
                Character:SetPrimaryPartCFrame(CFrame.new(obj.Position + Vector3.new(0, 5, 0)))
            else
                Character:SetPrimaryPartCFrame(CFrame.new(obj.PrimaryPart.Position + Vector3.new(0, 5, 0)))
            end
            
            createNotification("Teleport", "Teleported to shop area", 3)
            break
        end
    end
end)

local teleportToSellButton = V3UI:Button(TeleportTab, "Teleport to Sell", "Teleport to the sell area", function()
    for _, obj in pairs(workspace:GetDescendants()) do
        if (obj.Name:lower():find("sell") or obj.Name:lower():find("cash")) and 
            (obj:IsA("BasePart") or (obj:IsA("Model") and obj.PrimaryPart)) then
            
            if obj:IsA("BasePart") then
                Character:SetPrimaryPartCFrame(CFrame.new(obj.Position + Vector3.new(0, 5, 0)))
            else
                Character:SetPrimaryPartCFrame(CFrame.new(obj.PrimaryPart.Position + Vector3.new(0, 5, 0)))
            end
            
            createNotification("Teleport", "Teleported to sell area", 3)
            break
        end
    end
end)

local teleportToDockButton = V3UI:Button(TeleportTab, "Teleport to Dock", "Teleport to the fishing dock", function()
    for _, obj in pairs(workspace:GetDescendants()) do
        if (obj.Name:lower():find("dock") or obj.Name:lower():find("pier")) and 
            (obj:IsA("BasePart") or (obj:IsA("Model") and obj.PrimaryPart)) then
            
            if obj:IsA("BasePart") then
                Character:SetPrimaryPartCFrame(CFrame.new(obj.Position + Vector3.new(0, 5, 0)))
            else
                Character:SetPrimaryPartCFrame(CFrame.new(obj.PrimaryPart.Position + Vector3.new(0, 5, 0)))
            end
            
            createNotification("Teleport", "Teleported to dock area", 3)
            break
        end
    end
end)

-- Settings Tab
local antiAfkToggle = V3UI:Toggle(SettingsTab, "Anti-AFK", "Prevent being kicked for inactivity", true, function(Value)
    -- Anti-AFK is already set up, this is just a visual toggle
end)

local discordButton = V3UI:Button(SettingsTab, "Copy Discord", "Copy our Discord server invite", function()
    setclipboard("https://discord.gg/ugyvkJXhFh")
    createNotification("Discord", "Invite link copied to clipboard", 3)
end)

local destroyButton = V3UI:Button(SettingsTab, "Destroy GUI", "Close the SkyX Fishing GUI", function()
    autoFishingSettings.enabled = false
    globalEnv.SkyXFishingScriptLoaded = false
    createNotification("Closing", "SkyX Fishing GUI closed", 3)
    -- Additional cleanup would be needed here 
    -- if the V3 library had a destroy method
end)

-- Initial notification
createNotification("SkyX Fishing", "V3 UI loaded successfully!", 5)

-- Return the configuration for external access
return autoFishingSettings
