--[[
    SkyX Blox Fruits Script
    Mobile-friendly with MM2-style fallback modules
    Works on: KRNL, Swift, Fluxus, Delta and other mobile executors
]]

-- Detect device type
local IsMobile = (function()
    local success, result = pcall(function()
        return game:GetService("UserInputService").TouchEnabled and 
               not game:GetService("UserInputService").MouseEnabled
    end)
    return success and result or false
end)()

local DeviceText = IsMobile and "Mobile" or "PC"

-- Core services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Create connections table for cleanup
local Connections = {}

-- Function to add connection and track it for cleanup
local function AddConnection(signal, callback)
    if not signal then
        warn("SkyX: Attempted to connect to nil signal")
        return
    end
    
    local connection = signal:Connect(callback)
    table.insert(Connections, connection)
    return connection
end

print("SkyX Blox Fruits - Starting on " .. DeviceText .. " device")



-- UI Colors
local Colors = {
    Background = Color3.fromRGB(25, 25, 35),      -- Dark background
    Container = Color3.fromRGB(30, 30, 45),       -- Slightly lighter container
    Button = Color3.fromRGB(90, 120, 240),        -- Modern blue for buttons
    Text = Color3.fromRGB(255, 255, 255),         -- White text
    Border = Color3.fromRGB(100, 130, 255),       -- Lighter blue border
    TabActive = Color3.fromRGB(90, 120, 240),     -- Match button color
    TabInactive = Color3.fromRGB(50, 50, 70),     -- Darker for inactive
    Success = Color3.fromRGB(70, 200, 120),       -- Green for success/enabled
    Danger = Color3.fromRGB(240, 70, 90),         -- Red for danger/disabled
    Warning = Color3.fromRGB(240, 180, 60),       -- Yellow for warnings
    Highlight = Color3.fromRGB(140, 160, 255)     -- Light purple highlight
}

-- Create UI
local SkyXUI = Instance.new("ScreenGui")
SkyXUI.Name = "SkyXUI_BloxFruits"
SkyXUI.ResetOnSpawn = false
SkyXUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Handle executor security models
if syn then
    syn.protect_gui(SkyXUI)
    SkyXUI.Parent = game.CoreGui
else
    SkyXUI.Parent = gethui and gethui() or game.CoreGui
end

-- Remove any existing UIs with the same name
for _, Interface in pairs(game.CoreGui:GetChildren()) do
    if Interface.Name == SkyXUI.Name and Interface ~= SkyXUI then
        Interface:Destroy()
    end
end

-- Create main window
local MainWindow = Instance.new("Frame")
MainWindow.Name = "MainWindow"
MainWindow.Size = UDim2.new(0, 500, 0, 350)
MainWindow.Position = UDim2.new(0.5, -250, 0.5, -175)
MainWindow.BackgroundColor3 = Colors.Background
MainWindow.BorderSizePixel = 0
MainWindow.Active = true
MainWindow.Draggable = false -- We'll implement custom dragging
MainWindow.Parent = SkyXUI

-- Add corner
local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 8)
MainCorner.Parent = MainWindow

-- Add shadow effect
local MainShadow = Instance.new("ImageLabel")
MainShadow.Name = "Shadow"
MainShadow.AnchorPoint = Vector2.new(0.5, 0.5)
MainShadow.Size = UDim2.new(1, 30, 1, 30)
MainShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
MainShadow.BackgroundTransparency = 1
MainShadow.Image = "rbxassetid://6015897843" -- Shadow image
MainShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
MainShadow.ImageTransparency = 0.6
MainShadow.ZIndex = 0 -- Behind the main window
MainShadow.Parent = MainWindow

-- Create title bar
local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Size = UDim2.new(1, 0, 0, 40)
TitleBar.BackgroundColor3 = Colors.Button
TitleBar.BorderSizePixel = 0
TitleBar.Parent = MainWindow

-- Add corner to title bar
local TitleCorner = Instance.new("UICorner")
TitleCorner.CornerRadius = UDim.new(0, 8)
TitleCorner.Parent = TitleBar

-- Fix corners
local CornerFix = Instance.new("Frame")
CornerFix.Name = "CornerFix"
CornerFix.Size = UDim2.new(1, 0, 0, 10)
CornerFix.Position = UDim2.new(0, 0, 1, -10)
CornerFix.BackgroundColor3 = Colors.Button
CornerFix.BorderSizePixel = 0
CornerFix.Parent = TitleBar

-- Add title text
local TitleText = Instance.new("TextLabel")
TitleText.Name = "Title"
TitleText.Size = UDim2.new(1, -50, 1, 0)
TitleText.Position = UDim2.new(0, 15, 0, 0)
TitleText.BackgroundTransparency = 1
TitleText.Font = Enum.Font.GothamBold
TitleText.TextSize = 16
TitleText.TextColor3 = Colors.Text
TitleText.TextXAlignment = Enum.TextXAlignment.Left
TitleText.Text = "🌊 SkyX Hub - Blox Fruits 🌊"
TitleText.Parent = TitleBar

-- Add close button
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -40, 0, 5)
CloseButton.BackgroundTransparency = 1
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextSize = 20
CloseButton.TextColor3 = Colors.Text
CloseButton.Text = "×"
CloseButton.Parent = TitleBar

-- Make title bar draggable
local dragging = false
local dragInput
local dragStart
local startPos

AddConnection(TitleBar.InputBegan, function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainWindow.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

AddConnection(TitleBar.InputChanged, function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

AddConnection(UserInputService.InputChanged, function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        MainWindow.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Create tab container
local TabContainer = Instance.new("Frame")
TabContainer.Name = "TabContainer"
TabContainer.Size = UDim2.new(1, 0, 0, 35)
TabContainer.Position = UDim2.new(0, 0, 0, 40)
TabContainer.BackgroundTransparency = 1
TabContainer.Parent = MainWindow

-- Create tab button layout
local TabLayout = Instance.new("UIListLayout")
TabLayout.FillDirection = Enum.FillDirection.Horizontal
TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
TabLayout.Padding = UDim.new(0, 5)
TabLayout.Parent = TabContainer

-- Add padding to tabs
local TabPadding = Instance.new("UIPadding")
TabPadding.PaddingLeft = UDim.new(0, 10)
TabPadding.PaddingRight = UDim.new(0, 10)
TabPadding.Parent = TabContainer

-- Create content container
local ContentContainer = Instance.new("Frame")
ContentContainer.Name = "ContentContainer"
ContentContainer.Size = UDim2.new(1, 0, 1, -75)
ContentContainer.Position = UDim2.new(0, 0, 0, 75)
ContentContainer.BackgroundTransparency = 1
ContentContainer.Parent = MainWindow

-- Tables to store tabs and sections
local Tabs = {}
local SelectedTab = nil

-- Function to create a new tab
local function CreateTab(name)
    -- Create tab button
    local TabButton = Instance.new("TextButton")
    TabButton.Name = name .. "TabButton"
    TabButton.Size = UDim2.new(0, 100, 1, 0)
    TabButton.BackgroundColor3 = Colors.TabInactive
    TabButton.BorderSizePixel = 0
    TabButton.Font = Enum.Font.Gotham
    TabButton.TextSize = 14
    TabButton.TextColor3 = Colors.Text
    TabButton.Text = name
    TabButton.LayoutOrder = #Tabs + 1
    TabButton.Parent = TabContainer
    
    -- Add corner to tab button
    local TabCorner = Instance.new("UICorner")
    TabCorner.CornerRadius = UDim.new(0, 5)
    TabCorner.Parent = TabButton
    
    -- Create tab page
    local TabPage = Instance.new("ScrollingFrame")
    TabPage.Name = name .. "Tab"
    TabPage.Size = UDim2.new(1, -20, 1, -10)
    TabPage.Position = UDim2.new(0, 10, 0, 5)
    TabPage.BackgroundTransparency = 1
    TabPage.BorderSizePixel = 0
    TabPage.ScrollBarThickness = 4
    TabPage.ScrollBarImageColor3 = Colors.Button
    TabPage.Visible = false
    TabPage.Parent = ContentContainer
    
    -- Add layout to tab page
    local TabPageLayout = Instance.new("UIListLayout")
    TabPageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabPageLayout.Padding = UDim.new(0, 10)
    TabPageLayout.Parent = TabPage
    
    -- Auto adjust canvas size
    AddConnection(TabPageLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        TabPage.CanvasSize = UDim2.new(0, 0, 0, TabPageLayout.AbsoluteContentSize.Y + 20)
    end)
    
    -- Create tab object
    local Tab = {
        Name = name,
        Button = TabButton,
        Page = TabPage,
        Sections = {}
    }
    
    -- Add click functionality to switch tabs
    AddConnection(TabButton.MouseButton1Click, function()
        -- Hide all tabs and deactivate buttons
        for _, tab in pairs(Tabs) do
            tab.Page.Visible = false
            tab.Button.BackgroundColor3 = Colors.TabInactive
        end
        
        -- Show selected tab and activate button
        TabPage.Visible = true
        TabButton.BackgroundColor3 = Colors.TabActive
        SelectedTab = Tab
    end)
    
    -- Add to tabs table
    table.insert(Tabs, Tab)
    
    -- If this is the first tab, select it
    if #Tabs == 1 then
        TabPage.Visible = true
        TabButton.BackgroundColor3 = Colors.TabActive
        SelectedTab = Tab
    end
    
    return Tab
end

-- Function to create a section in a tab
local function CreateSection(tab, name)
    -- Create section container
    local Section = Instance.new("Frame")
    Section.Name = name .. "Section"
    Section.Size = UDim2.new(1, 0, 0, 40) -- Initial size, will grow
    Section.BackgroundColor3 = Colors.Container
    Section.BorderSizePixel = 0
    Section.LayoutOrder = #tab.Sections + 1
    Section.Parent = tab.Page
    
    -- Add corner
    local SectionCorner = Instance.new("UICorner")
    SectionCorner.CornerRadius = UDim.new(0, 6)
    SectionCorner.Parent = Section
    
    -- Add title
    local SectionTitle = Instance.new("TextLabel")
    SectionTitle.Name = "Title"
    SectionTitle.Size = UDim2.new(1, -20, 0, 30)
    SectionTitle.Position = UDim2.new(0, 10, 0, 0)
    SectionTitle.BackgroundTransparency = 1
    SectionTitle.Font = Enum.Font.GothamSemibold
    SectionTitle.TextSize = 14
    SectionTitle.TextColor3 = Colors.Text
    SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    SectionTitle.Text = name
    SectionTitle.Parent = Section
    
    -- Add content container
    local SectionContainer = Instance.new("Frame")
    SectionContainer.Name = "Container"
    SectionContainer.Size = UDim2.new(1, -20, 1, -30)
    SectionContainer.Position = UDim2.new(0, 10, 0, 30)
    SectionContainer.BackgroundTransparency = 1
    SectionContainer.Parent = Section
    
    -- Add layout
    local SectionLayout = Instance.new("UIListLayout")
    SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
    SectionLayout.Padding = UDim.new(0, 5)
    SectionLayout.Parent = SectionContainer
    
    -- Auto-size section based on content
    AddConnection(SectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        Section.Size = UDim2.new(1, 0, 0, SectionLayout.AbsoluteContentSize.Y + 40) -- Title height (30) + padding
    end)
    
    -- Create section object with methods
    local SectionObj = {
        Frame = Section,
        Container = SectionContainer,
        Elements = {}
    }
    
    -- Method to add a button
    function SectionObj:AddButton(text, callback)
        local Button = Instance.new("TextButton")
        Button.Name = text .. "Button"
        Button.Size = UDim2.new(1, 0, 0, 30)
        Button.BackgroundColor3 = Colors.Button
        Button.BorderSizePixel = 0
        Button.Font = Enum.Font.GothamBold
        Button.TextSize = 14
        Button.TextColor3 = Colors.Text
        Button.Text = text
        Button.LayoutOrder = #self.Elements
        Button.Parent = self.Container
        
        -- Add corner
        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 5)
        ButtonCorner.Parent = Button
        
        -- Add click functionality
        if callback then
            AddConnection(Button.MouseButton1Click, function()
                callback()
            end)
        end
        
        -- Create button object
        local ButtonObj = {
            Button = Button,
            
            -- Set text
            SetText = function(self, newText)
                Button.Text = newText
            end
        }
        
        table.insert(self.Elements, ButtonObj)
        return ButtonObj
    end
    
    -- Method to add a toggle
    function SectionObj:AddToggle(text, default, callback)
        default = default or false
        
        -- Create toggle container
        local ToggleContainer = Instance.new("Frame")
        ToggleContainer.Name = text .. "Toggle"
        ToggleContainer.Size = UDim2.new(1, 0, 0, 30)
        ToggleContainer.BackgroundTransparency = 1
        ToggleContainer.LayoutOrder = #self.Elements
        ToggleContainer.Parent = self.Container
        
        -- Create toggle label
        local Label = Instance.new("TextLabel")
        Label.Name = "Label"
        Label.Size = UDim2.new(1, -56, 1, 0)
        Label.BackgroundTransparency = 1
        Label.Font = Enum.Font.Gotham
        Label.TextSize = 14
        Label.TextColor3 = Colors.Text
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Text = text
        Label.Parent = ToggleContainer
        
        -- Create toggle indicator background
        local ToggleBack = Instance.new("Frame")
        ToggleBack.Name = "Background"
        ToggleBack.Size = UDim2.new(0, 46, 0, 20)
        ToggleBack.Position = UDim2.new(1, -50, 0.5, -10)
        ToggleBack.BackgroundColor3 = default and Colors.Success or Colors.Danger
        ToggleBack.BorderSizePixel = 0
        ToggleBack.Parent = ToggleContainer
        
        -- Add corner to background
        local ToggleCorner = Instance.new("UICorner")
        ToggleCorner.CornerRadius = UDim.new(0, 10)
        ToggleCorner.Parent = ToggleBack
        
        -- Create toggle indicator
        local Indicator = Instance.new("Frame")
        Indicator.Name = "Indicator"
        Indicator.Size = UDim2.new(0, 16, 0, 16)
        Indicator.Position = UDim2.new(default and 0.65 or 0.1, 0, 0.5, -8)
        Indicator.BackgroundColor3 = Colors.Text
        Indicator.BorderSizePixel = 0
        Indicator.Parent = ToggleBack
        
        -- Add corner to indicator
        local IndicatorCorner = Instance.new("UICorner")
        IndicatorCorner.CornerRadius = UDim.new(0, 8)
        IndicatorCorner.Parent = Indicator
        
        -- Create click area
        local ClickArea = Instance.new("TextButton")
        ClickArea.Name = "ClickArea"
        ClickArea.Size = UDim2.new(1, 0, 1, 0)
        ClickArea.BackgroundTransparency = 1
        ClickArea.Text = ""
        ClickArea.Parent = ToggleContainer
        
        -- Create toggle object
        local ToggleObj = {
            Value = default,
            Container = ToggleContainer,
            Label = Label,
            
            -- Toggle function
            Toggle = function(self, state)
                if state ~= nil then
                    self.Value = state
                else
                    self.Value = not self.Value
                end
                
                -- Update visual
                TweenService:Create(ToggleBack, TweenInfo.new(0.2), {
                    BackgroundColor3 = self.Value and Colors.Success or Colors.Danger
                }):Play()
                
                TweenService:Create(Indicator, TweenInfo.new(0.2), {
                    Position = UDim2.new(self.Value and 0.65 or 0.1, 0, 0.5, -8)
                }):Play()
                
                -- Call callback
                if callback then
                    callback(self.Value)
                end
            end,
            
            -- Set text function
            SetText = function(self, newText)
                Label.Text = newText
            end
        }
        
        -- Add click functionality
        AddConnection(ClickArea.MouseButton1Click, function()
            ToggleObj:Toggle()
        end)
        
        table.insert(self.Elements, ToggleObj)
        return ToggleObj
    end
    
    -- Method to add a slider
    function SectionObj:AddSlider(text, min, max, default, callback)
        min = min or 0
        max = max or 100
        default = default or min
        
        -- Clamp default value
        default = math.clamp(default, min, max)
        
        -- Create slider frame
        local SliderContainer = Instance.new("Frame")
        SliderContainer.Name = text .. "Slider"
        SliderContainer.Size = UDim2.new(1, 0, 0, 45)
        SliderContainer.BackgroundTransparency = 1
        SliderContainer.LayoutOrder = #self.Elements
        SliderContainer.Parent = self.Container
        
        -- Create slider title
        local Title = Instance.new("TextLabel")
        Title.Name = "Title"
        Title.Size = UDim2.new(1, 0, 0, 20)
        Title.BackgroundTransparency = 1
        Title.Font = Enum.Font.Gotham
        Title.TextSize = 14
        Title.TextColor3 = Colors.Text
        Title.TextXAlignment = Enum.TextXAlignment.Left
        Title.Text = text
        Title.Parent = SliderContainer
        
        -- Create slider value display
        local ValueDisplay = Instance.new("TextLabel")
        ValueDisplay.Name = "Value"
        ValueDisplay.Size = UDim2.new(0, 50, 0, 20)
        ValueDisplay.Position = UDim2.new(1, -50, 0, 0)
        ValueDisplay.BackgroundTransparency = 1
        ValueDisplay.Font = Enum.Font.GothamBold
        ValueDisplay.TextSize = 14
        ValueDisplay.TextColor3 = Colors.Text
        ValueDisplay.Text = tostring(default)
        ValueDisplay.Parent = SliderContainer
        
        -- Create slider background
        local SliderBack = Instance.new("Frame")
        SliderBack.Name = "Background"
        SliderBack.Size = UDim2.new(1, 0, 0, 10)
        SliderBack.Position = UDim2.new(0, 0, 0, 30)
        SliderBack.BackgroundColor3 = Colors.Container
        SliderBack.BorderSizePixel = 0
        SliderBack.Parent = SliderContainer
        
        -- Add corner to background
        local SliderCorner = Instance.new("UICorner")
        SliderCorner.CornerRadius = UDim.new(0, 5)
        SliderCorner.Parent = SliderBack
        
        -- Create slider fill
        local SliderFill = Instance.new("Frame")
        SliderFill.Name = "Fill"
        SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        SliderFill.BackgroundColor3 = Colors.Button
        SliderFill.BorderSizePixel = 0
        SliderFill.Parent = SliderBack
        
        -- Add corner to fill
        local FillCorner = Instance.new("UICorner")
        FillCorner.CornerRadius = UDim.new(0, 5)
        FillCorner.Parent = SliderFill
        
        -- Create slider knob
        local Knob = Instance.new("Frame")
        Knob.Name = "Knob"
        Knob.Size = UDim2.new(0, 16, 0, 16)
        Knob.Position = UDim2.new((default - min) / (max - min), -8, 0.5, -8)
        Knob.BackgroundColor3 = Colors.Text
        Knob.BorderSizePixel = 0
        Knob.ZIndex = 2
        Knob.Parent = SliderBack
        
        -- Add corner to knob
        local KnobCorner = Instance.new("UICorner")
        KnobCorner.CornerRadius = UDim.new(0, 8) -- Circular knob
        KnobCorner.Parent = Knob
        
        -- Create click area
        local SliderButton = Instance.new("TextButton")
        SliderButton.Name = "SliderButton"
        SliderButton.Size = UDim2.new(1, 0, 1, 0)
        SliderButton.BackgroundTransparency = 1
        SliderButton.Text = ""
        SliderButton.Parent = SliderBack
        
        -- Create slider object
        local SliderObj = {
            Value = default,
            Min = min,
            Max = max,
            
            -- Set value function
            SetValue = function(self, value)
                -- Clamp value
                value = math.clamp(value, self.Min, self.Max)
                self.Value = value
                
                -- Update visuals
                local percent = (value - self.Min) / (self.Max - self.Min)
                SliderFill.Size = UDim2.new(percent, 0, 1, 0)
                Knob.Position = UDim2.new(percent, -8, 0.5, -8)
                ValueDisplay.Text = tostring(math.floor(value))
                
                -- Call callback
                if callback then
                    callback(value)
                end
            end,
            
            -- Set text function
            SetText = function(self, newText)
                Title.Text = newText
            end
        }
        
        -- Initialize slider interaction
        local sliding = false
        
        AddConnection(SliderButton.InputBegan, function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                sliding = true
                
                -- Calculate slider position from input
                local percent = math.clamp((input.Position.X - SliderBack.AbsolutePosition.X) / SliderBack.AbsoluteSize.X, 0, 1)
                local value = min + (max - min) * percent
                
                SliderObj:SetValue(value)
            end
        end)
        
        AddConnection(UserInputService.InputChanged, function(input)
            if sliding and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                -- Calculate slider position from input
                local inset = game:GetService("GuiService"):GetGuiInset()
                local pos = input.Position.X - inset.X
                local percent = math.clamp((pos - SliderBack.AbsolutePosition.X) / SliderBack.AbsoluteSize.X, 0, 1)
                local value = min + (max - min) * percent
                
                SliderObj:SetValue(value)
            end
        end)
        
        AddConnection(UserInputService.InputEnded, function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                sliding = false
            end
        end)
        
        table.insert(self.Elements, SliderObj)
        return SliderObj
    end
    
    -- Method to add a label
    function SectionObj:AddLabel(text)
        local Label = Instance.new("TextLabel")
        Label.Name = "Label"
        Label.Size = UDim2.new(1, 0, 0, 20)
        Label.BackgroundTransparency = 1
        Label.Font = Enum.Font.Gotham
        Label.TextSize = 14
        Label.TextColor3 = Colors.Text
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Text = text
        Label.LayoutOrder = #self.Elements
        Label.Parent = self.Container
        
        -- Create label object
        local LabelObj = {
            Label = Label,
            
            -- Set text function
            SetText = function(self, newText)
                Label.Text = newText
            end
        }
        
        table.insert(self.Elements, LabelObj)
        return LabelObj
    end
    
    -- Add to tab sections
    table.insert(tab.Sections, SectionObj)
    return SectionObj
end

-- Function to close the UI
local function CloseUI()
    -- Clean up connections
    for _, connection in pairs(Connections) do
        connection:Disconnect()
    end
    
    -- Destroy UI
    SkyXUI:Destroy()
    
    print("SkyX Blox Fruits closed properly")
end

-- Add close button functionality
AddConnection(CloseButton.MouseButton1Click, CloseUI)

-- Create keybind to toggle UI
local ToggleUI = function()
    SkyXUI.Enabled = not SkyXUI.Enabled
end

-- Add keybind (RightControl)
AddConnection(UserInputService.InputBegan, function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.RightControl then
        ToggleUI()
    end
end)

-- Create mobile toggle button for mobile devices
if IsMobile then
    local MobileToggleGui = Instance.new("ScreenGui")
    MobileToggleGui.Name = "SkyXMobileToggle"
    MobileToggleGui.ResetOnSpawn = false
    MobileToggleGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Handle executor security models
    if syn then
        syn.protect_gui(MobileToggleGui)
        MobileToggleGui.Parent = game.CoreGui
    else
        MobileToggleGui.Parent = gethui and gethui() or game.CoreGui
    end
    
    -- Create toggle button
    local MobileToggle = Instance.new("ImageButton")
    MobileToggle.Name = "ToggleButton"
    MobileToggle.Size = UDim2.new(0, 50, 0, 50)
    MobileToggle.Position = UDim2.new(0, 20, 0.5, -25)
    MobileToggle.BackgroundColor3 = Colors.Button
    MobileToggle.BorderSizePixel = 0
    MobileToggle.Image = "rbxassetid://7059346373" -- Menu icon
    MobileToggle.ImageColor3 = Colors.Text
    MobileToggle.ZIndex = 10
    MobileToggle.Parent = MobileToggleGui
    
    -- Add corner
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(1, 0) -- Circle
    ToggleCorner.Parent = MobileToggle
    
    -- Add shadow
    local ToggleShadow = Instance.new("ImageLabel")
    ToggleShadow.Name = "Shadow"
    ToggleShadow.AnchorPoint = Vector2.new(0.5, 0.5)
    ToggleShadow.Size = UDim2.new(1, 10, 1, 10)
    ToggleShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    ToggleShadow.BackgroundTransparency = 1
    ToggleShadow.Image = "rbxassetid://6015897843" -- Shadow image
    ToggleShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    ToggleShadow.ImageTransparency = 0.6
    ToggleShadow.ZIndex = 9
    ToggleShadow.Parent = MobileToggle
    
    -- Add click functionality
    AddConnection(MobileToggle.MouseButton1Click, ToggleUI)
    
    -- Make mobile toggle draggable
    local draggingToggle = false
    local dragInputToggle
    local dragStartToggle
    local startPosToggle
    
    AddConnection(MobileToggle.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingToggle = true
            dragStartToggle = input.Position
            startPosToggle = MobileToggle.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    draggingToggle = false
                end
            end)
        end
    end)
    
    AddConnection(MobileToggle.InputChanged, function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInputToggle = input
        end
    end)
    
    AddConnection(UserInputService.InputChanged, function(input)
        if input == dragInputToggle and draggingToggle then
            local delta = input.Position - dragStartToggle
            MobileToggle.Position = UDim2.new(startPosToggle.X.Scale, startPosToggle.X.Offset + delta.X, startPosToggle.Y.Scale, startPosToggle.Y.Offset + delta.Y)
        end
    end)
end

-- Create modules table
local Modules = {}

-- MODULES SECTION - Following the MM2 pattern of creating fallbacks for modules

-- Function to create a fallback module
local function CreateFallbackModule(name)
    print("Creating fallback module for: " .. name)
    return {
        Settings = {},
        Start = function() print("Starting fallback " .. name .. " module") end,
        Stop = function() print("Stopping fallback " .. name .. " module") end,
        GetStatus = function() return {Enabled = false, Message = "Module not available"} end
    }
end

-- Auto Farm Module
local function LoadAutoFarmModule()
    local success, result = pcall(function()
        local module = {
            Settings = {
                Enabled = false,
                TargetMobs = {"Bandit", "Monkey", "Gorilla"},
                AutoCollectDrops = true,
                AutoEquipWeapon = true,
                SelectedWeapon = "Combat"
            },
            
            Start = function(self)
                if self.Settings.Enabled then
                    print("Auto Farm started with target: " .. table.concat(self.Settings.TargetMobs, ", "))
                    
                    -- Actual implementation would go here in a real script
                    -- This is just a placeholder for the demo
                end
            end,
            
            Stop = function(self)
                print("Auto Farm stopped")
            end,
            
            GetStatus = function(self)
                return {
                    Enabled = self.Settings.Enabled,
                    CurrentTarget = self.Settings.TargetMobs[1],
                    TotalKills = 0,
                    TimeElapsed = 0
                }
            end,
            
            GetMobList = function()
                -- Return a list of available mobs in the current area
                return {"Bandit", "Monkey", "Gorilla", "Pirate", "Clown Pirate", "Marine"}
            end
        }
        
        return module
    end)
    
    if success then
        return result
    else
        warn("Failed to load Auto Farm module: " .. tostring(result))
        return CreateFallbackModule("Auto Farm")
    end
end

-- Teleport Module
local function LoadTeleportModule()
    local success, result = pcall(function()
        local module = {
            Settings = {
                SafeMode = true,
                AntiDetection = {
                    Enabled = true,
                    Delay = 1
                }
            },
            
            TeleportToLocation = function(self, locationName)
                print("Teleporting to: " .. locationName)
                
                -- Actual implementation would go here in a real script
                -- This is just a placeholder for the demo
                
                return true, "Teleported successfully"
            end,
            
            GetLocationsList = function()
                -- Return a list of available locations in the game
                return {
                    {Name = "Starter Island", Icon = "🏝️"},
                    {Name = "Middle Town", Icon = "🏙️"},
                    {Name = "Jungle", Icon = "🌴"},
                    {Name = "Pirate Village", Icon = "⚓"},
                    {Name = "Desert", Icon = "🏜️"},
                    {Name = "Frozen Village", Icon = "❄️"},
                    {Name = "Marine Ford", Icon = "🚢"},
                    {Name = "Colosseum", Icon = "🏛️"},
                    {Name = "Prison", Icon = "🔒"},
                    {Name = "Magma Village", Icon = "🌋"}
                }
            end
        }
        
        return module
    end)
    
    if success then
        return result
    else
        warn("Failed to load Teleport module: " .. tostring(result))
        return CreateFallbackModule("Teleport")
    end
end

-- ESP Module
local function LoadESPModule()
    local success, result = pcall(function()
        local module = {
            Settings = {
                Enabled = false,
                ShowPlayers = true,
                ShowNPCs = true,
                ShowChests = true,
                ShowDistance = true,
                ShowHealth = true,
                ShowBounty = false,
                RainbowESP = false,
                RainbowSpeed = 5,
                PlayerColor = Color3.fromRGB(255, 0, 0),
                NPCColor = Color3.fromRGB(0, 255, 0),
                ChestColor = Color3.fromRGB(255, 255, 0)
            },
            
            Start = function(self)
                if self.Settings.Enabled then
                    print("ESP started with settings: ShowPlayers=" .. tostring(self.Settings.ShowPlayers) .. 
                          ", ShowNPCs=" .. tostring(self.Settings.ShowNPCs) .. 
                          ", ShowChests=" .. tostring(self.Settings.ShowChests))
                end
            end,
            
            Stop = function(self)
                print("ESP stopped")
            end
        }
        
        return module
    end)
    
    if success then
        return result
    else
        warn("Failed to load ESP module: " .. tostring(result))
        return CreateFallbackModule("ESP")
    end
end

-- Devil Fruit Module
local function LoadDevilFruitModule()
    local success, result = pcall(function()
        local module = {
            Settings = {
                AutoBuy = false,
                AutoBuyRarity = "Rare",
                NotifyOnSpawn = true,
                AutoPickup = true,
                StoreFruits = false
            },
            
            Start = function(self)
                print("Devil Fruit module started")
            end,
            
            Stop = function(self)
                print("Devil Fruit module stopped")
            end,
            
            GetAvailableFruits = function()
                -- Return a list of available Devil Fruits in the game
                return {
                    {Name = "Bomb Fruit", Rarity = "Common", Price = 100000},
                    {Name = "Spike Fruit", Rarity = "Common", Price = 180000},
                    {Name = "Chop Fruit", Rarity = "Common", Price = 220000},
                    {Name = "Spring Fruit", Rarity = "Common", Price = 250000},
                    {Name = "Smoke Fruit", Rarity = "Uncommon", Price = 500000},
                    {Name = "Flame Fruit", Rarity = "Rare", Price = 800000},
                    {Name = "Ice Fruit", Rarity = "Rare", Price = 1000000},
                    {Name = "Sand Fruit", Rarity = "Rare", Price = 1200000},
                    {Name = "Dark Fruit", Rarity = "Very Rare", Price = 1500000},
                    {Name = "Light Fruit", Rarity = "Very Rare", Price = 1800000},
                    {Name = "Quake Fruit", Rarity = "Legendary", Price = 2400000}
                }
            end
        }
        
        return module
    end)
    
    if success then
        return result
    else
        warn("Failed to load Devil Fruit module: " .. tostring(result))
        return CreateFallbackModule("Devil Fruit")
    end
end

-- Combat Module
local function LoadCombatModule()
    local success, result = pcall(function()
        local module = {
            Settings = {
                AutoAttack = false,
                AutoBlock = false,
                AutoDodge = false,
                AutoSkills = true,
                SkillOrdering = {"Z", "X", "C", "V", "F"},
                AttackPlayers = false,
                TargetSelection = "Closest",
                KillAura = false,
                KillAuraRange = 15
            },
            
            Start = function(self)
                print("Combat module started with AutoSkills=" .. tostring(self.Settings.AutoSkills))
            end,
            
            Stop = function(self)
                print("Combat module stopped")
            end,
            
            GetWeaponsList = function()
                -- Return a list of player's weapons
                return {"Combat", "Katana", "Flintlock", "Musket", "Bisento"}
            end
        }
        
        return module
    end)
    
    if success then
        return result
    else
        warn("Failed to load Combat module: " .. tostring(result))
        return CreateFallbackModule("Combat")
    end
end

-- Anti-Ban Module
local function LoadAntiBanModule()
    local success, result = pcall(function()
        local module = {
            Settings = {
                Enabled = true,
                Flags = {
                    ExploitDetectionRemoval = true,
                    ReduceAutoPunishRisk = true,
                    DisableHighRiskFeatures = false,
                    RandomizeActions = true
                }
            },
            
            Start = function(self)
                print("Anti-Ban system started")
            end,
            
            Stop = function(self)
                print("Anti-Ban system stopped")
            end,
            
            GetStatus = function()
                return {
                    DetectionsEvaded = 0,
                    AntiCheatVersion = "Unknown",
                    SafetyLevel = "Moderate"
                }
            end
        }
        
        return module
    end)
    
    if success then
        return result
    else
        warn("Failed to load Anti-Ban module: " .. tostring(result))
        return CreateFallbackModule("AntiBan")
    end
end

-- Stats Module
local function LoadStatsModule()
    local success, result = pcall(function()
        local module = {
            Settings = {
                AutoStatPoints = false,
                StatPriority = "Melee", -- Melee, Defense, Sword, Gun, Fruit
                MinimumStatsGoal = {
                    Melee = 1000,
                    Defense = 1000,
                    Sword = 1000,
                    Gun = 1000,
                    DevilFruit = 1000
                }
            },
            
            Start = function(self)
                print("Stats module started with priority: " .. self.Settings.StatPriority)
            end,
            
            Stop = function(self)
                print("Stats module stopped")
            end,
            
            GetPlayerStats = function()
                -- Get current player stats
                return {
                    Level = 50,
                    Beli = 150000,
                    Fragments = 500,
                    Stats = {
                        Melee = 100,
                        Defense = 100,
                        Sword = 50,
                        Gun = 25,
                        DevilFruit = 0
                    },
                    UnassignedPoints = 10
                }
            end
        }
        
        return module
    end)
    
    if success then
        return result
    else
        warn("Failed to load Stats module: " .. tostring(result))
        return CreateFallbackModule("Stats")
    end
end

-- Load all modules function
local function LoadAllModules()
    Modules.AutoFarm = LoadAutoFarmModule()
    Modules.Teleport = LoadTeleportModule()
    Modules.ESP = LoadESPModule()
    Modules.DevilFruit = LoadDevilFruitModule()
    Modules.Combat = LoadCombatModule()
    Modules.AntiBan = LoadAntiBanModule()
    Modules.Stats = LoadStatsModule()
    
    -- Return true if at least some modules loaded successfully
    return true
end

-- CREATE TABS FIRST - just like MM2 does
local MainTab = CreateTab("Main")
local AutoFarmTab = CreateTab("Auto Farm")
local TeleportTab = CreateTab("Teleport")
local ESPTab = CreateTab("ESP")
local DevilFruitTab = CreateTab("Devil Fruit")
local CombatTab = CreateTab("Combat")
local MiscTab = CreateTab("Misc")

-- Create main tab content
local InfoSection = CreateSection(MainTab, "Information")
InfoSection:AddLabel("Device: " .. DeviceText)
InfoSection:AddLabel("Game: Blox Fruits")
local StatusLabel = InfoSection:AddLabel("Loading modules...")

-- Load modules
local success = LoadAllModules()

-- Create UI controls for modules
if success then
    StatusLabel:SetText("Modules loaded successfully!")
    
    -- Auto Farm Tab Content
    if Modules.AutoFarm then
        local FarmSection = CreateSection(AutoFarmTab, "Auto Farm Features")
        
        FarmSection:AddToggle("Auto Farm Enabled", false, function(value)
            Modules.AutoFarm.Settings.Enabled = value
            if value then
                Modules.AutoFarm:Start()
            else
                Modules.AutoFarm:Stop()
            end
        end)
        
        FarmSection:AddToggle("Auto Collect Drops", true, function(value)
            Modules.AutoFarm.Settings.AutoCollectDrops = value
        end)
        
        FarmSection:AddToggle("Auto Equip Weapon", true, function(value)
            Modules.AutoFarm.Settings.AutoEquipWeapon = value
        end)
        
        local TargetSection = CreateSection(AutoFarmTab, "Target Settings")
        
        -- In a real script, this would be populated with the actual list of mobs
        local mobList = {"Bandit", "Monkey", "Gorilla", "Pirate", "Clown Pirate", "Marine"}
        
        for _, mob in ipairs(mobList) do
            TargetSection:AddButton("Farm " .. mob, function()
                Modules.AutoFarm.Settings.TargetMobs = {mob}
                Modules.AutoFarm.Settings.Enabled = true
                Modules.AutoFarm:Start()
                StatusLabel:SetText("Now farming: " .. mob)
            end)
        end
    else
        local FarmSection = CreateSection(AutoFarmTab, "Auto Farm Features")
        FarmSection:AddLabel("Auto Farm Module failed to load")
    end
    
    -- Teleport Tab Content
    if Modules.Teleport then
        local TeleportSection = CreateSection(TeleportTab, "Teleport Features")
        
        TeleportSection:AddToggle("Safe Mode", true, function(value)
            Modules.Teleport.Settings.SafeMode = value
        end)
        
        TeleportSection:AddToggle("Anti-Detection", true, function(value)
            Modules.Teleport.Settings.AntiDetection.Enabled = value
        end)
        
        -- Get list of locations
        local locations = Modules.Teleport.GetLocationsList()
        for _, location in ipairs(locations) do
            TeleportSection:AddButton(location.Icon .. " " .. location.Name, function()
                local success, message = Modules.Teleport:TeleportToLocation(location.Name)
                if success then
                    StatusLabel:SetText("Teleported to " .. location.Name)
                else
                    StatusLabel:SetText("Failed to teleport: " .. message)
                end
            end)
        end
    else
        local TeleportSection = CreateSection(TeleportTab, "Teleport Features")
        TeleportSection:AddLabel("Teleport Module failed to load")
    end
    
    -- ESP Tab Content
    if Modules.ESP then
        local ESPSection = CreateSection(ESPTab, "ESP Features")
        
        ESPSection:AddToggle("ESP Enabled", false, function(value)
            Modules.ESP.Settings.Enabled = value
            if value then
                Modules.ESP:Start()
            else
                Modules.ESP:Stop()
            end
        end)
        
        ESPSection:AddToggle("Show Players", true, function(value)
            Modules.ESP.Settings.ShowPlayers = value
        end)
        
        ESPSection:AddToggle("Show NPCs", true, function(value)
            Modules.ESP.Settings.ShowNPCs = value
        end)
        
        ESPSection:AddToggle("Show Chests", true, function(value)
            Modules.ESP.Settings.ShowChests = value
        end)
        
        ESPSection:AddToggle("Show Distance", true, function(value)
            Modules.ESP.Settings.ShowDistance = value
        end)
        
        ESPSection:AddToggle("Show Health", true, function(value)
            Modules.ESP.Settings.ShowHealth = value
        end)
        
        ESPSection:AddToggle("Rainbow ESP", false, function(value)
            Modules.ESP.Settings.RainbowESP = value
        end)
        
        ESPSection:AddSlider("Rainbow Speed", 1, 10, 5, function(value)
            Modules.ESP.Settings.RainbowSpeed = value
        end)
    else
        local ESPSection = CreateSection(ESPTab, "ESP Features")
        ESPSection:AddLabel("ESP Module failed to load")
    end
    
    -- Devil Fruit Tab Content
    if Modules.DevilFruit then
        local FruitSection = CreateSection(DevilFruitTab, "Devil Fruit Features")
        
        FruitSection:AddToggle("Auto Buy Fruits", false, function(value)
            Modules.DevilFruit.Settings.AutoBuy = value
        end)
        
        FruitSection:AddToggle("Notify On Fruit Spawn", true, function(value)
            Modules.DevilFruit.Settings.NotifyOnSpawn = value
        end)
        
        FruitSection:AddToggle("Auto Pickup Fruits", true, function(value)
            Modules.DevilFruit.Settings.AutoPickup = value
        end)
        
        FruitSection:AddToggle("Store Fruits", false, function(value)
            Modules.DevilFruit.Settings.StoreFruits = value
        end)
        
        local FruitListSection = CreateSection(DevilFruitTab, "Available Fruits")
        
        -- Get list of fruits
        local fruits = Modules.DevilFruit.GetAvailableFruits()
        for _, fruit in ipairs(fruits) do
            FruitListSection:AddButton(fruit.Name .. " (" .. fruit.Rarity .. ")", function()
                StatusLabel:SetText("Attempting to buy " .. fruit.Name)
                -- In a real script, this would actually attempt to buy the fruit
                -- This is just a placeholder for the demo
            end)
        end
    else
        local FruitSection = CreateSection(DevilFruitTab, "Devil Fruit Features")
        FruitSection:AddLabel("Devil Fruit Module failed to load")
    end
    
    -- Combat Tab Content
    if Modules.Combat then
        local CombatSection = CreateSection(CombatTab, "Combat Features")
        
        CombatSection:AddToggle("Auto Attack", false, function(value)
            Modules.Combat.Settings.AutoAttack = value
        end)
        
        CombatSection:AddToggle("Auto Block", false, function(value)
            Modules.Combat.Settings.AutoBlock = value
        end)
        
        CombatSection:AddToggle("Auto Skills", true, function(value)
            Modules.Combat.Settings.AutoSkills = value
        end)
        
        CombatSection:AddToggle("Attack Players", false, function(value)
            Modules.Combat.Settings.AttackPlayers = value
        end)
        
        CombatSection:AddToggle("Kill Aura", false, function(value)
            Modules.Combat.Settings.KillAura = value
        end)
        
        CombatSection:AddSlider("Kill Aura Range", 5, 30, 15, function(value)
            Modules.Combat.Settings.KillAuraRange = value
        end)
        
        local WeaponSection = CreateSection(CombatTab, "Weapon Selection")
        
        -- Get list of weapons
        local weapons = Modules.Combat.GetWeaponsList()
        for _, weapon in ipairs(weapons) do
            WeaponSection:AddButton("Equip " .. weapon, function()
                StatusLabel:SetText("Equipped " .. weapon)
                -- In a real script, this would actually equip the weapon
                -- This is just a placeholder for the demo
            end)
        end
    else
        local CombatSection = CreateSection(CombatTab, "Combat Features")
        CombatSection:AddLabel("Combat Module failed to load")
    end
    
    -- Misc Tab Content
    -- Anti-Ban Section
    if Modules.AntiBan then
        local AntiBanSection = CreateSection(MiscTab, "Anti-Ban System")
        
        AntiBanSection:AddToggle("Anti-Ban System", true, function(value)
            Modules.AntiBan.Settings.Enabled = value
            if value then
                Modules.AntiBan:Start()
            else
                Modules.AntiBan:Stop()
            end
        end)
        
        AntiBanSection:AddToggle("Remove Exploit Detection", true, function(value)
            Modules.AntiBan.Settings.Flags.ExploitDetectionRemoval = value
        end)
        
        AntiBanSection:AddToggle("Reduce Auto-Punish Risk", true, function(value)
            Modules.AntiBan.Settings.Flags.ReduceAutoPunishRisk = value
        end)
        
        AntiBanSection:AddToggle("Randomize Actions", true, function(value)
            Modules.AntiBan.Settings.Flags.RandomizeActions = value
        end)
        
        AntiBanSection:AddToggle("Disable High-Risk Features", false, function(value)
            Modules.AntiBan.Settings.Flags.DisableHighRiskFeatures = value
        end)
        
        local AntiBanStats = AntiBanSection:AddLabel("Detections Evaded: 0")
        
        -- Update anti-ban stats periodically
        spawn(function()
            while wait(2) do
                if Modules.AntiBan then
                    local status = Modules.AntiBan.GetStatus()
                    AntiBanStats:SetText("Detections Evaded: " .. status.DetectionsEvaded)
                end
            end
        end)
    else
        local AntiBanSection = CreateSection(MiscTab, "Anti-Ban System")
        AntiBanSection:AddLabel("Anti-Ban Module failed to load")
    end
    
    -- Stats Section
    if Modules.Stats then
        local StatsSection = CreateSection(MiscTab, "Auto Stats")
        
        StatsSection:AddToggle("Auto Assign Stat Points", false, function(value)
            Modules.Stats.Settings.AutoStatPoints = value
        end)
        
        local priorities = {"Melee", "Defense", "Sword", "Gun", "DevilFruit"}
        for _, priority in ipairs(priorities) do
            StatsSection:AddButton("Priority: " .. priority, function()
                Modules.Stats.Settings.StatPriority = priority
                StatusLabel:SetText("Stat priority set to: " .. priority)
            end)
        end
        
        local PlayerStatsSection = CreateSection(MiscTab, "Player Stats")
        
        -- Get player stats
        local stats = Modules.Stats.GetPlayerStats()
        
        PlayerStatsSection:AddLabel("Level: " .. stats.Level)
        PlayerStatsSection:AddLabel("Beli: " .. stats.Beli)
        PlayerStatsSection:AddLabel("Fragments: " .. stats.Fragments)
        PlayerStatsSection:AddLabel("Unassigned Points: " .. stats.UnassignedPoints)
        
        -- Update stats periodically
        spawn(function()
            while wait(5) do
                if Modules.Stats then
                    local updatedStats = Modules.Stats.GetPlayerStats()
                    PlayerStatsSection:AddLabel("Level: " .. updatedStats.Level)
                    PlayerStatsSection:AddLabel("Beli: " .. updatedStats.Beli)
                    PlayerStatsSection:AddLabel("Fragments: " .. updatedStats.Fragments)
                    PlayerStatsSection:AddLabel("Unassigned Points: " .. updatedStats.UnassignedPoints)
                end
            end
        end)
    else
        local StatsSection = CreateSection(MiscTab, "Auto Stats")
        StatsSection:AddLabel("Stats Module failed to load")
    end
else
    StatusLabel:SetText("Failed to load modules")
end

-- Create mobile indicator indicators
-- These are small indicators that blink to show if modules are active
if IsMobile then
    -- Create indicators container
    local IndicatorsContainer = Instance.new("Frame")
    IndicatorsContainer.Name = "ModuleIndicators"
    IndicatorsContainer.Size = UDim2.new(0, 200, 0, 40)
    IndicatorsContainer.Position = UDim2.new(0.5, -100, 0, 10)
    IndicatorsContainer.BackgroundTransparency = 1
    IndicatorsContainer.Parent = SkyXUI
    
    -- Create indicator layout
    local IndicatorLayout = Instance.new("UIListLayout")
    IndicatorLayout.FillDirection = Enum.FillDirection.Horizontal
    IndicatorLayout.SortOrder = Enum.SortOrder.LayoutOrder
    IndicatorLayout.Padding = UDim.new(0, 10)
    IndicatorLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    IndicatorLayout.Parent = IndicatorsContainer
    
    -- Function to create indicator
    local function CreateIndicator(name, color)
        local Indicator = Instance.new("Frame")
        Indicator.Name = name .. "Indicator"
        Indicator.Size = UDim2.new(0, 20, 0, 20)
        Indicator.BackgroundColor3 = color
        Indicator.BackgroundTransparency = 0.5
        Indicator.BorderSizePixel = 0
        Indicator.Parent = IndicatorsContainer
        
        -- Add corner
        local IndicatorCorner = Instance.new("UICorner")
        IndicatorCorner.CornerRadius = UDim.new(1, 0) -- Circle
        IndicatorCorner.Parent = Indicator
        
        return Indicator
    end
    
    -- Create indicators for modules
    local ESPIndicator = CreateIndicator("ESP", Colors.Danger)
    local AutoFarmIndicator = CreateIndicator("AutoFarm", Colors.Danger)
    local DevilFruitIndicator = CreateIndicator("DevilFruit", Colors.Danger)
    local CombatIndicator = CreateIndicator("Combat", Colors.Danger)
    local AntiBanIndicator = CreateIndicator("AntiBan", Colors.Success) -- Anti-ban starts enabled
    
    -- Blink indicators function
    spawn(function()
        while wait(1) do
            -- Update indicator colors based on module status
            if Modules.ESP and Modules.ESP.Settings.Enabled then
                TweenService:Create(ESPIndicator, TweenInfo.new(0.5), {BackgroundColor3 = Colors.Success}):Play()
            else
                TweenService:Create(ESPIndicator, TweenInfo.new(0.5), {BackgroundColor3 = Colors.Danger}):Play()
            end
            
            if Modules.AutoFarm and Modules.AutoFarm.Settings.Enabled then
                TweenService:Create(AutoFarmIndicator, TweenInfo.new(0.5), {BackgroundColor3 = Colors.Success}):Play()
            else
                TweenService:Create(AutoFarmIndicator, TweenInfo.new(0.5), {BackgroundColor3 = Colors.Danger}):Play()
            end
            
            if Modules.DevilFruit and Modules.DevilFruit.Settings.AutoBuy then
                TweenService:Create(DevilFruitIndicator, TweenInfo.new(0.5), {BackgroundColor3 = Colors.Success}):Play()
            else
                TweenService:Create(DevilFruitIndicator, TweenInfo.new(0.5), {BackgroundColor3 = Colors.Danger}):Play()
            end
            
            if Modules.Combat and Modules.Combat.Settings.AutoAttack then
                TweenService:Create(CombatIndicator, TweenInfo.new(0.5), {BackgroundColor3 = Colors.Success}):Play()
            else
                TweenService:Create(CombatIndicator, TweenInfo.new(0.5), {BackgroundColor3 = Colors.Danger}):Play()
            end
            
            if Modules.AntiBan and Modules.AntiBan.Settings.Enabled then
                TweenService:Create(AntiBanIndicator, TweenInfo.new(0.5), {BackgroundColor3 = Colors.Success}):Play()
            else
                TweenService:Create(AntiBanIndicator, TweenInfo.new(0.5), {BackgroundColor3 = Colors.Danger}):Play()
            end
        end
    end)
end

-- Add keybind for toggling UI (closing and reopening)
local ToggleKeyCode = Enum.KeyCode.RightControl -- Use Right Control as the toggle key

-- Global variables to track UI state
_G.SkyXUIVisible = true
_G.SkyXUIData = {
    MainPosition = UDim2.new(0.5, -250, 0.5, -175), -- Store position for reopening
    LastTab = nil -- Store last active tab
}

-- Function to toggle UI visibility
local function ToggleUI()
    if _G.SkyXUIVisible then
        -- Save current UI state
        _G.SkyXUIData.MainPosition = MainWindow.Position
        _G.SkyXUIData.LastTab = SelectedTab and SelectedTab.Name or "Main"
        
        -- Hide UI
        SkyXUI.Enabled = false
        _G.SkyXUIVisible = false
        print("SkyX BloxFruits UI hidden - Press Right Control to show")
    else
        -- Show UI
        SkyXUI.Enabled = true
        _G.SkyXUIVisible = true
        
        -- Restore previous position
        MainWindow.Position = _G.SkyXUIData.MainPosition
        
        -- Restore previous tab
        if _G.SkyXUIData.LastTab then
            for _, tab in pairs(Tabs) do
                if tab.Name == _G.SkyXUIData.LastTab then
                    -- Simulate click on this tab
                    tab.Button.BackgroundColor3 = Colors.TabActive
                    tab.Page.Visible = true
                    SelectedTab = tab
                else
                    tab.Button.BackgroundColor3 = Colors.TabInactive
                    tab.Page.Visible = false
                end
            end
        end
        
        print("SkyX BloxFruits UI shown")
    end
end

-- Add keybind for toggling UI
AddConnection(UserInputService.InputBegan, function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == ToggleKeyCode then
        ToggleUI()
    end
end)

-- Notify that script has loaded
local loadedText = "SkyX BloxFruits loaded successfully! Use RightControl to toggle UI"
print(loadedText)

-- Create notification for the user
local function CreateNotification(text, duration)
    duration = duration or 5
    
    -- Create notification container
    local NotificationGui = Instance.new("ScreenGui")
    NotificationGui.Name = "SkyXNotification"
    NotificationGui.ResetOnSpawn = false
    NotificationGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Handle executor security models
    if syn then
        syn.protect_gui(NotificationGui)
        NotificationGui.Parent = game.CoreGui
    else
        NotificationGui.Parent = gethui and gethui() or game.CoreGui
    end
    
    -- Create notification frame
    local NotificationFrame = Instance.new("Frame")
    NotificationFrame.Name = "Notification"
    NotificationFrame.Size = UDim2.new(0, 300, 0, 60)
    NotificationFrame.Position = UDim2.new(0.5, -150, 0.85, 0)
    NotificationFrame.BackgroundColor3 = Colors.Container
    NotificationFrame.BorderSizePixel = 0
    NotificationFrame.Parent = NotificationGui
    
    -- Add corner
    local NotificationCorner = Instance.new("UICorner")
    NotificationCorner.CornerRadius = UDim.new(0, 8)
    NotificationCorner.Parent = NotificationFrame
    
    -- Add notification text
    local NotificationText = Instance.new("TextLabel")
    NotificationText.Name = "Text"
    NotificationText.Size = UDim2.new(1, -20, 1, 0)
    NotificationText.Position = UDim2.new(0, 10, 0, 0)
    NotificationText.BackgroundTransparency = 1
    NotificationText.Font = Enum.Font.Gotham
    NotificationText.TextSize = 14
    NotificationText.TextColor3 = Colors.Text
    NotificationText.TextWrapped = true
    NotificationText.Text = text
    NotificationText.Parent = NotificationFrame
    
    -- Add animation
    NotificationFrame.Position = UDim2.new(0.5, -150, 1.1, 0) -- Start off-screen
    
    -- Slide in
    TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {
        Position = UDim2.new(0.5, -150, 0.85, 0)
    }):Play()
    
    -- Wait, then slide out
    spawn(function()
        wait(duration)
        
        -- Slide out
        local slideOutTween = TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {
            Position = UDim2.new(0.5, -150, 1.1, 0)
        })
        
        slideOutTween:Play()
        
        slideOutTween.Completed:Connect(function()
            NotificationGui:Destroy()
        end)
    end)
end

-- Show loaded notification
CreateNotification(loadedText, 5)

return CloseUI -- Return close function for external scripts to use
