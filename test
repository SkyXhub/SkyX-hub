--[[
üåä SkyX MM2 Advanced Script üåä
Modular version with direct UI from SkyX_MM2_Direct
Enhanced for mobile compatibility with advanced features

Features:
- Enhanced ESP System with Custom Colors and Distance Display
- Advanced Auto Coin/Item Collector with Prioritization
- Smart Role Prediction System
- Speed & Jump Boost Sliders 
- One-Click Teleports with Anti-Detection 
- Advanced Performance Optimization
- Smart Murder Detection and Auto-Kill
- Military-Grade Anti-Ban System
]]

-- This script loads modules from GitHub but keeps the original UI style

-- Core services
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")

-- GitHub Module URLs
local ModuleURLs = {
    ESP = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/esp.lua",
    CoinCollector = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/coin.lua",
    MurderDetection = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/MurderDetection%20.lua",
    Teleport = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/SkyX_Teleport_Module.lua",
    AntiBan = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/Anti-Ban.lua"
}

-- Loaded modules
local Modules = {
    ESP = nil,
    CoinCollector = nil,
    MurderDetection = nil,
    Teleport = nil,
    AntiBan = nil
}

-- Load a module from URL
local function LoadModule(moduleName)
    local url = ModuleURLs[moduleName]
    if not url then
        warn("No URL found for module: " .. moduleName)
        return nil
    end
    
    local success, result = pcall(function()
        return loadstring(game:HttpGet(url))()
    end)
    
    if success then
        print("‚úÖ Successfully loaded: " .. moduleName)
        return result
    else
        warn("‚ùå Failed to load: " .. moduleName .. " | Error: " .. result)
        return nil
    end
end

-- Device detection
local IsMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled
local DeviceText = IsMobile and "Mobile" or "PC"

print("SkyX MM2 - Starting on " .. DeviceText .. " device")

-- Create main UI container
local SkyXUI = Instance.new("ScreenGui")
SkyXUI.Name = "SkyXUI"

-- Handle different executor security models
if syn then
    syn.protect_gui(SkyXUI)
    SkyXUI.Parent = game.CoreGui
else
    SkyXUI.Parent = gethui() or game.CoreGui
end

-- Remove existing UIs with the same name
for _, Interface in pairs(game.CoreGui:GetChildren()) do
    if Interface.Name == SkyXUI.Name and Interface ~= SkyXUI then
        Interface:Destroy()
    end
end

-- Basic UI library
local SkyX = {}
SkyX.Elements = {}
SkyX.Connections = {}

-- Core colors - mobile-friendly theme
local Colors = {
    Background = Color3.fromRGB(22, 35, 55),
    Container = Color3.fromRGB(28, 44, 68),
    Button = Color3.fromRGB(42, 95, 145),
    Text = Color3.fromRGB(255, 255, 255),
    Border = Color3.fromRGB(60, 110, 165),
    TabActive = Color3.fromRGB(42, 95, 145),
    TabInactive = Color3.fromRGB(32, 65, 105)
}

-- Basic icon mapping - direct asset IDs, no external loading
local Icons = {
    close = "rbxassetid://7743875629",
    minimize = "rbxassetid://10664064072"
}

-- Helper functions
local function AddConnection(signal, callback)
    local connection = signal:Connect(callback)
    table.insert(SkyX.Connections, connection)
    return connection
end

local function MakeDraggable(frame)
    local dragging, dragInput, dragStart, startPos
    
    AddConnection(frame.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    AddConnection(frame.InputChanged, function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    AddConnection(UserInputService.InputChanged, function(input)
        if input == dragInput and dragging then
            local Delta = input.Position - dragStart
            -- Smooth dragging
            frame.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + Delta.X, 
                startPos.Y.Scale, 
                startPos.Y.Offset + Delta.Y
            )
        end
    end)
end

-- Create main window
local MainWindow = Instance.new("Frame")
MainWindow.Name = "MainWindow"
MainWindow.Size = UDim2.new(0, 500, 0, 350)
MainWindow.Position = UDim2.new(0.5, -250, 0.5, -175)
MainWindow.BackgroundColor3 = Colors.Background
MainWindow.BorderSizePixel = 0
MainWindow.Active = true
MainWindow.Parent = SkyXUI

-- Add corner
local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 8)
MainCorner.Parent = MainWindow

-- Create window title bar
local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Size = UDim2.new(1, 0, 0, 40)
TitleBar.BackgroundColor3 = Colors.Button
TitleBar.BorderSizePixel = 0
TitleBar.Parent = MainWindow

-- Add corner to title bar
local TitleCorner = Instance.new("UICorner")
TitleCorner.CornerRadius = UDim.new(0, 8)
TitleCorner.Parent = TitleBar

-- Fix corners
local CornerFix = Instance.new("Frame")
CornerFix.Name = "CornerFix"
CornerFix.Size = UDim2.new(1, 0, 0, 10)
CornerFix.Position = UDim2.new(0, 0, 1, -10)
CornerFix.BackgroundColor3 = Colors.Button
CornerFix.BorderSizePixel = 0
CornerFix.Parent = TitleBar

-- Add title text
local TitleText = Instance.new("TextLabel")
TitleText.Name = "Title"
TitleText.Size = UDim2.new(1, -50, 1, 0)
TitleText.Position = UDim2.new(0, 15, 0, 0)
TitleText.BackgroundTransparency = 1
TitleText.Font = Enum.Font.GothamBold
TitleText.TextSize = 16
TitleText.TextColor3 = Colors.Text
TitleText.TextXAlignment = Enum.TextXAlignment.Left
TitleText.Text = "SkyX MM2 Modular"
TitleText.Parent = TitleBar

-- Add close button
local CloseButton = Instance.new("ImageButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Position = UDim2.new(1, -30, 0, 10)
CloseButton.BackgroundTransparency = 1
CloseButton.Image = Icons.close
CloseButton.Parent = TitleBar

-- Add event for close button with proper functionality
AddConnection(CloseButton.MouseButton1Click, function()
    -- Clean up connections and resources before destroying
    for _, connection in pairs(SkyX.Connections) do
        if connection then
            connection:Disconnect()
        end
    end
    
    -- Stop all modules
    if Modules.ESP then Modules.ESP.Stop() end
    if Modules.CoinCollector then Modules.CoinCollector.Stop() end
    if Modules.MurderDetection then Modules.MurderDetection.Stop() end
    if Modules.Teleport then Modules.Teleport.Stop() end
    if Modules.AntiBan then Modules.AntiBan.Stop() end
    
    -- Destroy GUI
    SkyXUI:Destroy()
    
    print("SkyX MM2 Modular closed properly")
end)

-- Create content area
local ContentFrame = Instance.new("Frame")
ContentFrame.Name = "ContentFrame"
ContentFrame.Size = UDim2.new(1, 0, 1, -50)
ContentFrame.Position = UDim2.new(0, 0, 0, 40)
ContentFrame.BackgroundColor3 = Colors.Container
ContentFrame.BorderSizePixel = 0
ContentFrame.Parent = MainWindow

-- Fix content corners
local ContentCorner = Instance.new("UICorner")
ContentCorner.CornerRadius = UDim.new(0, 8)
ContentCorner.Parent = ContentFrame

-- Add tab container with proper size to prevent sticking out
local TabContainer = Instance.new("Frame")
TabContainer.Name = "TabContainer"
TabContainer.Size = UDim2.new(1, -20, 0, 40)
TabContainer.Position = UDim2.new(0, 10, 0, 10)
TabContainer.BackgroundTransparency = 1
TabContainer.BorderSizePixel = 0
TabContainer.ClipsDescendants = true -- Prevent tabs from sticking out
TabContainer.Parent = ContentFrame

-- Add tab layout
local TabLayout = Instance.new("UIListLayout")
TabLayout.FillDirection = Enum.FillDirection.Horizontal
TabLayout.Padding = UDim.new(0, 5)
TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
TabLayout.Parent = TabContainer

-- Add tab content container
local TabContent = Instance.new("Frame")
TabContent.Name = "TabContent"
TabContent.Size = UDim2.new(1, -20, 1, -60)
TabContent.Position = UDim2.new(0, 10, 0, 50)
TabContent.BackgroundTransparency = 1
TabContent.BorderSizePixel = 0
TabContent.Parent = ContentFrame

-- Make window draggable - fixed implementation
local dragging = false
local dragInput
local dragStart
local startPos

AddConnection(TitleBar.InputBegan, function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainWindow.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

AddConnection(TitleBar.InputChanged, function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

AddConnection(UserInputService.InputChanged, function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        MainWindow.Position = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
    end
end)

-- Track tabs
local Tabs = {}
local SelectedTab = nil

-- Get MM2 values
local function GetMM2Values()
    local MM2 = {}
    MM2.Roles = {}
    MM2.Players = {}
    
    -- Get all players
    for _, Player in pairs(game.Players:GetPlayers()) do
        if Player ~= game.Players.LocalPlayer then
            table.insert(MM2.Players, Player)
        end
    end
    
    -- Attempt to find MM2 roles
    for _, Player in pairs(game.Players:GetPlayers()) do
        local Backpack = Player:FindFirstChild("Backpack")
        if Backpack then
            -- Check for knife
            if Backpack:FindFirstChild("Knife") then
                MM2.Roles.Murderer = Player
            end
            -- Check for gun
            if Backpack:FindFirstChild("Gun") or Backpack:FindFirstChild("Revolver") then
                MM2.Roles.Sheriff = Player
            end
        end
        
        -- Also check equipped items
        local Character = Player.Character
        if Character then
            if Character:FindFirstChild("Knife") then
                MM2.Roles.Murderer = Player
            end
            if Character:FindFirstChild("Gun") or Character:FindFirstChild("Revolver") then
                MM2.Roles.Sheriff = Player
            end
        end
    end
    
    return MM2
end

-- Function to create a tab
local function CreateTab(name, order)
    -- Create tab button with adjusted width for 6 tabs
    local TabButton = Instance.new("TextButton")
    TabButton.Name = name .. "Tab"
    TabButton.Size = UDim2.new(0, 80, 1, 0) -- Reduced from 100 to 80 to fit all tabs
    TabButton.BackgroundColor3 = Colors.TabInactive
    TabButton.BorderSizePixel = 0
    TabButton.Font = Enum.Font.GothamBold
    TabButton.TextSize = 14
    TabButton.TextColor3 = Colors.Text
    TabButton.Text = name
    TabButton.LayoutOrder = order
    TabButton.Parent = TabContainer
    
    -- Add corner to tab button
    local TabButtonCorner = Instance.new("UICorner")
    TabButtonCorner.CornerRadius = UDim.new(0, 6)
    TabButtonCorner.Parent = TabButton
    
    -- Create tab page
    local TabPage = Instance.new("ScrollingFrame")
    TabPage.Name = name .. "Page"
    TabPage.Size = UDim2.new(1, 0, 1, 0)
    TabPage.BackgroundTransparency = 1
    TabPage.BorderSizePixel = 0
    TabPage.ScrollBarThickness = 4
    TabPage.ScrollBarImageColor3 = Colors.Button
    TabPage.Visible = false
    TabPage.Parent = TabContent
    
    -- Add padding to tab page
    local TabPagePadding = Instance.new("UIPadding")
    TabPagePadding.PaddingLeft = UDim.new(0, 5)
    TabPagePadding.PaddingRight = UDim.new(0, 5)
    TabPagePadding.PaddingTop = UDim.new(0, 5)
    TabPagePadding.PaddingBottom = UDim.new(0, 5)
    TabPagePadding.Parent = TabPage
    
    -- Add layout to tab page
    local TabPageLayout = Instance.new("UIListLayout")
    TabPageLayout.Padding = UDim.new(0, 10)
    TabPageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabPageLayout.Parent = TabPage
    
    -- Auto-size content
    AddConnection(TabPageLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        TabPage.CanvasSize = UDim2.new(0, 0, 0, TabPageLayout.AbsoluteContentSize.Y + 10)
    end)
    
    -- Create tab object
    local Tab = {
        Button = TabButton,
        Page = TabPage,
        Layout = TabPageLayout,
        Name = name,
        Sections = {}
    }
    
    -- Add tab click event
    AddConnection(TabButton.MouseButton1Click, function()
        -- Deselect current tab
        if SelectedTab then
            SelectedTab.Button.BackgroundColor3 = Colors.TabInactive
            SelectedTab.Page.Visible = false
        end
        
        -- Select this tab
        TabButton.BackgroundColor3 = Colors.TabActive
        TabPage.Visible = true
        SelectedTab = Tab
    end)
    
    -- Add function to create a section
    function Tab:AddSection(sectionName)
        -- Create section frame
        local Section = Instance.new("Frame")
        Section.Name = sectionName .. "Section"
        Section.Size = UDim2.new(1, 0, 0, 100)
        Section.BackgroundColor3 = Colors.Background
        Section.BorderSizePixel = 0
        Section.AutomaticSize = Enum.AutomaticSize.Y
        Section.Parent = TabPage
        
        -- Add corner
        local SectionCorner = Instance.new("UICorner")
        SectionCorner.CornerRadius = UDim.new(0, 6)
        SectionCorner.Parent = Section
        
        -- Add stroke
        local SectionStroke = Instance.new("UIStroke")
        SectionStroke.Color = Colors.Border
        SectionStroke.Thickness = 1.5
        SectionStroke.Parent = Section
        
        -- Add title
        local SectionTitle = Instance.new("TextLabel")
        SectionTitle.Name = "Title"
        SectionTitle.Size = UDim2.new(1, 0, 0, 30)
        SectionTitle.BackgroundTransparency = 1
        SectionTitle.Font = Enum.Font.GothamBold
        SectionTitle.TextSize = 14
        SectionTitle.TextColor3 = Colors.Text
        SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
        SectionTitle.Text = "    " .. sectionName
        SectionTitle.Parent = Section
        
        -- Create section content
        local SectionContent = Instance.new("Frame")
        SectionContent.Name = "Content"
        SectionContent.Size = UDim2.new(1, -10, 0, 0)
        SectionContent.Position = UDim2.new(0, 5, 0, 30)
        SectionContent.BackgroundTransparency = 1
        SectionContent.BorderSizePixel = 0
        SectionContent.AutomaticSize = Enum.AutomaticSize.Y
        SectionContent.Parent = Section
        
        -- Add layout
        local SectionLayout = Instance.new("UIListLayout")
        SectionLayout.Padding = UDim.new(0, 8)
        SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
        SectionLayout.Parent = SectionContent
        
        -- Auto-size sections
        AddConnection(SectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
            SectionContent.Size = UDim2.new(1, -10, 0, SectionLayout.AbsoluteContentSize.Y)
            Section.Size = UDim2.new(1, 0, 0, SectionContent.Size.Y.Offset + 40)
        end)
        
        -- Create section object
        local SectionObj = {
            Frame = Section,
            Content = SectionContent,
            Layout = SectionLayout,
            Name = sectionName
        }
        
        -- Add function to add a label
        function SectionObj:AddLabel(text)
            local Label = Instance.new("TextLabel")
            Label.Name = "Label"
            Label.Size = UDim2.new(1, 0, 0, 20)
            Label.BackgroundTransparency = 1
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 14
            Label.TextColor3 = Colors.Text
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Text = "   " .. text
            Label.Parent = SectionContent
            
            local LabelObj = {
                Label = Label,
                Text = text
            }
            
            function LabelObj:SetText(newText)
                Label.Text = "   " .. newText
            end
            
            return LabelObj
        end
        
        -- Add function to add a toggle
        function SectionObj:AddToggle(text, default, callback)
            -- Create toggle frame
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Name = "Toggle"
            ToggleFrame.Size = UDim2.new(1, 0, 0, 34)
            ToggleFrame.BackgroundTransparency = 1
            ToggleFrame.BorderSizePixel = 0
            ToggleFrame.Parent = SectionContent
            
            -- Adjust size for mobile
            if IsMobile then
                ToggleFrame.Size = UDim2.new(1, 0, 0, 40)
            end
            
            -- Create toggle text
            local ToggleText = Instance.new("TextLabel")
            ToggleText.Name = "Text"
            ToggleText.Size = UDim2.new(1, -55, 1, 0)
            ToggleText.BackgroundTransparency = 1
            ToggleText.Font = Enum.Font.Gotham
            ToggleText.TextSize = 14
            ToggleText.TextColor3 = Colors.Text
            ToggleText.TextXAlignment = Enum.TextXAlignment.Left
            ToggleText.Text = "   " .. text
            ToggleText.Parent = ToggleFrame
            
            -- Create toggle button background
            local ToggleBackground = Instance.new("Frame")
            ToggleBackground.Name = "Background"
            ToggleBackground.Size = UDim2.new(0, 44, 0, 24)
            ToggleBackground.Position = UDim2.new(1, -50, 0.5, -12)
            ToggleBackground.BorderSizePixel = 0
            ToggleBackground.BackgroundColor3 = default and Colors.Button or Colors.Background
            ToggleBackground.Parent = ToggleFrame
            
            -- Add corner to toggle background
            local ToggleBackgroundCorner = Instance.new("UICorner")
            ToggleBackgroundCorner.CornerRadius = UDim.new(1, 0)
            ToggleBackgroundCorner.Parent = ToggleBackground
            
            -- Create toggle indicator
            local ToggleIndicator = Instance.new("Frame")
            ToggleIndicator.Name = "Indicator"
            ToggleIndicator.Size = UDim2.new(0, 18, 0, 18)
            ToggleIndicator.Position = UDim2.new(0, default and (IsMobile and 25 or 23) or 3, 0.5, IsMobile and -9 or -9)
            ToggleIndicator.BorderSizePixel = 0
            ToggleIndicator.BackgroundColor3 = Colors.Text
            ToggleIndicator.Parent = ToggleBackground
            
            -- Add corner to toggle indicator
            local ToggleIndicatorCorner = Instance.new("UICorner")
            ToggleIndicatorCorner.CornerRadius = UDim.new(1, 0)
            ToggleIndicatorCorner.Parent = ToggleIndicator
            
            -- Create clickable button
            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Name = "Button"
            ToggleButton.Size = UDim2.new(1, 0, 1, 0)
            ToggleButton.BackgroundTransparency = 1
            ToggleButton.Font = Enum.Font.SourceSans
            ToggleButton.TextSize = 14
            ToggleButton.TextTransparency = 1
            ToggleButton.Parent = ToggleFrame
            
            -- Create toggle object
            local ToggleObj = {
                Frame = ToggleFrame,
                Button = ToggleButton,
                Background = ToggleBackground,
                Indicator = ToggleIndicator,
                Enabled = default
            }
            
            -- Add toggle event
            AddConnection(ToggleButton.MouseButton1Click, function()
                ToggleObj.Enabled = not ToggleObj.Enabled
                
                -- Animate toggle
                TweenService:Create(ToggleBackground, TweenInfo.new(0.2), {
                    BackgroundColor3 = ToggleObj.Enabled and Colors.Button or Colors.Background
                }):Play()
                
                TweenService:Create(ToggleIndicator, TweenInfo.new(0.2), {
                    Position = UDim2.new(0, ToggleObj.Enabled and (IsMobile and 25 or 23) or 3, 0.5, IsMobile and -9 or -9)
                }):Play()
                
                -- Call callback
                if callback then
                    callback(ToggleObj.Enabled)
                end
            end)
            
            return ToggleObj
        end
        
        -- Add function to add a slider
        function SectionObj:AddSlider(text, min, max, default, callback)
            -- Create slider frame
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Name = "Slider"
            SliderFrame.Size = UDim2.new(1, 0, 0, 50)
            SliderFrame.BackgroundTransparency = 1
            SliderFrame.BorderSizePixel = 0
            SliderFrame.Parent = SectionContent
            
            -- Adjust size for mobile
            if IsMobile then
                SliderFrame.Size = UDim2.new(1, 0, 0, 60)
            end
            
            -- Create slider text
            local SliderText = Instance.new("TextLabel")
            SliderText.Name = "Text"
            SliderText.Size = UDim2.new(1, 0, 0, 20)
            SliderText.BackgroundTransparency = 1
            SliderText.Font = Enum.Font.Gotham
            SliderText.TextSize = 14
            SliderText.TextColor3 = Colors.Text
            SliderText.TextXAlignment = Enum.TextXAlignment.Left
            SliderText.Text = "   " .. text .. ": " .. default
            SliderText.Parent = SliderFrame
            
            -- Create slider background
            local SliderBackground = Instance.new("Frame")
            SliderBackground.Name = "Background"
            SliderBackground.Size = UDim2.new(1, -10, 0, 10)
            SliderBackground.Position = UDim2.new(0, 5, 0, 30)
            SliderBackground.BorderSizePixel = 0
            SliderBackground.BackgroundColor3 = Colors.Background
            SliderBackground.Parent = SliderFrame
            
            -- Add corner to slider background
            local SliderBackgroundCorner = Instance.new("UICorner")
            SliderBackgroundCorner.CornerRadius = UDim.new(0, 5)
            SliderBackgroundCorner.Parent = SliderBackground
            
            -- Create slider fill
            local SliderFill = Instance.new("Frame")
            SliderFill.Name = "Fill"
            SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            SliderFill.BorderSizePixel = 0
            SliderFill.BackgroundColor3 = Colors.Button
            SliderFill.Parent = SliderBackground
            
            -- Add corner to slider fill
            local SliderFillCorner = Instance.new("UICorner")
            SliderFillCorner.CornerRadius = UDim.new(0, 5)
            SliderFillCorner.Parent = SliderFill
            
            -- Create slider button
            local SliderButton = Instance.new("TextButton")
            SliderButton.Name = "Button"
            SliderButton.Size = UDim2.new(1, 0, 1, 0)
            SliderButton.BackgroundTransparency = 1
            SliderButton.Font = Enum.Font.SourceSans
            SliderButton.TextSize = 14
            SliderButton.TextTransparency = 1
            SliderButton.Parent = SliderBackground
            
            -- Create slider object
            local SliderObj = {
                Frame = SliderFrame,
                Background = SliderBackground,
                Fill = SliderFill,
                Button = SliderButton,
                Text = SliderText,
                Value = default,
                Min = min,
                Max = max
            }
            
            -- Function to update slider
            local function UpdateSlider(input)
                local pos = UDim2.new(math.clamp((input.Position.X - SliderBackground.AbsolutePosition.X) / SliderBackground.AbsoluteSize.X, 0, 1), 0, 1, 0)
                SliderFill.Size = pos
                
                local value = math.floor(min + ((max - min) * pos.X.Scale))
                SliderObj.Value = value
                SliderText.Text = "   " .. text .. ": " .. value
                
                if callback then
                    callback(value)
                end
            end
            
            -- Add slider events
            AddConnection(SliderButton.MouseButton1Down, function(input)
                UpdateSlider(input)
                
                -- Track mouse movement
                local connection
                connection = UserInputService.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                        UpdateSlider(input)
                    end
                end)
                
                -- Stop tracking when mouse up
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        if connection then
                            connection:Disconnect()
                            connection = nil
                        end
                    end
                end)
            end)
            
            return SliderObj
        end
        
        -- Add function to add a button
        function SectionObj:AddButton(text, callback)
            -- Create button
            local Button = Instance.new("TextButton")
            Button.Name = "Button"
            Button.Size = UDim2.new(1, 0, 0, 32)
            Button.BackgroundColor3 = Colors.Button
            Button.BorderSizePixel = 0
            Button.Font = Enum.Font.GothamSemibold
            Button.TextSize = 14
            Button.TextColor3 = Colors.Text
            Button.Text = text
            Button.Parent = SectionContent
            
            -- Add corner to button
            local ButtonCorner = Instance.new("UICorner")
            ButtonCorner.CornerRadius = UDim.new(0, 6)
            ButtonCorner.Parent = Button
            
            -- Add button hover effect
            AddConnection(Button.MouseEnter, function()
                TweenService:Create(Button, TweenInfo.new(0.2), {
                    BackgroundColor3 = Color3.fromRGB(62, 115, 165)
                }):Play()
            end)
            
            AddConnection(Button.MouseLeave, function()
                TweenService:Create(Button, TweenInfo.new(0.2), {
                    BackgroundColor3 = Colors.Button
                }):Play()
            end)
            
            -- Add button click event
            AddConnection(Button.MouseButton1Click, function()
                TweenService:Create(Button, TweenInfo.new(0.1), {
                    BackgroundColor3 = Color3.fromRGB(32, 85, 135)
                }):Play()
                
                if callback then
                    callback()
                end
                
                wait(0.1)
                
                TweenService:Create(Button, TweenInfo.new(0.1), {
                    BackgroundColor3 = Colors.Button
                }):Play()
            end)
            
            return Button
        end
        
        -- Add section to tab
        table.insert(Tab.Sections, SectionObj)
        return SectionObj
    end
    
    -- Add tab to tabs table
    table.insert(Tabs, Tab)
    
    -- If this is the first tab, select it
    if #Tabs == 1 then
        TabButton.BackgroundColor3 = Colors.TabActive
        TabPage.Visible = true
        SelectedTab = Tab
    end
    
    return Tab
end

-- Load modules
local function LoadAllModules()
    -- Load Anti-Ban module first
    Modules.AntiBan = LoadModule("AntiBan")
    if Modules.AntiBan then
        Modules.AntiBan.Start()
    end
    
    -- Load other modules
    Modules.ESP = LoadModule("ESP")
    Modules.CoinCollector = LoadModule("CoinCollector")
    Modules.MurderDetection = LoadModule("MurderDetection")
    Modules.Teleport = LoadModule("Teleport")
    
    -- Link modules
    if Modules.ESP and Modules.MurderDetection then
        Modules.MurderDetection.SetESPModule(Modules.ESP)
    end
    
    if Modules.MurderDetection and Modules.Teleport then
        Modules.Teleport.SetMurderDetectionModule(Modules.MurderDetection)
    end
    
    -- Start modules
    if Modules.ESP then Modules.ESP.Start() end
    if Modules.CoinCollector then Modules.CoinCollector.Start() end
    if Modules.MurderDetection then Modules.MurderDetection.Start() end
    if Modules.Teleport then Modules.Teleport.Start() end
    
    return true
end

-- Create tabs
local MainTab = CreateTab("Main", 1)
local ESPTab = CreateTab("ESP", 2)
local CoinsTab = CreateTab("Coins", 3)
local MurderTab = CreateTab("Murder", 4)
local TeleportTab = CreateTab("Teleport", 5)
local AntiBanTab = CreateTab("Anti-Ban", 6)

-- Create main tab content
local InfoSection = MainTab:AddSection("Information")
InfoSection:AddLabel("Device: " .. DeviceText)
InfoSection:AddLabel("Game: Murder Mystery 2")
local StatusLabel = InfoSection:AddLabel("Loading modules...")

-- Load modules
local success = LoadAllModules()

-- Create UI controls for modules
if success then
    StatusLabel:SetText("Modules loaded successfully!")
    
    -- ESP Tab Content
    if Modules.ESP then
        local ESPSection = ESPTab:AddSection("ESP Features")
        
        ESPSection:AddToggle("ESP Enabled", false, function(value)
            Modules.ESP.Settings.Enabled = value
        end)
        
        ESPSection:AddToggle("Show Distance", true, function(value)
            Modules.ESP.Settings.ShowDistance = value
        end)
        
        ESPSection:AddToggle("Show Health", true, function(value)
            Modules.ESP.Settings.ShowHealth = value
        end)
        
        ESPSection:AddToggle("Show Roles", true, function(value)
            Modules.ESP.Settings.ShowRole = value
        end)
        
        ESPSection:AddToggle("Rainbow ESP", false, function(value)
            Modules.ESP.Settings.RainbowESP = value
        end)
        
        ESPSection:AddSlider("Rainbow Speed", 1, 10, 5, function(value)
            Modules.ESP.Settings.RainbowSpeed = value
        end)
    else
        local ESPSection = ESPTab:AddSection("ESP Features")
        ESPSection:AddLabel("ESP Module failed to load")
    end
    
    -- Coins Tab Content
    if Modules.CoinCollector then
        local CoinsSection = CoinsTab:AddSection("Coin Collection")
        
        CoinsSection:AddToggle("Auto Collect Coins", false, function(value)
            Modules.CoinCollector.Settings.AutoCollectEnabled = value
        end)
        
        CoinsSection:AddToggle("Coin ESP", false, function(value)
            Modules.CoinCollector.Settings.ESP.Enabled = value
        end)
        
        CoinsSection:AddSlider("Collection Radius", 5, 50, 15, function(value)
            Modules.CoinCollector.Settings.CollectionRadius = value
        end)
        
        CoinsSection:AddToggle("Prioritize Nearby Coins", true, function(value)
            Modules.CoinCollector.Settings.PrioritizeNearby = value
        end)
        
        local CoinStats = CoinsSection:AddLabel("Coins Collected: 0")
        
        -- Update coin stats periodically
        spawn(function()
            while wait(1) do
                if Modules.CoinCollector then
                    local stats = Modules.CoinCollector.GetStats()
                    CoinStats:SetText("Coins Collected: " .. stats.CoinsCollected)
                end
            end
        end)
    else
        local CoinsSection = CoinsTab:AddSection("Coin Collection")
        CoinsSection:AddLabel("Coin Collector Module failed to load")
    end
    
    -- Murder Tab Content
    if Modules.MurderDetection then
        local MurderSection = MurderTab:AddSection("Murder Detection")
        
        MurderSection:AddToggle("Murder Detection", false, function(value)
            Modules.MurderDetection.Settings.Enabled = value
            if value then
                Modules.MurderDetection.Start()
            else
                Modules.MurderDetection.Stop()
            end
        end)
        
        MurderSection:AddToggle("Auto-Kill Murderer", false, function(value)
            Modules.MurderDetection.Settings.AutoKill = value
        end)
        
        MurderSection:AddSlider("Warning Distance", 10, 50, 25, function(value)
            Modules.MurderDetection.Settings.WarningDistance = value
        end)
        
        MurderSection:AddSlider("Kill Distance", 5, 20, 8, function(value)
            Modules.MurderDetection.Settings.KillDistance = value
        end)
        
        local MurdererInfo = MurderSection:AddLabel("Murderer: Not Found")
        
        -- Update murderer info periodically
        spawn(function()
            while wait(1) do
                if Modules.MurderDetection then
                    local info = Modules.MurderDetection.GetMurdererInfo()
                    if info.MurdererFound then
                        MurdererInfo:SetText("Murderer: " .. info.MurdererName)
                    else
                        MurdererInfo:SetText("Murderer: Not Found")
                    end
                end
            end
        end)
    else
        local MurderSection = MurderTab:AddSection("Murder Detection")
        MurderSection:AddLabel("Murder Detection Module failed to load")
    end
    
    -- Teleport Tab Content
    if Modules.Teleport then
        local TeleportSection = TeleportTab:AddSection("Teleport Features")
        
        TeleportSection:AddToggle("Safe Mode", true, function(value)
            Modules.Teleport.Settings.SafeMode = value
        end)
        
        TeleportSection:AddToggle("Anti-Detection", true, function(value)
            Modules.Teleport.Settings.AntiDetection.Enabled = value
        end)
        
        -- Get list of locations
        local locations = Modules.Teleport.GetLocationsList()
        for _, location in ipairs(locations) do
            TeleportSection:AddButton(location.Icon .. " " .. location.Name, function()
                local success, message = Modules.Teleport.TeleportToLocation(location.Name)
                if success then
                    StatusLabel:SetText("Teleported to " .. location.Name)
                else
                    StatusLabel:SetText("Failed to teleport: " .. message)
                end
            end)
        end
    else
        local TeleportSection = TeleportTab:AddSection("Teleport Features")
        TeleportSection:AddLabel("Teleport Module failed to load")
    end
    
    -- Anti-Ban Tab Content
    if Modules.AntiBan then
        local AntiBanSection = AntiBanTab:AddSection("Anti-Ban System")
        
        AntiBanSection:AddToggle("Anti-Ban System", true, function(value)
            Modules.AntiBan.Settings.Enabled = value
            if value then
                Modules.AntiBan.Start()
            else
                Modules.AntiBan.Stop()
            end
        end)
        
        AntiBanSection:AddToggle("Remove Exploit Detection", true, function(value)
            Modules.AntiBan.Settings.Flags.ExploitDetectionRemoval = value
        end)
        
        AntiBanSection:AddToggle("Reduce Auto-Punish Risk", true, function(value)
            Modules.AntiBan.Settings.Flags.ReduceAutoPunishRisk = value
        end)
        
        AntiBanSection:AddToggle("Randomize Actions", true, function(value)
            Modules.AntiBan.Settings.Flags.RandomizeActions = value
        end)
        
        AntiBanSection:AddToggle("Disable High-Risk Features", false, function(value)
            Modules.AntiBan.Settings.Flags.DisableHighRiskFeatures = value
        end)
        
        local AntiBanStats = AntiBanSection:AddLabel("Detections Evaded: 0")
        
        -- Update anti-ban stats periodically
        spawn(function()
            while wait(2) do
                if Modules.AntiBan then
                    local status = Modules.AntiBan.GetStatus()
                    AntiBanStats:SetText("Detections Evaded: " .. status.DetectionsEvaded)
                end
            end
        end)
    else
        local AntiBanSection = AntiBanTab:AddSection("Anti-Ban System")
        AntiBanSection:AddLabel("Anti-Ban Module failed to load")
    end
else
    StatusLabel:SetText("Failed to load modules")
end

-- Add keybind for toggling UI (closing and reopening)
local ToggleKeyCode = Enum.KeyCode.RightControl -- Use Right Control as the toggle key

-- Global variables to track UI state
_G.SkyXUIVisible = true
_G.SkyXUIData = {
    MainPosition = UDim2.new(0.5, -250, 0.5, -175), -- Store position for reopening
    LastTab = nil -- Store last active tab
}

-- Function to toggle UI visibility
local function ToggleUI()
    if _G.SkyXUIVisible then
        -- Save current UI state
        _G.SkyXUIData.MainPosition = MainWindow.Position
        _G.SkyXUIData.LastTab = SelectedTab and SelectedTab.Name or "Main"
        
        -- Hide UI
        SkyXUI.Enabled = false
        _G.SkyXUIVisible = false
        print("SkyX MM2 UI hidden - Press Right Control to show")
    else
        -- Show UI
        SkyXUI.Enabled = true
        _G.SkyXUIVisible = true
        
        -- Restore previous position
        MainWindow.Position = _G.SkyXUIData.MainPosition
        
        -- Restore previous tab
        if _G.SkyXUIData.LastTab then
            for _, tab in pairs(Tabs) do
                if tab.Name == _G.SkyXUIData.LastTab then
                    -- Simulate click on this tab
                    tab.Button.BackgroundColor3 = Colors.TabActive
                    tab.Page.Visible = true
                    SelectedTab = tab
                else
                    tab.Button.BackgroundColor3 = Colors.TabInactive
                    tab.Page.Visible = false
                end
            end
        end
        
        print("SkyX MM2 UI shown")
    end
end

-- Add keybind for toggling UI
AddConnection(UserInputService.InputBegan, function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == ToggleKeyCode then
        ToggleUI()
    end
end)

-- Add mobile button for toggling UI (since mobile can't use keyboard)
if IsMobile then
    -- Create toggle button for mobile
    local ToggleButton = Instance.new("ImageButton")
    ToggleButton.Name = "SkyXToggleButton"
    ToggleButton.Size = UDim2.new(0, 50, 0, 50)
    ToggleButton.Position = UDim2.new(0, 10, 0, 10)
    ToggleButton.BackgroundColor3 = Colors.Button
    ToggleButton.BorderSizePixel = 0
    ToggleButton.Image = "rbxassetid://4483345998" -- Use a simple icon
    ToggleButton.ImageColor3 = Colors.Text
    ToggleButton.ZIndex = 10
    
    -- Add corner
    local ToggleButtonCorner = Instance.new("UICorner")
    ToggleButtonCorner.CornerRadius = UDim.new(0, 25)
    ToggleButtonCorner.Parent = ToggleButton
    
    -- Handle executor security models
    if syn then
        syn.protect_gui(ToggleButton)
        ToggleButton.Parent = game.CoreGui
    else
        ToggleButton.Parent = gethui() or game.CoreGui
    end
    
    -- Add click event
    AddConnection(ToggleButton.MouseButton1Click, function()
        ToggleUI()
    end)
    
    -- Make button partially transparent when UI is hidden
    AddConnection(RunService.RenderStepped, function()
        ToggleButton.BackgroundTransparency = _G.SkyXUIVisible and 0 or 0.5
    end)
end

-- UI cleanup on script end
game:GetService("Players").LocalPlayer.OnTeleport:Connect(function(State)
    if State == Enum.TeleportState.Started then
        for _, connection in pairs(SkyX.Connections) do
            if connection then
                connection:Disconnect()
            end
        end
        SkyXUI:Destroy()
    end
end)

print("SkyX MM2 Modular loaded successfully | Press Right Control to toggle UI")
return SkyXUI
