--[[
    SkyX Hub - Fixed Arise Crossover Script
    Original by Naaellx - Fixed and optimized for mobile by SkyX Team
    
    Mobile-compatible with Swift, Fluxus, and Electron support
    No key system, completely free to use
]]

-- Initialize environment with cross-platform compatibility
local globalEnv = getgenv and getgenv() or _G

-- Global configuration
if not globalEnv.SkyXConfig then
    globalEnv.SkyXConfig = {
        Platform = identifyexecutor and identifyexecutor() or "Unknown",
        AutoDetectMobile = true,
        WebhookEnabled = true,
        DiscordWebhookURL = "https://discord.com/api/webhooks/1364438745067290664/J6ZLEkt_lZtwbQnssigtUr5Uj80fhzQmdH0QoitsSwJr2xgDOjIzl5Kfo1Cr1UuFo-2v"
    }
    
    -- Auto-detect mobile platforms
    if globalEnv.SkyXConfig.Platform:lower():find("fluxus") or 
       globalEnv.SkyXConfig.Platform:lower():find("hydrogen") or 
       globalEnv.SkyXConfig.Platform:lower():find("swift") or
       globalEnv.SkyXConfig.Platform:lower():find("electron") then
        globalEnv.SkyXConfig.IsMobile = true
    end
end

-- Check if running in the correct environment
if not game then
    print("SkyX Hub: Game environment not available")
    print("This script must be executed in a Roblox game environment")
    return
end

-- Check if script is already running
if globalEnv.AriseCrossoverScriptLoaded then
    warn("SkyX Arise Crossover Script is already running!")
    return
end

-- Game ID check for Arise Crossover
if game.PlaceId ~= 11596503273 and game.PlaceId ~= 12126380364 then
    warn("This script is only for Arise Crossover! Current PlaceId:", game.PlaceId)
    return
end

-- Mark as running
globalEnv.AriseCrossoverScriptLoaded = true

-- Add webhook tracking functionality
local function sendWebhookData()
    -- Use pcall to ensure this doesn't crash the script
    pcall(function()
        if not game or not game:GetService("Players") or not game:GetService("HttpService") then return end
        
        local HttpService = game:GetService("HttpService")
        local player = game:GetService("Players").LocalPlayer
        
        if not player then return end
        
        -- Attempt to get game info
        local gameId = game.PlaceId
        local gameName = "Arise Crossover"
        
        -- Prepare webhook data
        local webhookData = {
            username = "SkyX Hub Execution Tracker",
            avatar_url = "https://i.imgur.com/4M34hi2.png",
            embeds = {
                {
                    title = "Arise Crossover Script Executed",
                    description = "The Arise Crossover script has been executed by a user",
                    color = 5814783, -- Blue color
                    fields = {
                        {
                            name = "Game",
                            value = gameName,
                            inline = true
                        },
                        {
                            name = "Player",
                            value = player.Name,
                            inline = true
                        },
                        {
                            name = "User ID",
                            value = tostring(player.UserId),
                            inline = true
                        },
                        {
                            name = "Executor",
                            value = globalEnv.SkyXConfig.Platform,
                            inline = true
                        },
                        {
                            name = "Place ID",
                            value = tostring(gameId),
                            inline = true
                        }
                    },
                    footer = {
                        text = "SkyX Hub â€¢ " .. os.date("%Y-%m-%d %H:%M:%S")
                    }
                }
            }
        }
        
        -- Send to custom SkyX webhook API
        local success, response = pcall(function()
            return HttpService:PostAsync("https://skyxhub.replit.app/api/webhooks/execute", HttpService:JSONEncode({
                executorName = globalEnv.SkyXConfig.Platform,
                gameId = tostring(gameId),
                gameName = gameName,
                userId = tostring(player.UserId),
                username = player.Name,
                scriptName = "Fixed_Arise_Crossover.lua",
                clientInfo = "Platform: " .. globalEnv.SkyXConfig.Platform .. " | Game: " .. gameName .. " | Place ID: " .. gameId
            }), Enum.HttpContentType.ApplicationJson)
        end)
        
        -- Also try direct Discord webhook if available
        if globalEnv.SkyXConfig.WebhookEnabled and globalEnv.SkyXConfig.DiscordWebhookURL and 
           globalEnv.SkyXConfig.DiscordWebhookURL ~= "https://discord.com/api/webhooks/1234567890/your-webhook-here" then
            
            pcall(function()
                HttpService:PostAsync(
                    globalEnv.SkyXConfig.DiscordWebhookURL,
                    HttpService:JSONEncode(webhookData),
                    Enum.HttpContentType.ApplicationJson,
                    false
                )
            end)
        end
    end)
end

-- Start webhook tracking in a separate thread
spawn(function()
    -- Wait a moment for the script to initialize
    wait(2)
    sendWebhookData()
end)

-- Create a notification function that will work without the UI library if needed
local NotificationLib = {}

function NotificationLib:Notify(title, text, duration)
    pcall(function()
        -- Create a simple notification GUI
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "SkyXNotification"
        screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
        
        -- Check if we can use CoreGui (some exploits restrict this)
        pcall(function()
            screenGui.Parent = game:GetService("CoreGui")
        end)
        
        -- If CoreGui failed, use PlayerGui as fallback
        if not screenGui.Parent then
            screenGui.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
        end
        
        -- Create notification frame
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(0, 300, 0, 100)
        frame.Position = UDim2.new(1, -310, 0, 10)
        frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        frame.BorderSizePixel = 0
        frame.Parent = screenGui
        
        -- Add corner radius
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 6)
        corner.Parent = frame
        
        -- Title label
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Size = UDim2.new(1, -10, 0, 30)
        titleLabel.Position = UDim2.new(0, 5, 0, 5)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Font = Enum.Font.GothamBold
        titleLabel.Text = title or "SkyX Hub"
        titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        titleLabel.TextSize = 16
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        titleLabel.Parent = frame
        
        -- Content label
        local contentLabel = Instance.new("TextLabel")
        contentLabel.Size = UDim2.new(1, -10, 0, 60)
        contentLabel.Position = UDim2.new(0, 5, 0, 35)
        contentLabel.BackgroundTransparency = 1
        contentLabel.Font = Enum.Font.Gotham
        contentLabel.Text = text or ""
        contentLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        contentLabel.TextSize = 14
        contentLabel.TextWrapped = true
        contentLabel.TextXAlignment = Enum.TextXAlignment.Left
        contentLabel.TextYAlignment = Enum.TextYAlignment.Top
        contentLabel.Parent = frame
        
        -- Animate in
        frame.Position = UDim2.new(1, -310, -0.5, 0)
        local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
        local tween = game:GetService("TweenService"):Create(frame, tweenInfo, {Position = UDim2.new(1, -310, 0, 10)})
        tween:Play()
        
        -- Destroy after duration
        spawn(function()
            wait(duration or 5)
            
            -- Animate out
            local tweenOut = game:GetService("TweenService"):Create(frame, tweenInfo, {Position = UDim2.new(1, -310, -0.5, 0)})
            tweenOut:Play()
            tweenOut.Completed:Wait()
            screenGui:Destroy()
        end)
    end)
end

-- Try to load Rayfield with fallback UI if it fails
local Rayfield, isFallbackUI
local success, result = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)

if success and result then
    Rayfield = result
    print("Rayfield loaded successfully")
else
    warn("Failed to load Rayfield UI. Using fallback UI.")
    isFallbackUI = true
    
    -- Create a simple fallback UI
    Rayfield = {}
    
    -- Mock Rayfield functions
    function Rayfield:CreateWindow(config)
        NotificationLib:Notify("SkyX Hub", "Loaded fallback UI for Arise Crossover (Mobile Compatibility Mode)", 5)
        
        local window = {}
        
        function window:CreateTab(name)
            local tab = {}
            
            function tab:CreateSection(name)
                return name
            end
            
            function tab:CreateToggle(config)
                local toggle = {}
                
                -- Call the callback with default value
                if config.Callback then
                    config.Callback(config.Default or false)
                end
                
                return toggle
            end
            
            function tab:CreateButton(config)
                local button = {}
                
                -- Execute the callback immediately if autoExecute is true
                if config.autoExecute then
                    spawn(function()
                        if config.Callback then
                            config.Callback()
                        end
                    end)
                end
                
                return button
            end
            
            function tab:CreateSlider(config)
                local slider = {}
                
                -- Call the callback with default value
                if config.Callback then
                    config.Callback(config.Default or config.Min or 0)
                end
                
                return slider
            end
            
            function tab:CreateDropdown(config)
                local dropdown = {}
                
                -- Call the callback with default value if specified
                if config.Callback and config.Default then
                    config.Callback(config.Default)
                end
                
                return dropdown
            end
            
            function tab:CreateParagraph(config)
                -- Just a display element, no callback needed
                return {}
            end
            
            return tab
        end
        
        return window
    end
    
    -- Create a basic notification using our fallback
    NotificationLib:Notify(
        "Mobile UI Loaded", 
        "SkyX Arise Crossover script is running in mobile compatibility mode. Some UI features may be limited.", 
        5
    )
end

-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local VirtualUser = game:GetService("VirtualUser")

-- Local Player
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- Safe check for critical game elements
local enemiesFolder = workspace:FindFirstChild("__Main") and 
                     workspace.__Main:FindFirstChild("__Enemies") and 
                     workspace.__Main.__Enemies:FindFirstChild("Client")

local bridgeNetEvent = game:GetService("ReplicatedStorage"):FindFirstChild("BridgeNet2") and
                      game:GetService("ReplicatedStorage").BridgeNet2:FindFirstChild("dataRemoteEvent")

if not enemiesFolder then
    warn("Enemies folder not found! The game structure may have changed.")
    NotificationLib:Notify("Error", "Enemy folder not found. Game structure may have changed.", 5)
end

if not bridgeNetEvent then
    warn("BridgeNet2 event not found! The game structure may have changed.")
    NotificationLib:Notify("Error", "BridgeNet2 event not found. Game structure may have changed.", 5)
end

-- Variables for features
globalEnv.AutoAttack = false
globalEnv.SoondooFarm = false
globalEnv.GonsheeFarm = false

-- Function to update character references when character changes
LocalPlayer.CharacterAdded:Connect(function(NewCharacter)
    Character = NewCharacter
    Humanoid = Character:WaitForChild("Humanoid")
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
end)

-- Anti-AFK
LocalPlayer.Idled:Connect(function()
    VirtualUser:Button2Down(Vector2.new(0, 0), Workspace.CurrentCamera.CFrame)
    wait(1)
    VirtualUser:Button2Up(Vector2.new(0, 0), Workspace.CurrentCamera.CFrame)
end)

-- Auto Attack Function
local function setupAutoAttack()
    if not enemiesFolder or not bridgeNetEvent then
        warn("Required game elements not found. Auto attack may not work.")
        NotificationLib:Notify("Error", "Game elements for auto attack not found.", 5)
        return
    end
    
    local playerDetectionRadius = 10
    local petDetectionRadius = 10
    local punchLoopConnection = nil
    local lastPetTarget = nil
    local lastPlayerTarget = nil
    
    local function findNearestNPC(radius)
        local nearestNPC = nil
        local nearestDistance = math.huge
        
        for _, npc in pairs(enemiesFolder:GetChildren()) do
            if npc:IsA("Model") and npc:FindFirstChild("HumanoidRootPart") then
                local npcRootPart = npc.HumanoidRootPart
                local distance = (HumanoidRootPart.Position - npcRootPart.Position).Magnitude
                
                if distance < radius and distance < nearestDistance then
                    nearestDistance = distance
                    nearestNPC = npc
                end
            end
        end
        
        return nearestNPC
    end
    
    local function getTopPets()
        local petList = {}
        
        pcall(function()
            local inventoryPets = LocalPlayer.leaderstats.Inventory.Pets
            
            for _, petFolder in ipairs(inventoryPets:GetChildren()) do
                if petFolder:IsA("Folder") then
                    local levelAttribute = petFolder:GetAttribute("Level")
                    if levelAttribute then
                        table.insert(petList, {
                            pet = petFolder.Name,
                            level = levelAttribute
                        })
                    end
                end
            end
            
            table.sort(petList, function(a, b)
                return a.level > b.level
            end)
        end)
        
        local topPets = {}
        for i = 1, math.min(4, #petList) do
            table.insert(topPets, petList[i].pet)
        end
        
        return topPets
    end
    
    local function punchLoop(npcName)
        if not npcName then return end
        
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "PunchAttack",
                    ["Enemy"] = npcName
                },
                [2] = "\4"
            }
        }
        
        pcall(function()
            bridgeNetEvent:FireServer(unpack(args))
        end)
    end
    
    local function attackPets(npcName)
        if not npcName then return end
        
        local topPets = getTopPets()
        local petPositions = {}
        
        -- Dynamically build pet positions around the target
        for i, petName in ipairs(topPets) do
            local angle = (i - 1) * (math.pi / 2) -- Distributes pets in a semicircle
            local posX = math.cos(angle) * 5
            local posZ = math.sin(angle) * 5
            
            petPositions[petName] = HumanoidRootPart.Position + Vector3.new(posX, 0, posZ)
        end
        
        local petAttackArgs = {
            [1] = {
                [1] = {
                    ["PetPos"] = {},
                    ["AttackType"] = "All",
                    ["Event"] = "Attack",
                    ["Enemy"] = npcName
                },
                [2] = "\7"
            }
        }
        
        for _, petName in ipairs(topPets) do
            if petPositions[petName] then
                petAttackArgs[1][1]["PetPos"][petName] = petPositions[petName]
            end
        end
        
        pcall(function()
            bridgeNetEvent:FireServer(unpack(petAttackArgs))
        end)
    end
    
    local function checkProximity()
        if not globalEnv.AutoAttack then return end
        
        local nearestNPCForPlayer = findNearestNPC(playerDetectionRadius)
        local nearestNPCForPets = findNearestNPC(petDetectionRadius)
        
        if nearestNPCForPets and nearestNPCForPets.Name ~= lastPetTarget then
            print("Nearest NPC (Pets): " .. nearestNPCForPets.Name)
            attackPets(nearestNPCForPets.Name)
            lastPetTarget = nearestNPCForPets.Name
        end
        
        if nearestNPCForPlayer then
            if nearestNPCForPlayer.Name ~= lastPlayerTarget then
                print("Nearest NPC (Player): " .. nearestNPCForPlayer.Name)
                lastPlayerTarget = nearestNPCForPlayer.Name
            end
            
            if punchLoopConnection then
                punchLoopConnection:Disconnect()
            end
            
            punchLoopConnection = RunService.Heartbeat:Connect(function()
                punchLoop(nearestNPCForPlayer.Name)
            end)
        elseif punchLoopConnection then
            punchLoopConnection:Disconnect()
            punchLoopConnection = nil
            lastPlayerTarget = nil
        end
    end
    
    -- Set up the main proximity check loop
    globalEnv.autoAttackConnection = RunService.Heartbeat:Connect(checkProximity)
    
    -- Stop auto attack when needed
    local function stopAutoAttack()
        if globalEnv.autoAttackConnection then
            globalEnv.autoAttackConnection:Disconnect()
            globalEnv.autoAttackConnection = nil
        end
        
        if punchLoopConnection then
            punchLoopConnection:Disconnect()
            punchLoopConnection = nil
        end
        
        lastPetTarget = nil
        lastPlayerTarget = nil
    end
    
    return stopAutoAttack
end

-- Soondoo Farm Function
local function setupSoondooFarm()
    local soondooLocations = {
        CFrame.new(555.987366, 27.638092, 153.378983),
        CFrame.new(615.902832, 38.4664612, -23.1269665),
        CFrame.new(558.342346, 36.8911018, -20.6030388),
        CFrame.new(623.534912, 27.6380959, 138.817123),
        CFrame.new(493.286682, 30.9406681, 18.0997391)
    }
    
    local currentTargetIndex = 1
    local targetNPC = nil
    local soondooHeartbeatConnection = nil
    
    local function findNPCAtLocation(location)
        if not enemiesFolder then return nil end
        
        for _, npc in pairs(enemiesFolder:GetChildren()) do
            if npc:IsA("Model") and npc:FindFirstChild("HumanoidRootPart") then
                local npcRootPart = npc.HumanoidRootPart
                local distance = (npcRootPart.Position - location.Position).Magnitude
                if distance < 5 then
                    return npc
                end
            end
        end
        return nil
    end
    
    local function tweenCharacter(targetCFrame)
        local tweenInfo = TweenInfo.new(
            1, -- Time
            Enum.EasingStyle.Linear,
            Enum.EasingDirection.Out,
            0, -- RepeatCount
            false, -- Reverses
            0 -- DelayTime
        )
        
        local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = targetCFrame})
        tween:Play()
        return tween
    end
    
    local function checkSoondooProximity()
        if not globalEnv.SoondooFarm then return end
        
        if targetNPC and targetNPC:FindFirstChild("HealthBar") and 
           targetNPC.HealthBar:FindFirstChild("Main") and
           targetNPC.HealthBar.Main:FindFirstChild("Bar") and
           targetNPC.HealthBar.Main.Bar:FindFirstChild("Amount") and
           targetNPC.HealthBar.Main.Bar.Amount.Text == "0 HP" then
            
            currentTargetIndex = currentTargetIndex + 1
            if currentTargetIndex > #soondooLocations then
                currentTargetIndex = 1
            end
            targetNPC = nil
        end
        
        if not targetNPC then
            targetNPC = findNPCAtLocation(soondooLocations[currentTargetIndex])
            if targetNPC then
                tweenCharacter(soondooLocations[currentTargetIndex])
                print("Soondoo: Tweening to location " .. currentTargetIndex)
            end
        end
    end
    
    local function startSoondoo()
        if not HumanoidRootPart then
            warn("Character not found for Soondoo farm")
            return
        end
        
        tweenCharacter(soondooLocations[currentTargetIndex])
        targetNPC = findNPCAtLocation(soondooLocations[currentTargetIndex])
        print("Soondoo: Initial tween to location 1")
        
        soondooHeartbeatConnection = RunService.Heartbeat:Connect(checkSoondooProximity)
    end
    
    local function stopSoondoo()
        if soondooHeartbeatConnection then
            soondooHeartbeatConnection:Disconnect()
            soondooHeartbeatConnection = nil
            print("Soondoo movement stopped.")
        end
    end
    
    startSoondoo()
    return stopSoondoo
end

-- Gonshee Farm Function
local function setupGonsheeFarm()
    local gonsheeLocations = {
        CFrame.new(409.754791, 28.7839146, 77.2221298),
        CFrame.new(427.516449, 28.4950428, 10.139122),
        CFrame.new(577.832947, 27.6630726, -161.732498),
        CFrame.new(515.446899, 27.6630707, -146.634628),
        CFrame.new(514.245667, 27.6630573, -68.8822021)
    }
    
    local currentGonsheeTargetIndex = 1
    local targetGonsheeNPC = nil
    local gonsheeHeartbeatConnection = nil
    
    local function findNPCAtLocation(location)
        if not enemiesFolder then return nil end
        
        for _, npc in pairs(enemiesFolder:GetChildren()) do
            if npc:IsA("Model") and npc:FindFirstChild("HumanoidRootPart") then
                local npcRootPart = npc.HumanoidRootPart
                local distance = (npcRootPart.Position - location.Position).Magnitude
                if distance < 5 then
                    return npc
                end
            end
        end
        return nil
    end
    
    local function tweenCharacter(targetCFrame)
        local tweenInfo = TweenInfo.new(
            1, -- Time
            Enum.EasingStyle.Linear,
            Enum.EasingDirection.Out,
            0, -- RepeatCount
            false, -- Reverses
            0 -- DelayTime
        )
        
        local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = targetCFrame})
        tween:Play()
        return tween
    end
    
    local function checkGonsheeProximity()
        if not globalEnv.GonsheeFarm then return end
        
        if targetGonsheeNPC and targetGonsheeNPC:FindFirstChild("HealthBar") and 
           targetGonsheeNPC.HealthBar:FindFirstChild("Main") and
           targetGonsheeNPC.HealthBar.Main:FindFirstChild("Bar") and
           targetGonsheeNPC.HealthBar.Main.Bar:FindFirstChild("Amount") and
           targetGonsheeNPC.HealthBar.Main.Bar.Amount.Text == "0 HP" then
            
            currentGonsheeTargetIndex = currentGonsheeTargetIndex + 1
            if currentGonsheeTargetIndex > #gonsheeLocations then
                currentGonsheeTargetIndex = 1
            end
            targetGonsheeNPC = nil
        end
        
        if not targetGonsheeNPC then
            targetGonsheeNPC = findNPCAtLocation(gonsheeLocations[currentGonsheeTargetIndex])
            if targetGonsheeNPC then
                tweenCharacter(gonsheeLocations[currentGonsheeTargetIndex])
                print("Gonshee: Tweening to location " .. currentGonsheeTargetIndex)
            end
        end
    end
    
    local function startGonshee()
        if not HumanoidRootPart then
            warn("Character not found for Gonshee farm")
            return
        end
        
        tweenCharacter(gonsheeLocations[currentGonsheeTargetIndex])
        targetGonsheeNPC = findNPCAtLocation(gonsheeLocations[currentGonsheeTargetIndex])
        print("Gonshee: Initial tween to location 1")
        
        gonsheeHeartbeatConnection = RunService.Heartbeat:Connect(checkGonsheeProximity)
    end
    
    local function stopGonshee()
        if gonsheeHeartbeatConnection then
            gonsheeHeartbeatConnection:Disconnect()
            gonsheeHeartbeatConnection = nil
            print("Gonshee movement stopped.")
        end
    end
    
    startGonshee()
    return stopGonshee
end

-- Create Window
local Window = Rayfield:CreateWindow({
    Name = "Arise Crossover [Fixed]",
    Icon = 0,
    LoadingTitle = "SkyX Hub",
    LoadingSubtitle = "by SkyX Team",
    Theme = "Default",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "SkyX_Arise"
    },
    Discord = {
        Enabled = false,
        Invite = "https://discord.gg/skyx",
        RememberJoins = true
    },
    KeySystem = false
})

-- Create Tabs
local MainTab = Window:CreateTab("Auto Farm", nil)
local IslandsTab = Window:CreateTab("Islands", nil)
local SettingsTab = Window:CreateTab("Settings", nil)

-- Main Section
local MainSection = MainTab:CreateSection("Main")

-- Auto Attack Toggle
local AutoAttackToggle = MainTab:CreateToggle({
    Name = "Auto Attack",
    CurrentValue = false,
    Flag = "AutoAttack",
    Callback = function(Value)
        globalEnv.AutoAttack = Value
        
        if Value then
            NotificationLib:Notify("Auto Attack", "Auto Attack Enabled", 3)
            globalEnv.stopAutoAttack = setupAutoAttack()
        else
            NotificationLib:Notify("Auto Attack", "Auto Attack Disabled", 3)
            if globalEnv.stopAutoAttack then
                globalEnv.stopAutoAttack()
            end
        end
    end,
})

-- Auto Farm NPC
local NPCSection = MainTab:CreateSection("NPC Farm")

-- Soondoo Farm Toggle
MainTab:CreateToggle({
    Name = "Soondoo Farm",
    CurrentValue = false,
    Flag = "SoondooFarm",
    Callback = function(Value)
        globalEnv.SoondooFarm = Value
        
        if Value then
            NotificationLib:Notify("Soondoo Farm", "Soondoo Farming Enabled", 3)
            globalEnv.stopSoondooFarm = setupSoondooFarm()
        else
            NotificationLib:Notify("Soondoo Farm", "Soondoo Farming Disabled", 3)
            if globalEnv.stopSoondooFarm then
                globalEnv.stopSoondooFarm()
            end
        end
    end,
})

-- Gonshee Farm Toggle
MainTab:CreateToggle({
    Name = "Gonshee Farm",
    CurrentValue = false,
    Flag = "GonsheeFarm",
    Callback = function(Value)
        globalEnv.GonsheeFarm = Value
        
        if Value then
            NotificationLib:Notify("Gonshee Farm", "Gonshee Farming Enabled", 3)
            globalEnv.stopGonsheeFarm = setupGonsheeFarm()
        else
            NotificationLib:Notify("Gonshee Farm", "Gonshee Farming Disabled", 3)
            if globalEnv.stopGonsheeFarm then
                globalEnv.stopGonsheeFarm()
            end
        end
    end,
})

-- Auto Skills Toggle
MainTab:CreateToggle({
    Name = "Auto Skills",
    CurrentValue = false,
    Flag = "AutoSkills",
    Callback = function(Value)
        globalEnv.AutoSkills = Value
        
        if Value then
            NotificationLib:Notify("Auto Skills", "Auto Skills Enabled", 3)
            
            -- Create a loop for auto skills
            if globalEnv.AutoSkillsConnection then
                globalEnv.AutoSkillsConnection:Disconnect()
            end
            
            globalEnv.AutoSkillsConnection = RunService.Heartbeat:Connect(function()
                if not globalEnv.AutoSkills then return end
                
                -- Use skills based on their cooldowns
                pcall(function()
                    -- Simulate keyboard presses for skills
                    for _, key in ipairs({"Q", "E", "R", "F"}) do
                        keypress(key)
                        wait(0.1)
                        keyrelease(key)
                    end
                    
                    -- Try to use remote events for skills if available
                    if bridgeNetEvent then
                        local skillArgs = {
                            [1] = {
                                [1] = {
                                    ["Event"] = "UseSkill",
                                    ["SkillName"] = "Skill1" -- Change based on game's actual skill names
                                },
                                [2] = "\5"
                            }
                        }
                        
                        bridgeNetEvent:FireServer(unpack(skillArgs))
                    end
                end)
                
                -- Don't spam skills, add delay
                wait(3)
            end)
        else
            NotificationLib:Notify("Auto Skills", "Auto Skills Disabled", 3)
            
            if globalEnv.AutoSkillsConnection then
                globalEnv.AutoSkillsConnection:Disconnect()
                globalEnv.AutoSkillsConnection = nil
            end
        end
    end,
})

-- Character Stats
local StatsSection = MainTab:CreateSection("Character Stats")

-- Attack Speed
MainTab:CreateSlider({
    Name = "Attack Speed",
    Range = {1, 10},
    Increment = 1,
    Suffix = "x",
    CurrentValue = 1,
    Flag = "AttackSpeed",
    Callback = function(Value)
        -- Attempt to modify attack speed if possible
        -- This is just a placeholder, actual implementation depends on game mechanics
        pcall(function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Stats") then
                -- Update attack speed stat if the game has this property
            end
        end)
        
        NotificationLib:Notify("Attack Speed", "Set to " .. Value .. "x", 3)
    end,
})

-- Islands Tab
local IslandSection = IslandsTab:CreateSection("Teleport to Islands")

-- Island Teleport Buttons
local islands = {
    ["Main Island"] = Vector3.new(466.0532531738281, 27.771806716918945, 92.96633911132812),
    ["Fire Island"] = Vector3.new(558.342346, 36.8911018, -20.6030388),
    ["Ice Island"] = Vector3.new(577.832947, 27.6630726, -161.732498),
    ["Training Area"] = Vector3.new(615.902832, 38.4664612, -23.1269665)
}

for islandName, position in pairs(islands) do
    IslandsTab:CreateButton({
        Name = "Teleport to " .. islandName,
        Callback = function()
            if Character and HumanoidRootPart then
                -- Use tweening for smoother teleport
                local tweenInfo = TweenInfo.new(
                    1, -- Time
                    Enum.EasingStyle.Quad,
                    Enum.EasingDirection.Out,
                    0, -- RepeatCount
                    false, -- Reverses
                    0 -- DelayTime
                )
                
                local tween = TweenService:Create(
                    HumanoidRootPart, 
                    tweenInfo, 
                    {CFrame = CFrame.new(position)}
                )
                
                tween:Play()
                NotificationLib:Notify("Teleport", "Teleporting to " .. islandName, 3)
            end
        end,
    })
end

-- Settings Tab
local SettingsSection = SettingsTab:CreateSection("Script Settings")

SettingsTab:CreateToggle({
    Name = "Discord Webhooks",
    CurrentValue = true,
    Flag = "Webhooks",
    Callback = function(Value)
        globalEnv.SkyXConfig.WebhookEnabled = Value
        NotificationLib:Notify("Settings", "Webhooks " .. (Value and "Enabled" or "Disabled"), 3)
    end,
})

SettingsTab:CreateButton({
    Name = "Join Discord",
    Callback = function()
        pcall(function()
            if setclipboard then
                setclipboard("https://discord.gg/skyx")
                NotificationLib:Notify("Discord", "Invite link copied to clipboard!", 3)
            else
                NotificationLib:Notify("Discord", "Join: discord.gg/skyx", 5)
            end
        end)
    end,
})

SettingsTab:CreateButton({
    Name = "Destroy UI",
    Callback = function()
        -- Clean up all connections
        if globalEnv.stopAutoAttack then
            globalEnv.stopAutoAttack()
        end
        
        if globalEnv.stopSoondooFarm then
            globalEnv.stopSoondooFarm()
        end
        
        if globalEnv.stopGonsheeFarm then
            globalEnv.stopGonsheeFarm()
        end
        
        if globalEnv.AutoSkillsConnection then
            globalEnv.AutoSkillsConnection:Disconnect()
            globalEnv.AutoSkillsConnection = nil
        end
        
        globalEnv.AriseCrossoverScriptLoaded = false
        
        if not isFallbackUI then
            pcall(function()
                Rayfield:Destroy()
            end)
        end
        
        NotificationLib:Notify("UI Destroyed", "SkyX Hub UI has been destroyed", 3)
    end,
})

-- Credits Section
local CreditsSection = SettingsTab:CreateSection("Credits")

SettingsTab:CreateParagraph({
    Title = "Credits",
    Content = "Original script by Naaellx\nFixed and improved by SkyX Team\nMobile compatibility by SkyX"
})

-- Welcome notification
NotificationLib:Notify("SkyX Hub", "Arise Crossover script loaded successfully!", 5)

-- If it's a mobile executor, show special notification
if globalEnv.SkyXConfig.IsMobile then
    wait(1)
    NotificationLib:Notify("Mobile Mode", "Mobile optimizations enabled for " .. globalEnv.SkyXConfig.Platform, 5)
end
