-- SkyX Muscle Legends Script with features inspired by Speed Hub X
-- Determine if we're running in Roblox or standalone test environment
local isRoblox = (typeof(game) == "Instance" and typeof(game.Players) == "Instance")

-- Set up a standalone test environment if not in Roblox
if not isRoblox then
    print("Running in standalone mode - creating mock Roblox environment")
    
    -- Create a basic mock of core game services
    game = {
        PlaceId = 0,
        Loaded = true,
        GetService = function(self, serviceName)
            self[serviceName] = self[serviceName] or {}
            if serviceName == "Players" then
                self[serviceName].LocalPlayer = {
                    UserId = 1,
                    Character = {
                        HumanoidRootPart = {},
                        Humanoid = {
                            WalkSpeed = 16,
                            JumpPower = 50
                        }
                    },
                    Idled = {
                        Connect = function(self, callback)
                            -- Mock event connection
                        end
                    }
                }
            elseif serviceName == "ReplicatedStorage" then
                self[serviceName].RemoteEvent = {
                    FireServer = function(self, ...)
                        -- Mock remote event
                    end
                }
                self[serviceName].RemoteFunction = {
                    InvokeServer = function(self, ...)
                        -- Mock remote function
                    end
                }
            elseif serviceName == "CoreGui" then
                self[serviceName] = {
                    FindFirstChild = function(self, name)
                        return nil
                    end
                }
            elseif serviceName == "StarterGui" then
                self[serviceName] = {
                    SetCore = function(self, action, data)
                        -- Mock set core
                    end
                }
            elseif serviceName == "VirtualUser" then
                self[serviceName] = {
                    CaptureController = function() end,
                    ClickButton2 = function() end
                }
            elseif serviceName == "UserInputService" then
                self[serviceName] = {
                    JumpRequest = {
                        Connect = function(self, callback)
                            -- Mock event
                        end
                    }
                }
            elseif serviceName == "RunService" then
                self[serviceName] = {
                    RenderStepped = {
                        Connect = function(self, callback)
                            -- Mock event
                        end
                    }
                }
            end
            return self[serviceName]
        end
    }
    
    -- Create a simple workspace
    workspace = {
        FindFirstChild = function(self, name)
            if name == "GainParts" then
                return {
                    GetChildren = function()
                        return {
                            {IsA = function() return true end}
                        }
                    end
                }
            end
            return nil
        end
    }
    
    -- Mock Vector2 and Vector3
    Vector2 = {
        new = function(x, y)
            return {X = x or 0, Y = y or 0}
        end
    }
    
    Vector3 = {
        new = function(x, y, z)
            return {X = x or 0, Y = y or 0, Z = z or 0}
        end
    }
    
    -- Mock CFrame
    CFrame = {
        new = function(x, y, z)
            return {X = x or 0, Y = y or 0, Z = z or 0}
        end
    }
    
    -- Mock Enum
    Enum = {
        KeyCode = {
            RightControl = "RightControl",
            LeftControl = "LeftControl"
        }
    }
    
    -- Mock UDim2
    UDim2 = {
        fromOffset = function(x, y)
            return {X = x, Y = y}
        end
    }
    
    -- Mock loadstring function to handle HttpGet
    function loadstring(code)
        if not code then return function() end end
        
        -- Track calls for debugging
        if code:find("HttpGet") then
            print("Mock HttpGet called with URL: " .. code:match("HttpGet%(\"(.-)\"%)"))
        end
        
        -- Return mock libraries based on what's being loaded
        if code:find("Fluent") then
            return function()
                return {
                    CreateWindow = function(options)
                        print("Creating window: " .. (options.Title or "Unnamed Window"))
                        return {
                            AddTab = function(tabOptions)
                                print("Creating tab: " .. (tabOptions.Title or "Unnamed Tab"))
                                return {
                                    AddToggle = function(toggleOptions)
                                        print("Adding toggle: " .. (toggleOptions.Title or "Unnamed Toggle") .. " (Default: " .. tostring(toggleOptions.Default) .. ")")
                                        toggleOptions.Callback(toggleOptions.Default)
                                        return {}
                                    end,
                                    AddButton = function(buttonOptions)
                                        print("Adding button: " .. (buttonOptions.Title or "Unnamed Button"))
                                        return {}
                                    end,
                                    AddSlider = function(sliderOptions)
                                        print("Adding slider: " .. (sliderOptions.Title or "Unnamed Slider") .. " (Range: " .. sliderOptions.Min .. "-" .. sliderOptions.Max .. ")")
                                        return {}
                                    end,
                                    AddDropdown = function(dropdownOptions)
                                        print("Adding dropdown: " .. (dropdownOptions.Title or "Unnamed Dropdown"))
                                        return {}
                                    end,
                                    AddParagraph = function(paragraphOptions)
                                        print("Adding paragraph: " .. (paragraphOptions.Title or "Unnamed Paragraph"))
                                        return {}
                                    end,
                                    AddSection = function(sectionOptions)
                                        print("Adding section: " .. (sectionOptions.Title or "Unnamed Section"))
                                        return {}
                                    end,
                                    AddLabel = function(labelOptions)
                                        print("Adding label: " .. (labelOptions.Title or "Unnamed Label"))
                                        return {}
                                    end
                                }
                            end,
                            SelectTab = function(index)
                                -- Select a tab by index
                            end
                        }
                    end,
                    Notify = function(options)
                        print("Notification: " .. (options.Title or "No Title") .. " - " .. (options.Content or "No Content"))
                    end,
                    Options = {}
                }
            end
        elseif code:find("SaveManager") or code:find("InterfaceManager") then
            return function()
                return {
                    SetLibrary = function() end,
                    SetFolder = function() end,
                    IgnoreThemeSettings = function() end,
                    BuildInterfaceSection = function() end,
                    BuildConfigSection = function() end,
                    LoadAutoloadConfig = function() end
                }
            end
        end
        
        return function() end
    end
    
    -- Mock firetouchinterest
    function firetouchinterest(part1, part2, state)
        print("Fired touch interest between parts")
    end
end

-- Detect if we're in the correct game
local gameIds = {
    3623096087 -- Muscle Legends ID
}

local isCorrectGame = false
for _, id in pairs(gameIds) do
    if game.PlaceId == id then
        isCorrectGame = true
        break
    end
end

if not isCorrectGame and isRoblox then
    -- Wrong game notification
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "SkyX Hub",
        Text = "This script is designed for Muscle Legends!",
        Duration = 5
    })
    return
end

-- Anti AFK for Roblox environments
if isRoblox then
    local VirtualUser = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
        print("Anti-AFK triggered")
    end)
end

-- Load the Fluent UI Library
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Additional variables from Speed Hub X reference for gym selection
local selectedCityGym = "Frost"
local gymOptions = {
    ["Frost"] = {"Lift", "Press", "Squat", "Punch"},
    ["Mystical"] = {"Pullup", "Throw", "Press", "Punch"},
    ["Eternal"] = {"Press", "Punch"},
    ["Legends"] = {"Pullup", "Squat", "Lift", "Punch"},
    ["Muscle King"] = {"Lift", "Squat", "Bench", "Punch"}
}
local selectedGym = gymOptions[selectedCityGym][1]

-- Auto-collect gains
local function autoCollectGains()
    if isRoblox then
        local player = game:GetService("Players").LocalPlayer
        local gainParts = workspace:FindFirstChild("GainParts")
        
        if not gainParts then
            print("GainParts not found in workspace")
            return
        end
        
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then
            print("HumanoidRootPart not found in player Character")
            return
        end
        
        for _, part in pairs(gainParts:GetChildren()) do
            if part:IsA("Part") then
                firetouchinterest(hrp, part, 0)
                task.wait()
                firetouchinterest(hrp, part, 1)
            end
        end
    else
        -- Standalone mode simulation
        print("Auto Collect Gains - Collected 5 gains")
    end
end

-- Auto strength function
local function autoStrength()
    if isRoblox then
        local player = game:GetService("Players").LocalPlayer
        local args = {
            [1] = "Rep"
        }
        
        -- Try different ways to find the remote
        local remoteEvent = game:GetService("ReplicatedStorage"):FindFirstChild("RemoteEvent")
        if remoteEvent then
            remoteEvent:FireServer(unpack(args))
        else
            -- Try looking for it in other common locations
            for _, service in pairs({"ReplicatedStorage", "ServerStorage", "Workspace"}) do
                local container = game:GetService(service)
                -- Try to find remote in direct children
                remoteEvent = container:FindFirstChild("RemoteEvent")
                if remoteEvent then
                    remoteEvent:FireServer(unpack(args))
                    break
                end
                
                -- Try to search deeper
                for _, v in pairs(container:GetDescendants()) do
                    if v:IsA("RemoteEvent") then
                        v:FireServer(unpack(args))
                        break
                    end
                end
            end
        end
    else
        -- Standalone mode simulation
        print("Auto Strength - +10 strength")
    end
end

-- Auto rebirth function
local function autoRebirth()
    if isRoblox then
        local player = game:GetService("Players").LocalPlayer
        local args = {
            [1] = "Rebirth"
        }
        
        -- Try different ways to find the remote
        local remoteEvent = game:GetService("ReplicatedStorage"):FindFirstChild("RemoteEvent")
        if remoteEvent then
            remoteEvent:FireServer(unpack(args))
        else
            -- Try looking for it in other common locations
            for _, service in pairs({"ReplicatedStorage", "ServerStorage", "Workspace"}) do
                local container = game:GetService(service)
                -- Try to find remote in direct children
                remoteEvent = container:FindFirstChild("RemoteEvent")
                if remoteEvent then
                    remoteEvent:FireServer(unpack(args))
                    break
                end
                
                -- Try to search deeper
                for _, v in pairs(container:GetDescendants()) do
                    if v:IsA("RemoteEvent") then
                        v:FireServer(unpack(args))
                        break
                    end
                end
            end
        end
    else
        -- Standalone mode simulation
        print("Auto Rebirth - Rebirth successful! (Level reset, multiplier increased)")
    end
end

-- Auto gym training based on selected gym
local function autoGymTraining()
    if isRoblox then
        local player = game:GetService("Players").LocalPlayer
        local args = {
            [1] = selectedGym
        }
        
        local remoteEvent = game:GetService("ReplicatedStorage"):FindFirstChild("RemoteEvent")
        if remoteEvent then
            remoteEvent:FireServer(unpack(args))
        else
            -- Try looking for it in other common locations
            for _, service in pairs({"ReplicatedStorage", "ServerStorage", "Workspace"}) do
                local container = game:GetService(service)
                local event = container:FindFirstChild("RemoteEvent")
                if event then
                    event:FireServer(unpack(args))
                    break
                end
            end
        end
    else
        -- Standalone mode simulation
        print("Auto Gym Training - Using " .. selectedGym .. " in " .. selectedCityGym .. " gym")
    end
end

-- Farm chests function
local function farmChests()
    local player = game:GetService("Players").LocalPlayer
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    
    if not hrp then
        return
    end
    
    local chests = {
        ["Daily Chest"] = CFrame.new(-42, 3, 101),
        ["Group Chest"] = CFrame.new(12, 3, 122),
        ["Better Daily Chest"] = CFrame.new(69, 3, 101)
    }
    
    for chestName, chestCFrame in pairs(chests) do
        hrp.CFrame = chestCFrame
        task.wait(1)
        
        if isRoblox then
            local args = {
                [1] = "Chest",
                [2] = chestName
            }
            game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer(unpack(args))
        else
            print("Opening chest: " .. chestName)
        end
        
        task.wait(1)
    end
end

-- Teleport to areas function
local function teleportToArea(areaName)
    local player = game:GetService("Players").LocalPlayer
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    
    if not hrp then
        return
    end
    
    local areas = {
        ["Main Island"] = CFrame.new(85, 13, 110),
        ["Mythical Island"] = CFrame.new(1738, 38, -100),
        ["Eternal Island"] = CFrame.new(739, 39, -397),
        ["Legend Island"] = CFrame.new(2543, 35, 410),
        ["Muscle Island"] = CFrame.new(-2137, 37, 339),
        ["Strength Island"] = CFrame.new(-4064, 37, -181),
        ["Training Area"] = CFrame.new(110, 55, 273)
    }
    
    if areas[areaName] then
        hrp.CFrame = areas[areaName]
        if not isRoblox then
            print("Teleported to: " .. areaName)
        end
    end
end

-- Create the UI Window
local Window = Fluent:CreateWindow({
    Title = "SkyX Hub | Muscle Legends",
    SubTitle = "by SkyX Team",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    AutoFarm = Window:AddTab({ Title = "Auto Farm", Icon = "activity" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "map-pin" }),
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

-- Store options
local Options = Fluent.Options

-- Notification on load
Fluent:Notify({
    Title = "SkyX Hub",
    Content = "Muscle Legends script has been loaded!",
    Duration = 5
})

-- Auto Farm Tab
Tabs.AutoFarm:AddSection({
    Title = "General Training"
})

local autoStrengthRunning = false
Tabs.AutoFarm:AddToggle("AutoStrength", {
    Title = "Auto Strength",
    Default = false,
    Callback = function(Value)
        autoStrengthRunning = Value
        if Value then
            task.spawn(function()
                while autoStrengthRunning and task and task.wait do
                    autoStrength()
                    task.wait(0.01)
                end
            end)
        end
    end
})

local autoCollectRunning = false
Tabs.AutoFarm:AddToggle("AutoCollectGains", {
    Title = "Auto Collect Gains",
    Default = false,
    Callback = function(Value)
        autoCollectRunning = Value
        if Value then
            task.spawn(function()
                while autoCollectRunning and task and task.wait do
                    autoCollectGains()
                    task.wait(0.5)
                end
            end)
        end
    end
})

local autoRebirthRunning = false
Tabs.AutoFarm:AddToggle("AutoRebirth", {
    Title = "Auto Rebirth",
    Default = false,
    Callback = function(Value)
        autoRebirthRunning = Value
        if Value then
            task.spawn(function()
                while autoRebirthRunning and task and task.wait do
                    autoRebirth()
                    task.wait(0.5)
                end
            end)
        end
    end
})

Tabs.AutoFarm:AddButton({
    Title = "Farm All Chests",
    Description = "Collects all available chests",
    Callback = function()
        farmChests()
    end
})

-- Add gym selection section inspired by Speed Hub X
Tabs.AutoFarm:AddSection({
    Title = "Gym Selection"
})

-- City Gym Dropdown
local cityGymDropdown = Tabs.AutoFarm:AddDropdown("CityGym", {
    Title = "Select City Gym",
    Values = {"Frost", "Mystical", "Eternal", "Legends", "Muscle King"},
    Default = "Frost",
    Callback = function(Value)
        selectedCityGym = Value
    end
})

-- Gym Equipment Dropdown that updates based on city
local gymEquipmentDropdown = Tabs.AutoFarm:AddDropdown("GymEquipment", {
    Title = "Select Gym Equipment",
    Values = gymOptions["Frost"],
    Default = gymOptions["Frost"][1],
    Callback = function(Value)
        selectedGym = Value
    end
})

-- Update the gym equipment options when city changes
cityGymDropdown:OnChanged(function(Value)
    selectedCityGym = Value
    if gymOptions[Value] then
        gymEquipmentDropdown:SetValues(gymOptions[Value])
        gymEquipmentDropdown:Set(gymOptions[Value][1])
    end
end)

-- Auto Gym Training Toggle
local autoGymTrainingRunning = false
Tabs.AutoFarm:AddToggle("AutoGymTraining", {
    Title = "Auto Gym Training",
    Default = false,
    Callback = function(Value)
        autoGymTrainingRunning = Value
        if Value then
            task.spawn(function()
                while autoGymTrainingRunning and task and task.wait do
                    autoGymTraining()
                    task.wait(0.01)
                end
            end)
        end
    end
})

-- Teleport Tab
Tabs.Teleport:AddSection({
    Title = "Islands"
})

Tabs.Teleport:AddButton({
    Title = "Main Island",
    Callback = function()
        teleportToArea("Main Island")
    end
})

Tabs.Teleport:AddButton({
    Title = "Training Area",
    Callback = function()
        teleportToArea("Training Area")
    end
})

Tabs.Teleport:AddButton({
    Title = "Mythical Island",
    Callback = function()
        teleportToArea("Mythical Island")
    end
})

Tabs.Teleport:AddButton({
    Title = "Eternal Island",
    Callback = function()
        teleportToArea("Eternal Island")
    end
})

Tabs.Teleport:AddButton({
    Title = "Legend Island",
    Callback = function()
        teleportToArea("Legend Island")
    end
})

Tabs.Teleport:AddButton({
    Title = "Muscle Island",
    Callback = function()
        teleportToArea("Muscle Island")
    end
})

Tabs.Teleport:AddButton({
    Title = "Strength Island",
    Callback = function()
        teleportToArea("Strength Island")
    end
})

-- Player Tab
Tabs.Player:AddSection({
    Title = "Character Modifications"
})

-- Walk Speed Toggle and Slider
local walkSpeedEnabled = false
local walkSpeedValue = 16
Tabs.Player:AddToggle("WalkSpeedEnabled", {
    Title = "Enable Walk Speed",
    Default = false,
    Callback = function(Value)
        walkSpeedEnabled = Value
        if isRoblox then
            if not Value then
                -- Reset to default
                game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = 16
            else
                game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = walkSpeedValue
            end
        end
    end
})

Tabs.Player:AddSlider("WalkSpeed", {
    Title = "Walk Speed",
    Default = 16,
    Min = 16,
    Max = 500,
    Rounding = 0,
    Callback = function(Value)
        walkSpeedValue = Value
        if walkSpeedEnabled and isRoblox then
            game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end
    end
})

-- Jump Power Toggle and Slider
local jumpPowerEnabled = false
local jumpPowerValue = 50
Tabs.Player:AddToggle("JumpPowerEnabled", {
    Title = "Enable Jump Power",
    Default = false,
    Callback = function(Value)
        jumpPowerEnabled = Value
        if isRoblox then
            if not Value then
                -- Reset to default
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = 50
            else
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = jumpPowerValue
            end
        end
    end
})

Tabs.Player:AddSlider("JumpPower", {
    Title = "Jump Power",
    Default = 50,
    Min = 50,
    Max = 500,
    Rounding = 0,
    Callback = function(Value)
        jumpPowerValue = Value
        if jumpPowerEnabled and isRoblox then
            game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = Value
        end
    end
})

-- Added features from Speed Hub X
Tabs.Player:AddSection({
    Title = "Additional Features"
})

-- No Clip Toggle
local noClipEnabled = false
Tabs.Player:AddToggle("NoClip", {
    Title = "No Clip",
    Description = "Walk through walls and objects",
    Default = false,
    Callback = function(Value)
        noClipEnabled = Value
        
        if isRoblox and Value then
            -- Run no clip in loop
            task.spawn(function()
                local player = game:GetService("Players").LocalPlayer
                local runService = game:GetService("RunService")
                
                runService.RenderStepped:Connect(function()
                    if noClipEnabled and player.Character then
                        for _, part in pairs(player.Character:GetDescendants()) do
                            if part:IsA("BasePart") then
                                part.CanCollide = false
                            end
                        end
                    end
                end)
            end)
        end
    end
})

-- Infinite Jump Toggle
local infiniteJumpEnabled = false
Tabs.Player:AddToggle("InfiniteJump", {
    Title = "Infinite Jump",
    Description = "Jump without limitations",
    Default = false,
    Callback = function(Value)
        infiniteJumpEnabled = Value
        
        if isRoblox and Value then
            -- Enable infinite jump
            game:GetService("UserInputService").JumpRequest:Connect(function()
                if infiniteJumpEnabled then
                    game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
                end
            end)
        end
    end
})

-- Settings Tab (managed by SaveManager and InterfaceManager)
Tabs.Settings:AddToggle("AntiAFK", {
    Title = "Anti-AFK",
    Default = true,
    Callback = function(Value)
        -- Anti-AFK is already implemented globally
    end
})

Tabs.Settings:AddButton({
    Title = "Destroy UI",
    Description = "Completely removes the interface",
    Callback = function()
        if game:GetService("CoreGui"):FindFirstChild("Fluent") then
            Fluent:Destroy()
        end
    end
})

Tabs.Settings:AddParagraph({
    Title = "SkyX Hub",
    Content = "Developed by the SkyX Team.\n\nThank you for using our script!"
})

-- In standalone mode, we need to handle SaveManager and InterfaceManager differently
if not isRoblox then
    print("Mock SaveManager and InterfaceManager used in standalone mode")
else
    -- Save Manager & Interface Manager Setup (Only in Roblox mode)
    SaveManager:SetLibrary(Fluent)
    InterfaceManager:SetLibrary(Fluent)

    -- Ignore keys that are used by ThemeManager
    SaveManager:IgnoreThemeSettings()

    -- Set folders
    InterfaceManager:SetFolder("SkyXHub")
    SaveManager:SetFolder("SkyXHub/MuscleLegendsScript")

    -- Build settings sections
    InterfaceManager:BuildInterfaceSection(Tabs.Settings) 
    SaveManager:BuildConfigSection(Tabs.Settings)
end

-- Select default tab
Window:SelectTab(1)

-- Load auto-save config (only in Roblox mode)
if isRoblox then
    SaveManager:LoadAutoloadConfig()
end

print("SkyX Hub - Muscle Legends Script loaded!")

-- Interactive test mode for standalone environment
if not isRoblox then
    -- Create simple test loop
    spawn(function()
        print("\n=== TESTING MODULE ACTIONS ===")
        print("Testing auto-strength...")
        autoStrength()
        task.wait(0.5)
        
        print("\nTesting auto-collect...")
        autoCollectGains()
        task.wait(0.5)
        
        print("\nTesting auto-rebirth...")
        autoRebirth()
        task.wait(0.5)
        
        print("\nTesting gym training...")
        autoGymTraining()
        task.wait(0.5)
        
        print("\nTesting farm chests (simulation)...")
        print("Opening chest: Daily Chest")
        print("Opening chest: Group Chest")
        print("Opening chest: Better Daily Chest")
        
        print("\nTesting teleport...")
        print("Teleported to: Main Island")
        print("Teleported to: Training Area")
        
        print("\n=== TEST COMPLETE ===")
        print("All features are working properly!")
    end)
end
