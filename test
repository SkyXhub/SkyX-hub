--[[    dd
    OrionX GitHub Example
    This script demonstrates how to use OrionX UI according to the official GitHub documentation
]]

-- Load the OrionX UI Library from GitHub
local OrionLib = loadstring(game:HttpGet('https://raw.githubusercontent.com/SkyXhub/OrionX-UI/refs/heads/main/OrionX-UI'))() 

-- Create a window with all options
local Window = OrionLib:MakeWindow({
    Name = "OrionX GitHub Example",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "OrionXGitHub",
    IntroEnabled = true,
    IntroText = "OrionX UI",
    IntroIcon = "home", -- Using named icon
    Icon = "home", -- Using named icon
    CloseCallback = function()
        print("Window closed")
    end
})

-- Create Main Tab
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "home", -- Using named icon
    PremiumOnly = false
})

-- Add a section
local InfoSection = MainTab:AddSection({
    Name = "Information"
})

-- Add a label
InfoSection:AddLabel("Welcome to OrionX UI")

-- Add a paragraph
InfoSection:AddParagraph("GitHub Example", "This example demonstrates OrionX UI features based on GitHub documentation")

-- Create Controls Tab
local ControlsTab = Window:MakeTab({
    Name = "Controls",
    Icon = "settings", -- Using named icon
    PremiumOnly = false
})

-- Add a basic section
local BasicSection = ControlsTab:AddSection({
    Name = "Basic Controls"
})

-- Add a button
BasicSection:AddButton({
    Name = "Click Me",
    Callback = function()
        OrionLib:MakeNotification({
            Name = "Button Pressed",
            Content = "You clicked the button!",
            Image = "check", -- Using named icon
            Time = 5
        })
    end    
})

-- Add a toggle with flag for config saving
local toggle = BasicSection:AddToggle({
    Name = "Toggle Feature",
    Default = false,
    Save = true,
    Flag = "featureToggle",
    Callback = function(Value)
        print("Toggle value:", Value)
    end    
})

-- Add a slider with config saving
local slider = BasicSection:AddSlider({
    Name = "Speed Adjustment",
    Min = 0,
    Max = 100,
    Default = 50,
    Color = Color3.fromRGB(255, 100, 100),
    Increment = 1,
    ValueName = "speed",
    Save = true,
    Flag = "speedSlider",
    Callback = function(Value)
        print("Speed value:", Value)
    end    
})

-- Add a dropdown with config saving
local dropdown = BasicSection:AddDropdown({
    Name = "Select Option",
    Default = "Option 1",
    Options = {"Option 1", "Option 2", "Option 3", "Option 4"},
    Save = true,
    Flag = "optionDropdown",
    Callback = function(Option)
        print("Selected option:", Option)
    end    
})

-- Add a color picker with config saving
local colorpicker = BasicSection:AddColorpicker({
    Name = "UI Color",
    Default = Color3.fromRGB(0, 120, 255),
    Save = true,
    Flag = "uiColor",
    Callback = function(Value)
        print("Selected color:", Value)
    end    
})

-- Create Themes Tab
local ThemesTab = Window:MakeTab({
    Name = "Themes",
    Icon = "brush", -- Using named icon
    PremiumOnly = false
})

-- Add themes section
local ThemesSection = ThemesTab:AddSection({
    Name = "Theme Selection"
})

-- Add buttons for different built-in themes
ThemesSection:AddButton({
    Name = "Default Theme",
    Callback = function()
        OrionLib.Themes:SetTheme("Default")
        OrionLib:MakeNotification({
            Name = "Theme Changed",
            Content = "Applied Default theme",
            Image = "check",
            Time = 3
        })
    end    
})

ThemesSection:AddButton({
    Name = "Dark Theme",
    Callback = function()
        OrionLib.Themes:SetTheme("Dark")
        OrionLib:MakeNotification({
            Name = "Theme Changed",
            Content = "Applied Dark theme",
            Image = "check",
            Time = 3
        })
    end    
})

ThemesSection:AddButton({
    Name = "Ocean Theme",
    Callback = function()
        OrionLib.Themes:SetTheme("Ocean")
        OrionLib:MakeNotification({
            Name = "Theme Changed",
            Content = "Applied Ocean theme",
            Image = "check",
            Time = 3
        })
    end    
})

-- Create a custom theme
ThemesSection:AddButton({
    Name = "Custom Purple Theme",
    Callback = function()
        -- Create a custom theme if it doesn't exist
        OrionLib.Themes:AddTheme("Purple", {
            Main = Color3.fromRGB(40, 25, 70),
            Second = Color3.fromRGB(50, 35, 90),
            Stroke = Color3.fromRGB(80, 60, 120),
            Divider = Color3.fromRGB(80, 60, 120),
            Text = Color3.fromRGB(240, 230, 255),
            TextDark = Color3.fromRGB(170, 160, 190)
        })
        
        -- Apply the custom theme
        OrionLib.Themes:SetTheme("Purple")
        OrionLib:MakeNotification({
            Name = "Theme Changed",
            Content = "Applied custom Purple theme",
            Image = "check",
            Time = 3
        })
    end    
})

-- Create Mobile Tab
local MobileTab = Window:MakeTab({
    Name = "Mobile",
    Icon = "phone", -- Using named icon
    PremiumOnly = false
})

-- Add mobile settings section
local MobileSection = MobileTab:AddSection({
    Name = "Mobile Settings"
})

-- Add toggle button for mobile toggle visibility
MobileSection:AddToggle({
    Name = "Show Mobile Toggle",
    Default = true,
    Callback = function(Value)
        OrionLib.Mobile:SetToggleVisibility(Value)
        OrionLib:MakeNotification({
            Name = "Mobile Setting Changed",
            Content = "Mobile toggle is now " .. (Value and "visible" or "hidden"),
            Image = "info",
            Time = 3
        })
    end    
})

-- Add a dropdown for mobile toggle position
MobileSection:AddDropdown({
    Name = "Toggle Position",
    Default = "TopRight",
    Options = {"TopRight", "TopLeft", "BottomRight", "BottomLeft"},
    Callback = function(Position)
        OrionLib.Mobile:SetTogglePosition(Position)
        OrionLib:MakeNotification({
            Name = "Mobile Setting Changed",
            Content = "Mobile toggle position set to " .. Position,
            Image = "info",
            Time = 3
        })
    end    
})

-- Using flags to access values
local FlagsTab = Window:MakeTab({
    Name = "Flags",
    Icon = "flag", -- Using named icon
    PremiumOnly = false
})

-- Add flags demo section
local FlagsSection = FlagsTab:AddSection({
    Name = "Flags Demonstration"
})

-- Add button to show how to access flag values
FlagsSection:AddButton({
    Name = "Show All Values",
    Callback = function()
        -- Access and print all flag values
        local toggleValue = OrionLib.Flags["featureToggle"].Value
        local sliderValue = OrionLib.Flags["speedSlider"].Value
        local dropdownValue = OrionLib.Flags["optionDropdown"].Value
        
        -- Create a notification showing the values
        OrionLib:MakeNotification({
            Name = "Current Values",
            Content = "Toggle: " .. tostring(toggleValue) .. 
                     "\nSlider: " .. tostring(sliderValue) .. 
                     "\nDropdown: " .. tostring(dropdownValue),
            Image = "info",
            Time = 5
        })
    end    
})

-- Add buttons to manipulate UI elements using flags
FlagsSection:AddButton({
    Name = "Toggle Feature On",
    Callback = function()
        toggle:Set(true) -- Using the toggle variable
    end    
})

FlagsSection:AddButton({
    Name = "Set Speed to 75",
    Callback = function()
        slider:Set(75) -- Using the slider variable
    end    
})

FlagsSection:AddButton({
    Name = "Change Dropdown to Option 3",
    Callback = function()
        dropdown:Set("Option 3") -- Using the dropdown variable
    end    
})

FlagsSection:AddButton({
    Name = "Change Color to Green",
    Callback = function()
        colorpicker:Set(Color3.fromRGB(0, 255, 0)) -- Using the colorpicker variable
    end    
})

-- Initialize the UI (REQUIRED)
OrionLib:Init()

-- Add a friendly completion message
print("OrionX GitHub example initialized!")
