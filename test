--[[  xx
    SkyX Complete OrionX UI - Executor Example
    This script demonstrates the correct OrionX-UI syntax based on the documentation
]]--

-- Load the SkyX modded OrionX UI Library from GitHub
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/SkyXhub/OrionX-UI/refs/heads/main/OrionX-UI')))()

-- Create main window
local Window = OrionLib:MakeWindow({
    Name = "SkyX Executor Example", 
    HidePremium = false,
    SaveConfig = true, 
    ConfigFolder = "SkyXConfig",
    IntroEnabled = true,
    IntroText = "SkyX Enhanced",
    IntroIcon = "home" -- Using icon name from the official list
})

-- No custom configuration required, the default settings will be used

-- Create main tab
local MainTab = Window:MakeTab({
    Name = "Main Functions",
    Icon = "home", -- Using icon name from the official list
    PremiumOnly = false
})

-- Create ESP section
local ESPSection = MainTab:AddSection({
    Name = "ESP Options"
})

-- ESP Toggle with Save flag
local ESPToggle = ESPSection:AddToggle({
    Name = "Enable ESP",
    Default = false,
    Save = true,
    Flag = "espEnabled",
    Callback = function(Value)
        -- ESP Logic would go here
        if Value then
            OrionLib:MakeNotification({
                Name = "ESP Enabled",
                Content = "ESP has been activated",
                Image = "check",
                Time = 5
            })
        else
            OrionLib:MakeNotification({
                Name = "ESP Disabled",
                Content = "ESP has been deactivated",
                Image = "error",
                Time = 5
            })
        end
    end    
})

-- ESP Color Picker with Save flag
local ESPColorPicker = ESPSection:AddColorpicker({
    Name = "ESP Color",
    Default = Color3.fromRGB(255, 0, 0),
    Save = true,
    Flag = "espColor",
    Callback = function(Value)
        -- Color update logic would go here
        OrionLib:MakeNotification({
            Name = "ESP Color Updated",
            Content = "ESP color has been changed",
            Image = "info",
            Time = 3
        })
    end  
})

-- ESP Distance Slider with Save flag
local ESPDistanceSlider = ESPSection:AddSlider({
    Name = "ESP Distance",
    Min = 10,
    Max = 1000,
    Default = 500,
    Color = Color3.fromRGB(0, 120, 215),
    Increment = 10,
    Save = true,
    Flag = "espDistance",
    ValueName = "studs",
    Callback = function(Value)
        -- Distance update logic would go here
        print("ESP Distance set to: " .. Value)
    end    
})

-- Create Movement section
local MovementSection = MainTab:AddSection({
    Name = "Movement Options"
})

-- Speed Slider with Save flag
local SpeedSlider = MovementSection:AddSlider({
    Name = "Walk Speed",
    Min = 16,
    Max = 500,
    Default = 16,
    Color = Color3.fromRGB(0, 120, 215),
    Increment = 1,
    Save = true,
    Flag = "walkSpeed",
    ValueName = "speed",
    Callback = function(Value)
        -- This is where the actual speed change would happen
        pcall(function()
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end)
    end    
})

-- Flight Toggle with Save flag
local FlightToggle = MovementSection:AddToggle({
    Name = "Enable Flight",
    Default = false,
    Save = true,
    Flag = "flightEnabled",
    Callback = function(Value)
        -- Flight logic would go here
        OrionLib:MakeNotification({
            Name = Value and "Flight Enabled" or "Flight Disabled",
            Content = Value and "You can now fly around the map" or "Flight has been deactivated",
            Image = "document",
            Time = 5
        })
    end    
})

-- Create Teleport section
local TeleportSection = MainTab:AddSection({
    Name = "Teleport Options"
})

-- Teleport to Player Dropdown
local PlayerDropdown = TeleportSection:AddDropdown({
    Name = "Select Player",
    Default = "",
    Options = {"Loading players..."},
    Save = false,
    Flag = "selectedPlayer",
    Callback = function(Value)
        -- Logic for saving selected player
        print("Selected player: " .. Value)
    end    
})

-- Function to refresh player list
local function RefreshPlayerList()
    local Players = game:GetService("Players")
    local playerNames = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            table.insert(playerNames, player.Name)
        end
    end
    
    if #playerNames == 0 then
        table.insert(playerNames, "No other players")
    end
    
    -- Use the Refresh method as shown in documentation
    PlayerDropdown:Refresh(playerNames, true)
end

-- Refresh the player list
RefreshPlayerList()

-- Refresh Button
TeleportSection:AddButton({
    Name = "Refresh Player List",
    Callback = function()
        RefreshPlayerList()
        OrionLib:MakeNotification({
            Name = "Player List Updated",
            Content = "The player list has been refreshed",
            Image = "refresh",
            Time = 3
        })
    end    
})

-- Teleport Button
TeleportSection:AddButton({
    Name = "Teleport to Player",
    Callback = function()
        -- Access the flag value as shown in documentation
        local selectedPlayer = OrionLib.Flags["selectedPlayer"].Value
        
        if selectedPlayer and selectedPlayer ~= "No other players" then
            -- This is where the actual teleport would happen
            local Players = game:GetService("Players")
            local targetPlayer = Players:FindFirstChild(selectedPlayer)
            
            if targetPlayer and targetPlayer.Character then
                OrionLib:MakeNotification({
                    Name = "Teleporting",
                    Content = "Teleporting to " .. selectedPlayer,
                    Image = "info",
                    Time = 5
                })
                
                -- Teleport logic would go here
                game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(targetPlayer.Character.HumanoidRootPart.CFrame)
            end
        else
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "Please select a valid player first",
                Image = "error",
                Time = 5
            })
        end
    end    
})

-- Create Game tab
local GameTab = Window:MakeTab({
    Name = "Game Options",
    Icon = "gamepad", -- Using icon name from the official list
    PremiumOnly = false
})

-- Add a paragraph to the game tab
GameTab:AddParagraph("Game Info", "This tab would contain game-specific options.")

-- Create Keybind example
GameTab:AddBind({
    Name = "Toggle UI",
    Default = Enum.KeyCode.RightControl,
    Hold = false,
    Save = true,
    Flag = "toggleUIBind",
    Callback = function()
        print("UI Toggle Hotkey Pressed")
    end    
})

-- Create Settings tab
local SettingsTab = Window:MakeTab({
    Name = "Settings",
    Icon = "settings", -- Using icon name from the official list
    PremiumOnly = false
})

-- Add textbox for configuration
SettingsTab:AddTextbox({
    Name = "Custom Name",
    Default = "SkyX User",
    TextDisappear = false,
    Callback = function(Value)
        OrionLib:MakeNotification({
            Name = "Name Updated",
            Content = "Your custom name is now: " .. Value,
            Image = "check",
            Time = 3
        })
    end
})

-- Create About Tab
local AboutTab = Window:MakeTab({
    Name = "About",
    Icon = "info", -- Using icon name from the official list
    PremiumOnly = false
})

AboutTab:AddParagraph("SkyX Enhanced OrionX UI", "This script demonstrates the proper usage of the OrionX UI Library by SkyX.")

AboutTab:AddParagraph("Features", [[• Modern interface using Orion UI
• Auto-save system for all settings
• Enhanced animations for UI elements
• Better notification system
• SkyX branding integration
• Icon system integration
• Touch input support for mobile users]])

AboutTab:AddLabel("Version: 1.0.0")

-- Add a label that we'll update later
local StatusLabel = AboutTab:AddLabel("Status: Loading...")

-- Update label example
wait(2) -- Wait for intro to finish
StatusLabel:Set("Status: Ready!")

-- Credits Button
AboutTab:AddButton({
    Name = "Copy Discord Link",
    Callback = function()
        -- This would copy a Discord link to clipboard in a real executor
        setclipboard("https://discord.gg/skyx")
        OrionLib:MakeNotification({
            Name = "Discord Link",
            Content = "Discord invite link copied to clipboard!",
            Image = "info",
            Time = 5
        })
    end    
})

-- Initialize library to trigger intro sequence and auto-save system
OrionLib:Init()

-- Welcome notification after a delay
wait(2) -- Wait for intro to finish
OrionLib:MakeNotification({
    Name = "Welcome",
    Content = "Welcome to the SkyX Enhanced Executor! Explore the tabs to discover all features.",
    Image = "home",
    Time = 7
})

-- Demonstrate setting toggle value programmatically
wait(5)
ESPToggle:Set(true) -- This will call the callback and show a notification

-- Demonstrate setting color programmatically
wait(2)
ESPColorPicker:Set(Color3.fromRGB(0, 255, 0)) -- Changes the color to green

-- Demonstrate setting slider value programmatically
wait(2)
ESPDistanceSlider:Set(750) -- This will update the slider to 750
