--[[
    ðŸŒŠ SkyX Hub - Blox Fruits (Fluent UI Version) ðŸŒŠ
    
    Auto Farm with quest automation using Fluent UI
    Mobile-compatible with optimized performance
]]

-- Detect if we're in Blox Fruits
if game.PlaceId ~= 2753915549 and game.PlaceId ~= 4442272183 and game.PlaceId ~= 7449423635 then
    -- Wrong game notification
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "SkyX Hub",
        Text = "This script is designed for Blox Fruits!",
        Duration = 5
    })
    return
end

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Player references
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

-- Important remote events
local CommF = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CommF_")

-- Global settings
local Settings = {
    AutoFarm = false,
    FastAttack = true,
    AutoHaki = true,
    AutoQuest = true,
    MobAura = false,
    FarmDistance = 7,
    FarmMethod = "Behind", -- Behind, Above, Below, Front
    SelectedWeapon = "Combat",
    SkillsEnabled = {
        Z = true,
        X = true,
        C = false,
        V = false
    },
    LevelFarm = true, -- Farm based on level
    NearestFarm = false, -- Farm nearest mobs
    BossFarm = false, -- Farm bosses
    ChestFarm = false
}

-- Connection storage for cleanup
local Connections = {}
local ActiveTween = nil
local CurrentQuest = nil
local CurrentMob = nil
local Target = nil
local Farming = false
local LastHealth = 0

-- Sea check
local CurrentSea = 0
if game.PlaceId == 2753915549 then
    CurrentSea = 1
elseif game.PlaceId == 4442272183 then
    CurrentSea = 2
elseif game.PlaceId == 7449423635 then
    CurrentSea = 3
end

-- Islands data - Used for quest and mob targeting
local Islands = {
    [1] = { -- First Sea
        {Name = "Pirate Starter Island", Center = Vector3.new(1071.2832, 16.3085976, 1426.86792), 
         Mobs = {"Bandit", "Pirate"}, QuestNPC = "Pirate Quest Giver", MinLevel = 1},
        
        {Name = "Marine Starter Island", Center = Vector3.new(-2573.3374, 6.88881969, 2046.99817), 
         Mobs = {"Marine Recruit", "Marine Squad Leader"}, QuestNPC = "Marine Quest Giver", MinLevel = 1},
        
        {Name = "Middle Town", Center = Vector3.new(-655.824158, 7.88708115, 1436.67908), 
         Mobs = {"Thug", "Pirate Thug"}, QuestNPC = "Middle Town Quest Giver", MinLevel = 10},
        
        {Name = "Jungle", Center = Vector3.new(-1249.77222, 11.8870859, 341.356476),
         Mobs = {"Monkey", "Gorilla"}, QuestNPC = "Jungle Quest Giver", MinLevel = 15},
        
        {Name = "Pirate Village", Center = Vector3.new(-1122.34998, 4.78708982, 3855.91992),
         Mobs = {"Desert Pirate", "Desert Officer"}, QuestNPC = "Pirate Village Quest Giver", MinLevel = 30},
         
        {Name = "Desert", Center = Vector3.new(1094.14587, 6.5, 4192.88721),
         Mobs = {"Desert Bandit", "Desert Officer"}, QuestNPC = "Desert Quest Giver", MinLevel = 60},
         
        {Name = "Snow Island", Center = Vector3.new(1198.00928, 27.0074959, -1211.73376),
         Mobs = {"Snow Bandit", "Snowman"}, QuestNPC = "Snow Quest Giver", MinLevel = 90},
         
        {Name = "Marine Fort", Center = Vector3.new(-4505.375, 20.687294, 4260.55908),
         Mobs = {"Marine Captain", "Marine Lieutenant"}, QuestNPC = "Marine Quest Giver 2", MinLevel = 120},
         
        {Name = "Sky Island", Center = Vector3.new(-4970.21875, 717.707275, -2622.35449),
         Mobs = {"Sky Bandit", "Dark Master"}, QuestNPC = "Sky Quest Giver", MinLevel = 150},
         
        {Name = "Prison", Center = Vector3.new(4875.330078125, 5.6519818305969, 734.85021972656),
         Mobs = {"Prisoner", "Dangerous Prisoner"}, QuestNPC = "Prison Quest Giver", MinLevel = 190},
         
        {Name = "Colosseum", Center = Vector3.new(-1428.35474, 7.38933945, -3014.37305),
         Mobs = {"Warrior", "Gladiator"}, QuestNPC = "Colosseum Quest Giver", MinLevel = 250}
    },
    
    [2] = { -- Second Sea
        {Name = "Kingdom of Rose", Center = Vector3.new(-336.519836, 66.1259766, 6207.2998),
         Mobs = {"Swan Pirate", "Royal Squad"}, QuestNPC = "Rose Kingdom Quest Giver", MinLevel = 700},
         
        {Name = "Green Zone", Center = Vector3.new(-2448.5708, 73.0455933, -3210.23047),
         Mobs = {"Forest Pirate", "Jungle Pirate"}, QuestNPC = "Green Zone Quest Giver", MinLevel = 750},
         
        {Name = "Cafe", Center = Vector3.new(-384.01791, 73.0455933, 297.999573),
         Mobs = {"Cafe Staff", "Chef Pirate"}, QuestNPC = "Cafe Quest Giver", MinLevel = 775},
         
        {Name = "Cursed Ship", Center = Vector3.new(923.21252441406, 125.05710601807, 32885.875),
         Mobs = {"Ship Officer", "Ship Deckhand"}, QuestNPC = "Ship Quest Giver", MinLevel = 850},
         
        {Name = "Ice Castle", Center = Vector3.new(6148.4765625, 294.38446044922, -6741.1166992188),
         Mobs = {"Arctic Warrior", "Snow Lurker"}, QuestNPC = "Ice Quest Giver", MinLevel = 1250},
         
        {Name = "Forgotten Island", Center = Vector3.new(-3032.7360839844, 317.89465332031, -10075.373046875),
         Mobs = {"Island Tiki", "Island Jungle Pirate"}, QuestNPC = "Forgotten Quest Giver", MinLevel = 1350}
    },
    
    [3] = { -- Third Sea
        {Name = "Port Town", Center = Vector3.new(-279.688, 6.764, 5343.129),
         Mobs = {"Pirate Millionaire", "Pistol Billionaire"}, QuestNPC = "Port Quest Giver", MinLevel = 1500},
         
        {Name = "Hydra Island", Center = Vector3.new(5229.99561, 603.916565, 345.154022),
         Mobs = {"Hydra Pirate", "Giant Islander"}, QuestNPC = "Hydra Quest Giver", MinLevel = 1600},
         
        {Name = "Great Tree", Center = Vector3.new(2174.94873, 28.7312393, -6728.83154),
         Mobs = {"Forest Pirate", "Mythological Pirate"}, QuestNPC = "Tree Quest Giver", MinLevel = 1700},
         
        {Name = "Castle on the Sea", Center = Vector3.new(-5477.62842, 313.794739, -2808.4585),
         Mobs = {"Castle Guard", "Castle Raider"}, QuestNPC = "Castle Quest Giver", MinLevel = 1800},
         
        {Name = "Haunted Castle", Center = Vector3.new(-9506.11035, 142.104858, 5526.82178),
         Mobs = {"Haunted Spirit", "Revenge Boss"}, QuestNPC = "Haunted Quest Giver", MinLevel = 1900}
    }
}

-- Helper function to add connections and track them
local function AddConnection(signal, callback)
    local connection = signal:Connect(callback)
    table.insert(Connections, connection)
    return connection
end

-- Function to find the best mob based on player level
local function FindBestMobForLevel()
    local playerLevel = LocalPlayer.Data.Level.Value
    local bestIsland = nil
    local bestLevelDiff = math.huge
    
    for _, island in pairs(Islands[CurrentSea]) do
        if island.MinLevel <= playerLevel then
            local levelDiff = playerLevel - island.MinLevel
            
            if levelDiff < bestLevelDiff then
                bestLevelDiff = levelDiff
                bestIsland = island
            end
        end
    end
    
    -- If no appropriate island found, use the lowest level island
    if not bestIsland then
        bestIsland = Islands[CurrentSea][1]
    end
    
    return bestIsland.Mobs, bestIsland.QuestNPC, bestIsland.MinLevel, bestIsland.Name
end

-- Function to get the current quest
local function GetQuest()
    if not Settings.AutoQuest then return end
    
    local playerLevel = LocalPlayer.Data.Level.Value
    local targetMobs, questNPC, questLevel, islandName = FindBestMobForLevel()
    
    -- Find the quest NPC
    local npcModel = nil
    for _, model in pairs(workspace.NPCs:GetChildren()) do
        if model.Name == questNPC then
            npcModel = model
            break
        end
    end
    
    if npcModel then
        -- Store the current position
        local oldPosition = HumanoidRootPart.CFrame
        
        -- Teleport to NPC
        HumanoidRootPart.CFrame = npcModel.HumanoidRootPart.CFrame * CFrame.new(0, 0, 3)
        
        -- Wait a bit and get the quest
        wait(0.5)
        CommF:InvokeServer("StartQuest", questNPC, questLevel)
        
        -- Return to the original position
        HumanoidRootPart.CFrame = oldPosition
        
        -- Set current quest
        CurrentQuest = {
            NPC = questNPC,
            Level = questLevel,
            Mobs = targetMobs,
            Island = islandName
        }
        
        return CurrentQuest
    end
    
    return nil
end

-- Function to find target mob
local function FindTarget()
    local nearestDistance = math.huge
    local nearestMob = nil
    
    -- Get target mobs based on quest or level
    local targetMobs = {}
    
    if CurrentQuest and Settings.AutoQuest then
        targetMobs = CurrentQuest.Mobs
    else
        targetMobs = FindBestMobForLevel()
    end
    
    -- Find nearest mob from target list
    for _, mob in pairs(workspace.Enemies:GetChildren()) do
        if mob:FindFirstChild("Humanoid") and mob:FindFirstChild("HumanoidRootPart") and mob.Humanoid.Health > 0 then
            for _, targetName in pairs(targetMobs) do
                if mob.Name:find(targetName) then
                    local distance = (HumanoidRootPart.Position - mob.HumanoidRootPart.Position).Magnitude
                    
                    if distance < nearestDistance then
                        nearestDistance = distance
                        nearestMob = mob
                    end
                    
                    break
                end
            end
        end
    end
    
    return nearestMob, nearestDistance
end

-- Function to get farming position based on method
local function GetFarmingPosition(targetHRP)
    local targetCFrame = targetHRP.CFrame
    local farmDistance = Settings.FarmDistance
    
    if Settings.FarmMethod == "Behind" then
        return targetCFrame * CFrame.new(0, 0, farmDistance)
    elseif Settings.FarmMethod == "Above" then
        return targetCFrame * CFrame.new(0, farmDistance, 0)
    elseif Settings.FarmMethod == "Below" then
        return targetCFrame * CFrame.new(0, -farmDistance, 0)
    elseif Settings.FarmMethod == "Front" then
        return targetCFrame * CFrame.new(0, 0, -farmDistance)
    else
        -- Default to behind
        return targetCFrame * CFrame.new(0, 0, farmDistance)
    end
end

-- Function to activate Buso Haki
local function ActivateBusoHaki()
    if not Settings.AutoHaki then return end
    
    local hasHaki = LocalPlayer:FindFirstChild("HasBuso")
    
    if hasHaki and not hasHaki.Value then
        CommF:InvokeServer("Buso")
    end
end

-- Function to equip the weapon
local function EquipWeapon(weapon)
    if not weapon then weapon = Settings.SelectedWeapon end
    
    local success = false
    
    for i, v in pairs(LocalPlayer.Backpack:GetChildren()) do
        if v.Name:find(weapon) then
            Humanoid:EquipTool(v)
            success = true
            break
        end
    end
    
    return success
end

-- Function to attack
local function Attack()
    local equipped = Character:FindFirstChildOfClass("Tool")
    
    if not equipped then
        EquipWeapon()
        wait(0.1)
        equipped = Character:FindFirstChildOfClass("Tool")
    end
    
    if equipped and equipped:FindFirstChild("Attack") then
        equipped.Attack:FireServer()
    end
    
    if Settings.FastAttack then
        VirtualUser:CaptureController()
        VirtualUser:ClickButton1(Vector2.new(50, 50))
    end
    
    -- Use skills
    if Settings.SkillsEnabled.Z then
        VirtualUser:CaptureController()
        VirtualUser:Button1Down(Vector2.new(1280, 672), workspace.CurrentCamera.CFrame)
        keypress(0x5A) -- Z key
        wait(0.1)
        keyrelease(0x5A)
        VirtualUser:Button1Up(Vector2.new(1280, 672), workspace.CurrentCamera.CFrame)
    end
    
    if Settings.SkillsEnabled.X then
        VirtualUser:CaptureController()
        VirtualUser:Button1Down(Vector2.new(1280, 672), workspace.CurrentCamera.CFrame)
        keypress(0x58) -- X key
        wait(0.1)
        keyrelease(0x58)
        VirtualUser:Button1Up(Vector2.new(1280, 672), workspace.CurrentCamera.CFrame)
    end
    
    if Settings.SkillsEnabled.C then
        VirtualUser:CaptureController()
        VirtualUser:Button1Down(Vector2.new(1280, 672), workspace.CurrentCamera.CFrame)
        keypress(0x43) -- C key
        wait(0.1)
        keyrelease(0x43)
        VirtualUser:Button1Up(Vector2.new(1280, 672), workspace.CurrentCamera.CFrame)
    end
    
    if Settings.SkillsEnabled.V then
        VirtualUser:CaptureController()
        VirtualUser:Button1Down(Vector2.new(1280, 672), workspace.CurrentCamera.CFrame)
        keypress(0x56) -- V key
        wait(0.1)
        keyrelease(0x56)
        VirtualUser:Button1Up(Vector2.new(1280, 672), workspace.CurrentCamera.CFrame)
    end
end

-- Main farming loop
local function StartFarming()
    if Farming then return end
    Farming = true
    
    -- Initial quest getting
    if Settings.AutoQuest and not CurrentQuest then
        GetQuest()
    end
    
    -- Farming loop
    spawn(function()
        while Farming and Settings.AutoFarm do
            -- Check for Buso Haki
            ActivateBusoHaki()
            
            -- Get quest if needed
            if Settings.AutoQuest and not CurrentQuest then
                GetQuest()
            end
            
            -- Find target
            local mob, distance = FindTarget()
            
            -- If we found a target
            if mob and mob:FindFirstChild("Humanoid") and mob:FindFirstChild("HumanoidRootPart") and mob.Humanoid.Health > 0 then
                Target = mob
                
                -- Move to target
                if distance > 150 then
                    -- Far away, use tween for faster movement
                    local targetPos = mob.HumanoidRootPart.Position
                    ActiveTween = TweenService:Create(
                        HumanoidRootPart,
                        TweenInfo.new(distance / 200, Enum.EasingStyle.Linear),
                        {CFrame = CFrame.new(targetPos)}
                    )
                    ActiveTween:Play()
                    
                    -- Wait for tween to complete
                    wait(distance / 200)
                end
                
                -- Cancel any active tween
                if ActiveTween then
                    ActiveTween:Cancel()
                    ActiveTween = nil
                end
                
                -- Position for farming
                local farmingPos = GetFarmingPosition(mob.HumanoidRootPart)
                HumanoidRootPart.CFrame = farmingPos
                
                -- Attack
                Attack()
                
                -- Check if target is dead
                if mob.Humanoid.Health <= 0 or not mob.Parent then
                    Target = nil
                end
            else
                -- No target found, move to island center
                if CurrentQuest then
                    for _, island in pairs(Islands[CurrentSea]) do
                        if island.Name == CurrentQuest.Island then
                            local targetPos = island.Center
                            
                            -- Cancel any active tween
                            if ActiveTween then
                                ActiveTween:Cancel()
                                ActiveTween = nil
                            end
                            
                            -- Tween to island center
                            local distance = (HumanoidRootPart.Position - targetPos).Magnitude
                            ActiveTween = TweenService:Create(
                                HumanoidRootPart,
                                TweenInfo.new(distance / 200, Enum.EasingStyle.Linear),
                                {CFrame = CFrame.new(targetPos)}
                            )
                            ActiveTween:Play()
                            
                            break
                        end
                    end
                end
                
                Target = nil
            end
            
            wait(0.1)
        end
        
        Farming = false
    end)
end

-- Function to stop farming
local function StopFarming()
    Farming = false
    
    if ActiveTween then
        ActiveTween:Cancel()
        ActiveTween = nil
    end
    
    Target = nil
end

-- Clean up all connections
local function CleanUp()
    for _, connection in pairs(Connections) do
        if connection.Connected then
            connection:Disconnect()
        end
    end
    
    Connections = {}
    StopFarming()
end

-- Load the Fluent UI Library
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Create the window
local Window = Fluent:CreateWindow({
    Title = "ðŸŒŠ SkyX Hub - Blox Fruits ðŸŒŠ",
    SubTitle = "by SkyX Team",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightControl
})

-- Create tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Combat = Window:AddTab({ Title = "Combat", Icon = "swords" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "map-pin" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "settings" })
}

-- Setup options
local Options = Fluent.Options

-- Player info
local playerLevel = LocalPlayer.Data.Level.Value
local playerBeli = LocalPlayer.Data.Beli.Value
local playerFragments = LocalPlayer.Data.Fragments.Value

Tabs.Main:AddParagraph({
    Title = "Player Information",
    Content = "Level: " .. playerLevel .. 
              "\nBeli: " .. playerBeli .. 
              "\nFragments: " .. playerFragments
})

-- Auto Farm toggle
Tabs.Main:AddToggle("AutoFarm", {
    Title = "Auto Farm",
    Default = Settings.AutoFarm,
    Callback = function(Value)
        Settings.AutoFarm = Value
        
        if Value then
            StartFarming()
            Fluent:Notify({
                Title = "Auto Farm",
                Content = "Started Auto Farm",
                Duration = 3
            })
        else
            StopFarming()
            Fluent:Notify({
                Title = "Auto Farm",
                Content = "Stopped Auto Farm",
                Duration = 3
            })
        end
    end
})

-- Auto Quest toggle
Tabs.Main:AddToggle("AutoQuest", {
    Title = "Auto Quest",
    Default = Settings.AutoQuest,
    Callback = function(Value)
        Settings.AutoQuest = Value
        
        if Value and not CurrentQuest then
            GetQuest()
        end
    end
})

-- Fast Attack toggle
Tabs.Main:AddToggle("FastAttack", {
    Title = "Fast Attack",
    Default = Settings.FastAttack,
    Callback = function(Value)
        Settings.FastAttack = Value
    end
})

-- Auto Haki toggle
Tabs.Main:AddToggle("AutoHaki", {
    Title = "Auto Buso Haki",
    Default = Settings.AutoHaki,
    Callback = function(Value)
        Settings.AutoHaki = Value
        
        if Value then
            ActivateBusoHaki()
        end
    end
})

-- Weapon selection
local WeaponsList = {"Combat"}
for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
    if tool:IsA("Tool") then
        table.insert(WeaponsList, tool.Name)
    end
end

for _, tool in pairs(Character:GetChildren()) do
    if tool:IsA("Tool") then
        table.insert(WeaponsList, tool.Name)
    end
end

Tabs.Main:AddDropdown("WeaponSelect", {
    Title = "Select Weapon",
    Values = WeaponsList,
    Multi = false,
    Default = Settings.SelectedWeapon,
    Callback = function(Value)
        Settings.SelectedWeapon = Value
        EquipWeapon(Value)
    end
})

-- Combat tab settings
Tabs.Combat:AddDropdown("FarmMethod", {
    Title = "Farm Position",
    Values = {"Behind", "Above", "Below", "Front"},
    Multi = false,
    Default = Settings.FarmMethod,
    Callback = function(Value)
        Settings.FarmMethod = Value
    end
})

Tabs.Combat:AddSlider("FarmDistance", {
    Title = "Farm Distance",
    Description = "Distance from the target mob",
    Default = Settings.FarmDistance,
    Min = 3,
    Max = 15,
    Rounding = 1,
    Callback = function(Value)
        Settings.FarmDistance = Value
    end
})

-- Skills section
Tabs.Combat:AddParagraph({
    Title = "Auto Skills",
    Content = "Enable/disable automatic skills usage"
})

Tabs.Combat:AddToggle("SkillZ", {
    Title = "Use Skill Z",
    Default = Settings.SkillsEnabled.Z,
    Callback = function(Value)
        Settings.SkillsEnabled.Z = Value
    end
})

Tabs.Combat:AddToggle("SkillX", {
    Title = "Use Skill X",
    Default = Settings.SkillsEnabled.X,
    Callback = function(Value)
        Settings.SkillsEnabled.X = Value
    end
})

Tabs.Combat:AddToggle("SkillC", {
    Title = "Use Skill C",
    Default = Settings.SkillsEnabled.C,
    Callback = function(Value)
        Settings.SkillsEnabled.C = Value
    end
})

Tabs.Combat:AddToggle("SkillV", {
    Title = "Use Skill V",
    Default = Settings.SkillsEnabled.V,
    Callback = function(Value)
        Settings.SkillsEnabled.V = Value
    end
})

-- Teleport tab
Tabs.Teleport:AddParagraph({
    Title = "Islands Teleport",
    Content = "Click to teleport to specific islands"
})

-- Add island buttons based on current sea
for _, island in pairs(Islands[CurrentSea]) do
    Tabs.Teleport:AddButton({
        Title = island.Name,
        Callback = function()
            local targetPos = island.Center
            
            -- Cancel any active tween
            if ActiveTween then
                ActiveTween:Cancel()
                ActiveTween = nil
            end
            
            -- Tween to island
            local distance = (HumanoidRootPart.Position - targetPos).Magnitude
            ActiveTween = TweenService:Create(
                HumanoidRootPart,
                TweenInfo.new(distance / 200, Enum.EasingStyle.Linear),
                {CFrame = CFrame.new(targetPos)}
            )
            ActiveTween:Play()
            
            Fluent:Notify({
                Title = "Teleport",
                Content = "Teleporting to " .. island.Name,
                Duration = 3
            })
        end
    })
end

-- Sea teleport options
Tabs.Teleport:AddParagraph({
    Title = "Sea Teleport",
    Content = "Teleport between different seas"
})

Tabs.Teleport:AddButton({
    Title = "First Sea",
    Callback = function()
        CommF:InvokeServer("TravelMain")
    end
})

Tabs.Teleport:AddButton({
    Title = "Second Sea",
    Callback = function()
        CommF:InvokeServer("TravelDressrosa")
    end
})

Tabs.Teleport:AddButton({
    Title = "Third Sea",
    Callback = function()
        CommF:InvokeServer("TravelZou")
    end
})

-- Misc tab features
Tabs.Misc:AddParagraph({
    Title = "Misc Features",
    Content = "Additional utility features"
})

Tabs.Misc:AddToggle("ChestFarm", {
    Title = "Auto Collect Chests",
    Default = Settings.ChestFarm,
    Callback = function(Value)
        Settings.ChestFarm = Value
        
        if Value then
            spawn(function()
                while Settings.ChestFarm do
                    for _, chest in pairs(workspace:GetChildren()) do
                        if chest.Name == "Chest1" or chest.Name == "Chest2" or chest.Name == "Chest3" then
                            if chest:FindFirstChild("Mesh") or chest:FindFirstChild("SpecialMesh") then
                                local distance = (HumanoidRootPart.Position - chest.Position).Magnitude
                                
                                if distance < 200 then
                                    HumanoidRootPart.CFrame = chest.CFrame
                                    wait(1)
                                end
                            end
                        end
                    end
                    wait(1)
                end
            end)
        end
    end
})

Tabs.Misc:AddButton({
    Title = "Redeem All Codes",
    Callback = function()
        local codes = {
            "Sub2UncleKizaru",
            "SUB2NOOBMASTER123",
            "Sub2Daigrock",
            "Axiore",
            "TantaiGaming",
            "STRAWHATMAINE",
            "SUB2GAMERROBOT_EXP1",
            "Sub2OfficialNoobie",
            "Magicbus",
            "JCWK",
            "Starcodeheo",
            "Bluxxy",
            "fudd10_v2",
            "FUDD10",
            "SUB2GAMERROBOT_RESET1",
            "kittgaming",
            "Sub2Fer999",
            "Enyu_is_Pro",
            "THEGREATACE",
            "BIGNEWS",
            "TheGreatAce"
        }
        
        for _, code in pairs(codes) do
            CommF:InvokeServer("RedeemCode", code)
            wait(0.5)
        end
        
        Fluent:Notify({
            Title = "Codes",
            Content = "All codes redeemed!",
            Duration = 3
        })
    end
})

Tabs.Misc:AddButton({
    Title = "Script Info",
    Callback = function()
        Fluent:Notify({
            Title = "SkyX Hub Info",
            Content = "Blox Fruits Auto Farm with Fluent UI\nMobile Compatible\nCreated by SkyX Team",
            Duration = 5
        })
    end
})

-- Setup managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("SkyXHub")
SaveManager:SetFolder("SkyXHub/BloxFruits")
InterfaceManager:BuildInterfaceSection(Tabs.Misc)
SaveManager:BuildConfigSection(Tabs.Misc)

-- Select first tab
Window:SelectTab(1)

-- Cleanup when script stops
AddConnection(game:GetService("CoreGui").ChildRemoved, function(child)
    if child.Name == "Fluent_1" then
        CleanUp()
    end
end)

-- Welcome notification
Fluent:Notify({
    Title = "SkyX Hub",
    Content = "Blox Fruits script loaded!",
    Duration = 5
})
