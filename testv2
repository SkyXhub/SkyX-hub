-- Compiled from MoonScript

local util
util = {
  log = function(msg)
    return print("[SkyX] " .. tostring(msg))
  end,
  warn = function(msg)
    return warn("[SkyX Warning] " .. tostring(msg))
  end
}

local SkyX
SkyX = {
  name = "SkyX Blade Ball",
  version = "1.0.0",
  autoParryEnabled = false,
  autoAbilityEnabled = false,
  parryDistance = 20,
  speedThreshold = 10,
  connections = { },
  setup = function(self)
    self.services = {
      replicatedStorage = game:GetService("ReplicatedStorage"),
      players = game:GetService("Players"),
      runService = game:GetService("RunService"),
      userInputService = game:GetService("UserInputService")
    }
    self.localPlayer = self.services.players.LocalPlayer
    self.isBladeGame = game.PlaceId == 13772394625
    self:loadUI()
    self:createUI()
    return util.log("SkyX Blade Ball initialized!")
  end,
  loadUI = function(self)
    local success, result = pcall(function()
      return loadstring(game:HttpGet('https://raw.githubusercontent.com/jensonhirst/Orion/main/source'))()
    end)
    if success then
      self.ui = result
      return util.log("UI Library loaded")
    else
      return util.warn("Failed to load UI library: " .. tostring(result))
    end
  end,
  createUI = function(self)
    if not (self.ui) then
      return 
    end
    self.window = self.ui:MakeWindow({
      Name = self.name,
      HidePremium = true,
      SaveConfig = true,
      ConfigFolder = "SkyXScripts"
    })
    self:createAutoParryTab()
    return self:createVisualTab()
  end,
  createAutoParryTab = function(self)
    self.autoParryTab = self.window:MakeTab({
      Name = "Auto Parry",
      Icon = "rbxassetid://4483345998",
      PremiumOnly = false
    })
    self.autoParryTab:AddToggle({
      Name = "Auto Parry",
      Default = false,
      Callback = function(value)
        return self:toggleAutoParry(value)
      end
    })
    self.autoParryTab:AddSlider({
      Name = "Detection Range",
      Min = 10,
      Max = 50,
      Default = 20,
      Color = Color3.fromRGB(255, 255, 255),
      Increment = 1,
      Callback = function(value)
        return self:setParryRange(value)
      end
    })
    self.autoParryTab:AddSlider({
      Name = "Ball Speed Threshold",
      Min = 5,
      Max = 30,
      Default = 10,
      Color = Color3.fromRGB(255, 255, 255),
      Increment = 1,
      Callback = function(value)
        return self:setSpeedThreshold(value)
      end
    })
    return self.autoParryTab:AddToggle({
      Name = "Auto Use Ability",
      Default = false,
      Callback = function(value)
        return self:toggleAutoAbility(value)
      end
    })
  end,
  createVisualTab = function(self)
    self.visualTab = self.window:MakeTab({
      Name = "Visual",
      Icon = "rbxassetid://4483345998",
      PremiumOnly = false
    })
    self.visualTab:AddToggle({
      Name = "Ball ESP",
      Default = false,
      Callback = function(value)
        return self:toggleBallESP(value)
      end
    })
    return self.visualTab:AddToggle({
      Name = "Player ESP",
      Default = false,
      Callback = function(value)
        return self:togglePlayerESP(value)
      end
    })
  end,
  toggleAutoParry = function(self, enabled)
    self.autoParryEnabled = enabled
    if enabled then
      util.log("Auto parry enabled!")
      local remotes = self.services.replicatedStorage:WaitForChild("Remotes", 9e9)
      local parry = remotes:WaitForChild("Parry", 9e9)
      local ballsFolder = workspace:WaitForChild("Balls", 9e9)
      self.connections.autoParry = self.services.runService.Heartbeat:Connect(function()
        for _, ball in pairs(ballsFolder:GetChildren()) do
          if ball:IsA("BasePart") then
            local character = SkyX.localPlayer.Character
            if not (character and character:FindFirstChild("HumanoidRootPart")) then
              goto _continue_1
            end
            local rootPart = character.HumanoidRootPart
            local distance = (rootPart.Position - ball.Position).Magnitude
            local ballVel = ball.Velocity.Magnitude
            if distance < SkyX.parryDistance and ballVel > SkyX.speedThreshold then
              parry:FireServer()
              if SkyX.autoAbilityEnabled then
                local abilityRemote = remotes:WaitForChild("AbilityRemote", 1)
                if abilityRemote then
                  abilityRemote:FireServer()
                end
              end
            end
          end
          ::_continue_1::
        end
      end)
    else
      util.log("Auto parry disabled!")
      if self.connections.autoParry then
        self.connections.autoParry:Disconnect()
        self.connections.autoParry = nil
      end
    end
  end,
  setParryRange = function(self, value)
    self.parryDistance = value
    return util.log("Parry range set to: " .. tostring(value))
  end,
  setSpeedThreshold = function(self, value)
    self.speedThreshold = value
    return util.log("Ball speed threshold set to: " .. tostring(value))
  end,
  toggleAutoAbility = function(self, enabled)
    self.autoAbilityEnabled = enabled
    return util.log("Auto ability " .. tostring(enabled and "enabled" or "disabled"))
  end,
  toggleBallESP = function(self, enabled)
    if enabled then
      util.log("Ball ESP enabled")
      local ballsFolder = workspace:WaitForChild("Balls", 9e9)
      self.connections.ballESP = self.services.runService.RenderStepped:Connect(function()
        for _, ball in pairs(ballsFolder:GetChildren()) do
          if ball:IsA("BasePart") then
            if not ball:FindFirstChild("BallHighlight") then
              local highlight = Instance.new("Highlight")
              highlight.Name = "BallHighlight"
              highlight.FillColor = Color3.fromRGB(255, 50, 50)
              highlight.OutlineColor = Color3.fromRGB(255, 255, 0)
              highlight.FillTransparency = 0.3
              highlight.OutlineTransparency = 0
              highlight.Parent = ball
            end
          end
        end
      end)
    else
      util.log("Ball ESP disabled")
      if self.connections.ballESP then
        self.connections.ballESP:Disconnect()
        self.connections.ballESP = nil
      end
      local ballsFolder = workspace:WaitForChild("Balls", 9e9)
      for _, ball in pairs(ballsFolder:GetChildren()) do
        local highlight = ball:FindFirstChild("BallHighlight")
        if highlight then
          highlight:Destroy()
        end
      end
    end
  end,
  togglePlayerESP = function(self, enabled)
    if enabled then
      util.log("Player ESP enabled")
      self.connections.playerESP = self.services.runService.RenderStepped:Connect(function()
        for _, player in pairs(game.Players:GetPlayers()) do
          if player ~= game.Players.LocalPlayer then
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
              if not character:FindFirstChild("PlayerHighlight") then
                local highlight = Instance.new("Highlight")
                highlight.Name = "PlayerHighlight"
                highlight.FillColor = Color3.fromRGB(0, 120, 255)
                highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                highlight.FillTransparency = 0.5
                highlight.OutlineTransparency = 0.2
                highlight.Parent = character
              end
            end
          end
        end
      end)
    else
      util.log("Player ESP disabled")
      if self.connections.playerESP then
        self.connections.playerESP:Disconnect()
        self.connections.playerESP = nil
      end
      for _, player in pairs(game.Players:GetPlayers()) do
        if player.Character then
          local highlight = player.Character:FindFirstChild("PlayerHighlight")
          if highlight then
            highlight:Destroy()
          end
        end
      end
    end
  end
}

local script = SkyX:setup()

return SkyX
