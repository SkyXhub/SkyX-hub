--[[
ðŸŒŠ SkyX Hub - Dead Rails Orion UI ðŸŒŠ
Complete script with Orion UI for Dead Rails

Features:
- Enhanced ESP System with Custom Colors and Distance Display
- Advanced Auto Bone Farm & Round Completion
- Military-Grade Anti-Ban System
- Weapon Mods and Aimbot
- Mobile compatibility with touch controls
]]

-- Game check
if game.PlaceId ~= 6729832410 and game.PlaceId ~= 12355337193 then
    warn("This script is only for Dead Rails. Please execute in Dead Rails.")
    return
end

-- Device detection
local UserInputService = game:GetService("UserInputService")
local IsMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
local DeviceText = IsMobile and "Mobile" or "PC"

print("SkyX Dead Rails Orion - Starting on " .. DeviceText .. " device")

-- Prevent multiple execution
if _G.SkyXDeadRailsLoaded then
    warn("SkyX Dead Rails is already running!")
    return
end
_G.SkyXDeadRailsLoaded = true

-- Send notification function
local function Notify(title, text, duration)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title or "SkyX Hub",
        Text = text or "Script is running!",
        Duration = duration or 5
    })
end

-- Core services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local TweenService = game:GetService("TweenService")

-- Load Orion Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
if not OrionLib then
    warn("Failed to load Orion Library!")
    return
end

-- Create main window
local Window = OrionLib:MakeWindow({
    Name = "SkyX Hub - Dead Rails", 
    HidePremium = true, 
    SaveConfig = false, 
    ConfigFolder = "SkyXDeadRails",
    IntroEnabled = true,
    IntroText = "SkyX Hub - Dead Rails",
    IntroIcon = "rbxassetid://10723415903",
    Icon = "rbxassetid://10723415903"
})

-- Main Tab
local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Create sections
local MainSection = MainTab:AddSection({
    Name = "Dead Rails Controls"
})

-- Game information
local GameInfoSection = MainTab:AddSection({
    Name = "Game Info"
})

-- Show game information
local function UpdateGameInfo()
    -- Clear previous labels
    for i, v in pairs(GameInfoSection:GetChildren()) do
        if v:IsA("TextLabel") then
            v:Destroy()
        end
    end
    
    -- Map name
    local mapName = "Unknown"
    local mapModule = ReplicatedStorage:FindFirstChild("MapModule")
    if mapModule and mapModule:FindFirstChild("CurrentMap") then
        mapName = mapModule.CurrentMap.Value
    end
    
    -- Add map info
    GameInfoSection:AddLabel("Map: " .. mapName)
    
    -- Player count
    GameInfoSection:AddLabel("Players: " .. #Players:GetPlayers())
    
    -- Team info
    GameInfoSection:AddLabel("Team: " .. (LocalPlayer.Team and LocalPlayer.Team.Name or "None"))
end

-- Common functions for Dead Rails

-- Universal ESP system
local function CreateESP()
    -- ESP container
    local ESPContainer = Instance.new("Folder")
    ESPContainer.Name = "ESPContainer"
    ESPContainer.Parent = game.CoreGui
    
    -- ESP settings
    local ESPSettings = {
        Enabled = false,
        ShowName = true,
        ShowDistance = true,
        ShowHealth = true,
        TeamCheck = true,
        ItemESP = false
    }
    
    -- Create ESP for player
    local function CreatePlayerESP(player)
        if player == LocalPlayer then return end
        
        -- Create billboard
        local Billboard = Instance.new("BillboardGui")
        Billboard.Name = player.Name .. "ESP"
        Billboard.AlwaysOnTop = true
        Billboard.Size = UDim2.new(0, 200, 0, 50)
        Billboard.StudsOffset = Vector3.new(0, 3, 0)
        Billboard.Adornee = player.Character:WaitForChild("HumanoidRootPart")
        Billboard.Parent = ESPContainer
        
        -- Add name label
        local NameLabel = Instance.new("TextLabel")
        NameLabel.Name = "NameLabel"
        NameLabel.BackgroundTransparency = 1
        NameLabel.Size = UDim2.new(1, 0, 0, 20)
        NameLabel.Font = Enum.Font.GothamBold
        NameLabel.TextSize = 14
        NameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        NameLabel.TextStrokeTransparency = 0.5
        NameLabel.Text = player.Name
        NameLabel.Parent = Billboard
        
        -- Add distance label
        local DistanceLabel = Instance.new("TextLabel")
        DistanceLabel.Name = "DistanceLabel"
        DistanceLabel.BackgroundTransparency = 1
        DistanceLabel.Size = UDim2.new(1, 0, 0, 20)
        DistanceLabel.Position = UDim2.new(0, 0, 0, 20)
        DistanceLabel.Font = Enum.Font.Gotham
        DistanceLabel.TextSize = 12
        DistanceLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        DistanceLabel.TextStrokeTransparency = 0.5
        DistanceLabel.Text = "Distance: N/A"
        DistanceLabel.Parent = Billboard
        
        -- Update distance
        local connection = RunService.RenderStepped:Connect(function()
            if not ESPSettings.Enabled then
                Billboard.Enabled = false
                return
            end
            
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and
               LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                
                -- Team check
                if ESPSettings.TeamCheck and player.Team == LocalPlayer.Team then
                    Billboard.Enabled = false
                    return
                end
                
                Billboard.Enabled = true
                local distance = (player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                
                -- Update name visibility
                NameLabel.Visible = ESPSettings.ShowName
                
                -- Update distance
                DistanceLabel.Visible = ESPSettings.ShowDistance
                if ESPSettings.ShowDistance then
                    DistanceLabel.Text = "Distance: " .. math.floor(distance) .. " studs"
                end
                
                -- Update color based on team
                local color = player.TeamColor.Color
                NameLabel.TextColor3 = color
            else
                Billboard.Enabled = false
            end
        end)
        
        -- Clean up when player leaves
        player.CharacterRemoving:Connect(function()
            Billboard:Destroy()
            connection:Disconnect()
        end)
    end
    
    -- Create ESP for items
    local function CreateItemESP(item, itemType)
        -- Only create for new items
        if item:FindFirstChild("ESPAdded") then return end
        local marker = Instance.new("StringValue")
        marker.Name = "ESPAdded" 
        marker.Parent = item
        
        -- Create billboard
        local Billboard = Instance.new("BillboardGui")
        Billboard.Name = item.Name .. "ESP"
        Billboard.AlwaysOnTop = true
        Billboard.Size = UDim2.new(0, 200, 0, 50)
        Billboard.StudsOffset = Vector3.new(0, 2, 0)
        
        -- Determine adornee
        if item:IsA("Model") and item.PrimaryPart then
            Billboard.Adornee = item.PrimaryPart
        else
            Billboard.Adornee = item
        end
        
        Billboard.Parent = ESPContainer
        
        -- Add name label
        local NameLabel = Instance.new("TextLabel")
        NameLabel.Name = "NameLabel"
        NameLabel.BackgroundTransparency = 1
        NameLabel.Size = UDim2.new(1, 0, 0, 20)
        NameLabel.Font = Enum.Font.GothamBold
        NameLabel.TextSize = 14
        NameLabel.TextColor3 = Color3.fromRGB(255, 255, 0) -- Yellow for items
        NameLabel.TextStrokeTransparency = 0.5
        NameLabel.Text = itemType .. ": " .. item.Name
        NameLabel.Parent = Billboard
        
        -- Add distance label
        local DistanceLabel = Instance.new("TextLabel")
        DistanceLabel.Name = "DistanceLabel"
        DistanceLabel.BackgroundTransparency = 1
        DistanceLabel.Size = UDim2.new(1, 0, 0, 20)
        DistanceLabel.Position = UDim2.new(0, 0, 0, 20)
        DistanceLabel.Font = Enum.Font.Gotham
        DistanceLabel.TextSize = 12
        DistanceLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        DistanceLabel.TextStrokeTransparency = 0.5
        DistanceLabel.Text = "Distance: N/A"
        DistanceLabel.Parent = Billboard
        
        -- Update connection
        local connection = RunService.RenderStepped:Connect(function()
            if not ESPSettings.Enabled or not ESPSettings.ItemESP then
                Billboard.Enabled = false
                return
            end
            
            if item and item:IsDescendantOf(game) and LocalPlayer.Character and
               LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                
                Billboard.Enabled = true
                
                local itemPos
                if item:IsA("Model") and item.PrimaryPart then
                    itemPos = item.PrimaryPart.Position
                else
                    itemPos = item.Position
                end
                
                local distance = (itemPos - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                DistanceLabel.Text = "Distance: " .. math.floor(distance) .. " studs"
            else
                Billboard:Destroy()
                connection:Disconnect()
            end
        end)
        
        -- Clean up when item is removed
        item.AncestryChanged:Connect(function(_, parent)
            if not parent then
                Billboard:Destroy()
                connection:Disconnect()
            end
        end)
    end
    
    -- Scan for items
    local function ScanForItems()
        if not ESPSettings.ItemESP then return end
        
        for _, object in pairs(Workspace:GetDescendants()) do
            if object:IsA("BasePart") then
                -- Check if it's a collectable item
                if object.Name:lower():find("bone") or
                   object.Name:lower():find("money") or
                   object.Name:lower():find("cash") or
                   object.Name:lower():find("coin") or
                   object.Name:lower():find("gem") or
                   object.Name:lower():find("pickup") or
                   object.Name:lower():find("collect") then
                    
                    CreateItemESP(object, "Item")
                end
                
                -- Check if it's a weapon
                if object.Name:lower():find("gun") or
                   object.Name:lower():find("weapon") or
                   object.Name:lower():find("knife") or
                   object.Name:lower():find("blade") or
                   object.Name:lower():find("sword") then
                    
                    CreateItemESP(object, "Weapon")
                end
            end
            
            -- Don't overwhelm the game
            if _ % 200 == 0 then
                wait()
            end
        end
    end
    
    -- Hook up events
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            CreatePlayerESP(player)
        end
    end
    
    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function()
            if ESPSettings.Enabled then
                CreatePlayerESP(player)
            end
        end)
    end)
    
    -- Start item scanner
    spawn(function()
        while wait(5) do -- Scan every 5 seconds
            if ESPSettings.Enabled and ESPSettings.ItemESP then
                ScanForItems()
            end
        end
    end)
    
    -- Return controller
    return {
        SetEnabled = function(value)
            ESPSettings.Enabled = value
        end,
        SetShowName = function(value)
            ESPSettings.ShowName = value
        end,
        SetShowDistance = function(value)
            ESPSettings.ShowDistance = value
        end,
        SetShowHealth = function(value)
            ESPSettings.ShowHealth = value
        end,
        SetTeamCheck = function(value)
            ESPSettings.TeamCheck = value
        end,
        SetItemESP = function(value)
            ESPSettings.ItemESP = value
            if value then
                ScanForItems()
            end
        end,
        Stop = function()
            ESPContainer:Destroy()
        end
    }
end

-- Gun mods
local function CreateGunMods()
    -- Gun mod settings
    local GunModSettings = {
        NoRecoil = false,
        NoSpread = false,
        RapidFire = false,
        InstantReload = false,
        InfiniteAmmo = false,
        AutoFire = false
    }
    
    -- Function to find weapon modules
    local function FindWeaponModules()
        local modules = {}
        
        -- Look for weapon modules in workspace
        for _, item in pairs(Workspace:GetDescendants()) do
            if item:IsA("Tool") or (item:IsA("Model") and item:FindFirstChild("Handle")) then
                for _, script in pairs(item:GetDescendants()) do
                    if script:IsA("ModuleScript") then
                        local success, module = pcall(function() return require(script) end)
                        if success and type(module) == "table" then
                            table.insert(modules, {script = script, module = module})
                        end
                    end
                end
            end
        end
        
        -- Look for weapon modules in ReplicatedStorage
        for _, item in pairs(ReplicatedStorage:GetDescendants()) do
            if item:IsA("ModuleScript") and 
               (item.Name:lower():find("gun") or item.Name:lower():find("weapon") or 
                item.Name:lower():find("rifle") or item.Name:lower():find("firearm")) then
                
                local success, module = pcall(function() return require(item) end)
                if success and type(module) == "table" then
                    table.insert(modules, {script = item, module = module})
                end
            end
        end
        
        return modules
    end
    
    -- Apply mods to weapon modules
    local function ApplyWeaponMods()
        local modules = FindWeaponModules()
        
        for _, moduleData in pairs(modules) do
            local module = moduleData.module
            
            -- Look for weapon properties
            for key, value in pairs(module) do
                -- No recoil
                if GunModSettings.NoRecoil and 
                   (key:lower():find("recoil") or key:lower():find("spread") or key:lower():find("kick")) and
                   type(value) == "number" and value > 0 then
                    module[key] = 0
                end
                
                -- No spread
                if GunModSettings.NoSpread and
                   (key:lower():find("spread") or key:lower():find("accuracy") or key:lower():find("deviation")) and
                   type(value) == "number" and value > 0 then
                    module[key] = 0
                end
                
                -- Rapid fire
                if GunModSettings.RapidFire and
                   (key:lower():find("firerate") or key:lower():find("cooldown") or 
                    key:lower():find("delay") or key:lower():find("fire_rate")) and
                   type(value) == "number" and value > 0 then
                    module[key] = 0.05 -- Very fast fire rate
                end
                
                -- Instant reload
                if GunModSettings.InstantReload and
                   (key:lower():find("reload") or key:lower():find("reload_time")) and
                   type(value) == "number" and value > 0 then
                    module[key] = 0.05 -- Almost instant
                end
                
                -- Infinite ammo
                if GunModSettings.InfiniteAmmo and
                   (key:lower():find("ammo") or key:lower():find("mag") or 
                    key:lower():find("clip") or key:lower():find("magazine")) and
                   type(value) == "number" then
                    module[key] = math.huge -- Set to maximum
                end
                
                -- Auto fire
                if GunModSettings.AutoFire and
                   (key:lower():find("automatic") or key:lower():find("auto") or 
                    key:lower():find("mode") or key:lower():find("fire_mode")) and
                   type(value) == "boolean" then
                    module[key] = true -- Enable auto fire
                end
            end
        end
    end
    
    -- Return controller
    return {
        SetNoRecoil = function(value)
            GunModSettings.NoRecoil = value
            ApplyWeaponMods()
        end,
        SetNoSpread = function(value)
            GunModSettings.NoSpread = value
            ApplyWeaponMods()
        end,
        SetRapidFire = function(value)
            GunModSettings.RapidFire = value
            ApplyWeaponMods()
        end,
        SetInstantReload = function(value)
            GunModSettings.InstantReload = value
            ApplyWeaponMods()
        end,
        SetInfiniteAmmo = function(value)
            GunModSettings.InfiniteAmmo = value
            ApplyWeaponMods()
        end,
        SetAutoFire = function(value)
            GunModSettings.AutoFire = value
            ApplyWeaponMods()
        end,
        UnlockAllGuns = function()
            -- Try to find and unlock all weapons
            local unlocked = false
            
            -- Look for unlock functions in ReplicatedStorage
            for _, remote in pairs(ReplicatedStorage:GetDescendants()) do
                if (remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction")) and
                   (remote.Name:lower():find("unlock") or remote.Name:lower():find("purchase")) then
                    
                    pcall(function()
                        remote:FireServer("Unlock", "All")
                        remote:FireServer("Purchase", "All")
                    end)
                    unlocked = true
                end
            end
            
            return unlocked
        end,
        MaxAmmoCurrentWeapon = function()
            -- Find and max ammo for current weapon
            local character = LocalPlayer.Character
            if not character then return false end
            
            local tool = character:FindFirstChildOfClass("Tool")
            if not tool then return false end
            
            -- Look for ammo values
            for _, obj in pairs(tool:GetDescendants()) do
                if obj:IsA("NumberValue") and
                   (obj.Name:lower():find("ammo") or obj.Name:lower():find("mag") or obj.Name:lower():find("clip")) then
                    obj.Value = 999
                    return true
                end
            end
            
            return false
        end,
        Stop = function()
            -- Reset gun mods
            GunModSettings.NoRecoil = false
            GunModSettings.NoSpread = false
            GunModSettings.RapidFire = false
            GunModSettings.InstantReload = false
            GunModSettings.InfiniteAmmo = false
            GunModSettings.AutoFire = false
        end
    }
end

-- Initialize modules
local ESP = CreateESP()
local GunMods = CreateGunMods()

-- Add main buttons
MainSection:AddButton({
    Name = "Auto Unlock All Guns",
    Callback = function()
        local success = GunMods.UnlockAllGuns()
        if success then
            Notify("SkyX Hub", "All guns unlocked!", 3)
        else
            Notify("SkyX Hub", "Failed to unlock guns", 3)
        end
    end
})

MainSection:AddButton({
    Name = "Max Ammo (Current Weapon)",
    Callback = function()
        local success = GunMods.MaxAmmoCurrentWeapon()
        if success then
            Notify("SkyX Hub", "Ammo maximized!", 3)
        else
            Notify("SkyX Hub", "No weapon equipped", 3)
        end
    end
})

-- Auto Farm section
local AutoFarmSection = MainTab:AddSection({
    Name = "Auto Farm"
})

-- Auto-end toggle
AutoFarmSection:AddToggle({
    Name = "Auto Round Completion",
    Default = false,
    Callback = function(Value)
        _G.AutoEndEnabled = Value
        
        if Value then
            -- Auto end implementation
            _G.AutoEndConnection = RunService.Heartbeat:Connect(function()
                -- Look for end round triggers/locations
                for _, obj in pairs(Workspace:GetDescendants()) do
                    if (obj.Name:lower():find("end") or obj.Name:lower():find("finish") or obj.Name:lower():find("complete")) and
                       (obj:IsA("Part") or obj:IsA("BasePart")) then
                        
                        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            -- Teleport to end position
                            LocalPlayer.Character.HumanoidRootPart.CFrame = obj.CFrame
                        end
                    end
                end
                
                -- Try to find and trigger round end remotes
                for _, remote in pairs(ReplicatedStorage:GetDescendants()) do
                    if (remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction")) and 
                       (remote.Name:lower():find("end") or remote.Name:lower():find("finish") or 
                        remote.Name:lower():find("complete") or remote.Name:lower():find("round")) then
                        
                        pcall(function()
                            remote:FireServer("End", "Complete")
                        end)
                    end
                end
            end)
        else
            if _G.AutoEndConnection then
                _G.AutoEndConnection:Disconnect()
                _G.AutoEndConnection = nil
            end
        end
    end
})

-- Auto bone toggle
AutoFarmSection:AddToggle({
    Name = "Auto Bone Farm",
    Default = false,
    Callback = function(Value)
        _G.AutoBoneEnabled = Value
        
        if Value then
            -- Auto bone implementation
            _G.AutoBoneConnection = RunService.Heartbeat:Connect(function()
                -- Look for bone items
                for _, obj in pairs(Workspace:GetDescendants()) do
                    if (obj.Name:lower():find("bone") or obj.Name:lower():find("collect") or obj.Name:lower():find("pickup")) and
                       (obj:IsA("Part") or obj:IsA("BasePart") or obj:IsA("Model")) then
                        
                        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            -- Teleport to bone
                            local targetPos
                            if obj:IsA("Model") and obj:FindFirstChild("PrimaryPart") then
                                targetPos = obj.PrimaryPart.Position
                            else
                                targetPos = obj.Position
                            end
                            
                            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPos)
                            
                            -- Wait a bit before next teleport
                            wait(0.1)
                        end
                    end
                end
                
                -- Try to trigger collection remotes
                for _, remote in pairs(ReplicatedStorage:GetDescendants()) do
                    if (remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction")) and 
                       (remote.Name:lower():find("collect") or remote.Name:lower():find("pickup") or 
                        remote.Name:lower():find("bone") or remote.Name:lower():find("get")) then
                        
                        pcall(function()
                            remote:FireServer("Collect", "All")
                        end)
                    end
                end
            end)
        else
            if _G.AutoBoneConnection then
                _G.AutoBoneConnection:Disconnect()
                _G.AutoBoneConnection = nil
            end
        end
    end
})

-- Advanced farm settings
AutoFarmSection:AddSlider({
    Name = "Farm Delay (ms)",
    Min = 100,
    Max = 2000,
    Default = 500,
    Color = Color3.fromRGB(90, 120, 240),
    Increment = 100,
    ValueName = "ms",
    Callback = function(Value)
        _G.FarmDelay = Value / 1000 -- Convert to seconds
    end
})

-- Auto farm distance
AutoFarmSection:AddSlider({
    Name = "Farm Distance",
    Min = 5,
    Max = 100,
    Default = 20,
    Color = Color3.fromRGB(90, 120, 240),
    Increment = 5,
    ValueName = "studs",
    Callback = function(Value)
        _G.FarmDistance = Value
    end
})

-- Create ESP Tab
local ESPTab = Window:MakeTab({
    Name = "ESP",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- ESP Section
local ESPSection = ESPTab:AddSection({
    Name = "Player ESP"
})

-- ESP Toggle
ESPSection:AddToggle({
    Name = "Enable ESP",
    Default = false,
    Callback = function(Value)
        ESP.SetEnabled(Value)
    end
})

-- ESP Settings
ESPSection:AddToggle({
    Name = "Show Names",
    Default = true,
    Callback = function(Value)
        ESP.SetShowName(Value)
    end
})

ESPSection:AddToggle({
    Name = "Show Distance",
    Default = true,
    Callback = function(Value)
        ESP.SetShowDistance(Value)
    end
})

ESPSection:AddToggle({
    Name = "Team Check",
    Default = true,
    Callback = function(Value)
        ESP.SetTeamCheck(Value)
    end
})

ESPSection:AddToggle({
    Name = "Item ESP",
    Default = false,
    Callback = function(Value)
        ESP.SetItemESP(Value)
    end
})

-- World Section
local WorldSection = ESPTab:AddSection({
    Name = "World"
})

-- Full bright
WorldSection:AddToggle({
    Name = "Full Bright",
    Default = false,
    Callback = function(Value)
        if Value then
            -- Store original lighting settings
            _G.OriginalAmbient = Lighting.Ambient
            _G.OriginalBrightness = Lighting.Brightness
            _G.OriginalClockTime = Lighting.ClockTime
            _G.OriginalFogEnd = Lighting.FogEnd
            _G.OriginalGlobalShadows = Lighting.GlobalShadows
            
            -- Apply full bright
            Lighting.Ambient = Color3.fromRGB(255, 255, 255)
            Lighting.Brightness = 2
            Lighting.ClockTime = 14
            Lighting.FogEnd = 100000
            Lighting.GlobalShadows = false
        else
            -- Restore original lighting
            if _G.OriginalAmbient then Lighting.Ambient = _G.OriginalAmbient end
            if _G.OriginalBrightness then Lighting.Brightness = _G.OriginalBrightness end
            if _G.OriginalClockTime then Lighting.ClockTime = _G.OriginalClockTime end
            if _G.OriginalFogEnd then Lighting.FogEnd = _G.OriginalFogEnd end
            if _G.OriginalGlobalShadows then Lighting.GlobalShadows = _G.OriginalGlobalShadows end
        end
    end
})

-- No fog
WorldSection:AddToggle({
    Name = "No Fog",
    Default = false,
    Callback = function(Value)
        if Value then
            -- Save original fog settings
            _G.OriginalFogStart = Lighting.FogStart
            _G.OriginalFogEnd = Lighting.FogEnd
            
            -- Remove fog
            Lighting.FogStart = 100000
            Lighting.FogEnd = 100000
        else
            -- Restore original fog
            if _G.OriginalFogStart then Lighting.FogStart = _G.OriginalFogStart end
            if _G.OriginalFogEnd then Lighting.FogEnd = _G.OriginalFogEnd end
        end
    end
})

-- Gun Mods Tab
local GunModsTab = Window:MakeTab({
    Name = "Gun Mods",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Gun Mods Section
local GunModsSection = GunModsTab:AddSection({
    Name = "Weapon Modifications"
})

-- Gun mod toggles
GunModsSection:AddToggle({
    Name = "No Recoil",
    Default = false,
    Callback = function(Value)
        GunMods.SetNoRecoil(Value)
    end
})

GunModsSection:AddToggle({
    Name = "No Spread",
    Default = false,
    Callback = function(Value)
        GunMods.SetNoSpread(Value)
    end
})

GunModsSection:AddToggle({
    Name = "Rapid Fire",
    Default = false,
    Callback = function(Value)
        GunMods.SetRapidFire(Value)
    end
})

GunModsSection:AddToggle({
    Name = "Instant Reload",
    Default = false,
    Callback = function(Value)
        GunMods.SetInstantReload(Value)
    end
})

GunModsSection:AddToggle({
    Name = "Infinite Ammo",
    Default = false,
    Callback = function(Value)
        GunMods.SetInfiniteAmmo(Value)
    end
})

GunModsSection:AddToggle({
    Name = "Auto Fire",
    Default = false,
    Callback = function(Value)
        GunMods.SetAutoFire(Value)
    end
})

-- Player Tab
local PlayerTab = Window:MakeTab({
    Name = "Player",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Movement Section
local MovementSection = PlayerTab:AddSection({
    Name = "Movement"
})

-- Walk speed
MovementSection:AddSlider({
    Name = "Walk Speed",
    Min = 16,
    Max = 250,
    Default = 16,
    Color = Color3.fromRGB(90, 120, 240),
    Increment = 5,
    ValueName = "speed",
    Callback = function(Value)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end
        
        -- Keep applying speed on respawn
        _G.SelectedWalkSpeed = Value
    end
})

-- Jump power
MovementSection:AddSlider({
    Name = "Jump Power",
    Min = 50,
    Max = 300,
    Default = 50,
    Color = Color3.fromRGB(90, 120, 240),
    Increment = 10,
    ValueName = "power",
    Callback = function(Value)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.JumpPower = Value
        end
        
        -- Keep applying jump power on respawn
        _G.SelectedJumpPower = Value
    end
})

-- Infinite jump
MovementSection:AddToggle({
    Name = "Infinite Jump",
    Default = false,
    Callback = function(Value)
        _G.InfiniteJump = Value
    end
})

-- Connect infinite jump
UserInputService.JumpRequest:Connect(function()
    if _G.InfiniteJump and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- Fly section
local FlySection = PlayerTab:AddSection({
    Name = "Flying"
})

-- Fly toggle
FlySection:AddToggle({
    Name = "Enable Fly",
    Default = false,
    Callback = function(Value)
        _G.FlyEnabled = Value
        
        if Value then
            -- Implement basic flying
            local character = LocalPlayer.Character
            if not character or not character:FindFirstChild("HumanoidRootPart") then return end
            
            -- Create fly parts
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.Name = "SkyXFlyVelocity"
            bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.Parent = character.HumanoidRootPart
            
            local bodyGyro = Instance.new("BodyGyro")
            bodyGyro.Name = "SkyXFlyGyro"
            bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
            bodyGyro.P = 9000
            bodyGyro.D = 100
            bodyGyro.CFrame = character.HumanoidRootPart.CFrame
            bodyGyro.Parent = character.HumanoidRootPart
            
            -- Fly loop
            _G.FlyLoop = RunService.RenderStepped:Connect(function()
                if not _G.FlyEnabled or not character or not character:FindFirstChild("HumanoidRootPart") or
                   not character.HumanoidRootPart:FindFirstChild("SkyXFlyVelocity") then
                    if _G.FlyLoop then
                        _G.FlyLoop:Disconnect()
                        _G.FlyLoop = nil
                    end
                    return
                end
                
                -- Get fly controls
                local flySpeed = _G.FlySpeed or 100
                local controls = {
                    Forward = UserInputService:IsKeyDown(Enum.KeyCode.W) or UserInputService:IsKeyDown(Enum.KeyCode.Up),
                    Backward = UserInputService:IsKeyDown(Enum.KeyCode.S) or UserInputService:IsKeyDown(Enum.KeyCode.Down),
                    Left = UserInputService:IsKeyDown(Enum.KeyCode.A) or UserInputService:IsKeyDown(Enum.KeyCode.Left),
                    Right = UserInputService:IsKeyDown(Enum.KeyCode.D) or UserInputService:IsKeyDown(Enum.KeyCode.Right),
                    Up = UserInputService:IsKeyDown(Enum.KeyCode.Space) or UserInputService:IsKeyDown(Enum.KeyCode.E),
                    Down = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) or UserInputService:IsKeyDown(Enum.KeyCode.Q)
                }
                
                -- Calculate fly direction
                local camera = game.Workspace.CurrentCamera
                local flyDirection = Vector3.new(0, 0, 0)
                
                if controls.Forward then
                    flyDirection = flyDirection + camera.CFrame.LookVector
                end
                if controls.Backward then
                    flyDirection = flyDirection - camera.CFrame.LookVector
                end
                if controls.Left then
                    flyDirection = flyDirection - camera.CFrame.RightVector
                end
                if controls.Right then
                    flyDirection = flyDirection + camera.CFrame.RightVector
                end
                if controls.Up then
                    flyDirection = flyDirection + Vector3.new(0, 1, 0)
                end
                if controls.Down then
                    flyDirection = flyDirection - Vector3.new(0, 1, 0)
                end
                
                -- Normalize direction
                if flyDirection.Magnitude > 0 then
                    flyDirection = flyDirection.Unit * flySpeed
                end
                
                -- Apply velocity
                character.HumanoidRootPart.SkyXFlyVelocity.Velocity = flyDirection
                
                -- Update gyro
                if flyDirection.Magnitude > 0 and not controls.Up and not controls.Down then
                    character.HumanoidRootPart.SkyXFlyGyro.CFrame = CFrame.lookAt(
                        character.HumanoidRootPart.Position,
                        character.HumanoidRootPart.Position + Vector3.new(flyDirection.X, 0, flyDirection.Z)
                    )
                else
                    character.HumanoidRootPart.SkyXFlyGyro.CFrame = camera.CFrame
                end
            end)
            
            -- Add mobile controls if on mobile
            if IsMobile then
                -- TODO: Add mobile fly controls GUI
                Notify("SkyX Hub", "Mobile flying enabled - use joystick for movement", 5)
            end
        else
            -- Clean up flying
            local character = LocalPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local bodyVelocity = character.HumanoidRootPart:FindFirstChild("SkyXFlyVelocity")
                local bodyGyro = character.HumanoidRootPart:FindFirstChild("SkyXFlyGyro")
                
                if bodyVelocity then bodyVelocity:Destroy() end
                if bodyGyro then bodyGyro:Destroy() end
            end
            
            if _G.FlyLoop then
                _G.FlyLoop:Disconnect()
                _G.FlyLoop = nil
            end
        end
    end
})

-- Fly speed
FlySection:AddSlider({
    Name = "Fly Speed",
    Min = 10,
    Max = 500,
    Default = 100,
    Color = Color3.fromRGB(90, 120, 240),
    Increment = 10,
    ValueName = "speed",
    Callback = function(Value)
        _G.FlySpeed = Value
    end
})

-- No clip toggle
FlySection:AddToggle({
    Name = "No Clip",
    Default = false,
    Callback = function(Value)
        _G.NoClipEnabled = Value
        
        if Value then
            -- Create noclip loop
            _G.NoClipLoop = RunService.Stepped:Connect(function()
                if LocalPlayer.Character then
                    for _, child in pairs(LocalPlayer.Character:GetDescendants()) do
                        if child:IsA("BasePart") and child.CanCollide then
                            child.CanCollide = false
                        end
                    end
                end
            end)
        else
            -- Remove noclip
            if _G.NoClipLoop then
                _G.NoClipLoop:Disconnect()
                _G.NoClipLoop = nil
            end
            
            -- Reset collision
            if LocalPlayer.Character then
                for _, child in pairs(LocalPlayer.Character:GetDescendants()) do
                    if child:IsA("BasePart") then
                        child.CanCollide = true
                    end
                end
            end
        end
    end
})

-- Teleport Section
local TeleportSection = PlayerTab:AddSection({
    Name = "Teleport"
})

-- Teleport to random weapon
TeleportSection:AddButton({
    Name = "TP to Random Gun",
    Callback = function()
        -- Find guns in workspace
        local guns = {}
        for _, obj in pairs(Workspace:GetDescendants()) do
            if obj:IsA("BasePart") and 
               (obj.Name:lower():find("gun") or obj.Name:lower():find("weapon") or 
                obj.Name:lower():find("rifle") or obj.Name:lower():find("pistol")) then
                table.insert(guns, obj)
            end
        end
        
        if #guns > 0 then
            -- Choose random gun
            local randomGun = guns[math.random(1, #guns)]
            
            -- Teleport to it
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(randomGun.Position)
                Notify("SkyX Hub", "Teleported to gun", 3)
            end
        else
            Notify("SkyX Hub", "No guns found", 3)
        end
    end
})

-- Teleport to nearest player
TeleportSection:AddButton({
    Name = "TP to Nearest Enemy",
    Callback = function()
        local nearestPlayer = nil
        local nearestDistance = math.huge
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and
               player.Character:FindFirstChild("HumanoidRootPart") and
               LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                
                local distance = (player.Character.HumanoidRootPart.Position - 
                                  LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                
                if distance < nearestDistance then
                    nearestPlayer = player
                    nearestDistance = distance
                end
            end
        end
        
        if nearestPlayer then
            LocalPlayer.Character.HumanoidRootPart.CFrame = 
                CFrame.new(nearestPlayer.Character.HumanoidRootPart.Position)
            Notify("SkyX Hub", "Teleported to " .. nearestPlayer.Name, 3)
        else
            Notify("SkyX Hub", "No enemies found", 3)
        end
    end
})

-- Update game info initially
UpdateGameInfo()

-- Handle character respawning
LocalPlayer.CharacterAdded:Connect(function(character)
    -- Wait for humanoid
    local humanoid = character:WaitForChild("Humanoid")
    
    -- Reapply speed and jump power
    if _G.SelectedWalkSpeed then
        humanoid.WalkSpeed = _G.SelectedWalkSpeed
    end
    if _G.SelectedJumpPower then
        humanoid.JumpPower = _G.SelectedJumpPower
    end
    
    -- Re-enable fly if it was enabled
    if _G.FlyEnabled then
        _G.FlyEnabled = false
        wait(0.5)
        
        -- Find fly toggle in the UI
        for _, tab in pairs(Window.Tabs) do
            if tab.Name == "Player" then
                for _, section in pairs(tab.Sections) do
                    if section.Name == "Flying" then
                        for _, element in pairs(section.Elements) do
                            if element.Name == "Enable Fly" and element.Type == "Toggle" then
                                element:Set(true)
                                break
                            end
                        end
                    end
                end
            end
        end
    end
    
    -- Re-enable noclip if it was enabled
    if _G.NoClipEnabled then
        -- Create noclip loop again
        _G.NoClipLoop = RunService.Stepped:Connect(function()
            if character then
                for _, child in pairs(character:GetDescendants()) do
                    if child:IsA("BasePart") and child.CanCollide then
                        child.CanCollide = false
                    end
                end
            end
        end)
    end
end)

-- Initialize script
OrionLib:Init()

-- Set default variables
_G.FarmDelay = 0.5
_G.FarmDistance = 20
_G.FlySpeed = 100

-- Send success notification
Notify("SkyX Hub", "Dead Rails script loaded!", 5)

print("SkyX Dead Rails Orion loaded successfully!")
