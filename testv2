--[[
    SkyX Blox Fruits Script
    Mobile-friendly with MM2-stylmjm mm m m m m mm e fallback modules
    Works on: KRNL, Swift, Fluxus, Delta and other mobile executors
]]

-- Detect device type
local IsMobile = (function()
    local success, result = pcall(function()
        return game:GetService("UserInputService").TouchEnabled and 
               not game:GetService("UserInputService").MouseEnabled
    end)
    return success and result or false
end)()

local DeviceText = IsMobile and "Mobile" or "PC"

-- Core services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- GitHub Module URLs
local ModuleURLs = {
    AutoFarm = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/AutoFarm%20(3).lua",
    ESP = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/ESP%20(1).lua",
    DevilFruit = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/DevilFruit%20(1).lua",
    Teleport = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/Teleport%20(1).lua",
    AntiBan = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/AntiBan%20(1).lua",
    Stats = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/Stats%20(1).lua",
    Items = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/Items.lua",
    Combat = "https://raw.githubusercontent.com/SkyXhub/modularsystem.lua/refs/heads/main/Combat.lua"
}

-- Placeholder for modules that will be loaded after UI creation
local Modules = {}

-- Load a module from URL
local function LoadModule(moduleName)
    local url = ModuleURLs[moduleName]
    if not url then
        warn("No URL found for module: " .. moduleName)
        return nil
    end
    
    local success, result = pcall(function()
        return loadstring(game:HttpGet(url))()
    end)
    
    if success then
        print("‚úÖ Successfully loaded: " .. moduleName)
        return result
    else
        warn("‚ùå Failed to load: " .. moduleName .. " | Error: " .. tostring(result))
        -- Create fallback placeholder module
        local placeholderModule = {}
        placeholderModule.Settings = {}
        placeholderModule.Start = function() end
        placeholderModule.Stop = function() end
        return placeholderModule
    end
end

-- Create connections table for cleanup
local Connections = {}

-- Function to add connection and track it for cleanup
local function AddConnection(signal, callback)
    if not signal then
        warn("SkyX: Attempted to connect to nil signal")
        return
    end
    
    local connection = signal:Connect(callback)
    table.insert(Connections, connection)
    return connection
end

print("SkyX Blox Fruits - Starting on " .. DeviceText .. " device")

-- UI Colors
local Colors = {
    Background = Color3.fromRGB(25, 25, 35),      -- Dark background
    Container = Color3.fromRGB(30, 30, 45),       -- Slightly lighter container
    Button = Color3.fromRGB(90, 120, 240),        -- Modern blue for buttons
    Text = Color3.fromRGB(255, 255, 255),         -- White text
    Border = Color3.fromRGB(100, 130, 255),       -- Lighter blue border
    TabActive = Color3.fromRGB(90, 120, 240),     -- Match button color
    TabInactive = Color3.fromRGB(50, 50, 70),     -- Darker for inactive
    Success = Color3.fromRGB(70, 200, 120),       -- Green for success/enabled
    Danger = Color3.fromRGB(240, 70, 90),         -- Red for danger/disabled
    Warning = Color3.fromRGB(240, 180, 60),       -- Yellow for warnings
    Highlight = Color3.fromRGB(140, 160, 255)     -- Light purple highlight
}

-- Create UI
local SkyXUI = Instance.new("ScreenGui")
SkyXUI.Name = "SkyXUI_BloxFruits"
SkyXUI.ResetOnSpawn = false
SkyXUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Handle executor security models
if syn then
    syn.protect_gui(SkyXUI)
    SkyXUI.Parent = game.CoreGui
else
    SkyXUI.Parent = gethui and gethui() or game.CoreGui
end

-- Remove any existing UIs with the same name
for _, Interface in pairs(game.CoreGui:GetChildren()) do
    if Interface.Name == SkyXUI.Name and Interface ~= SkyXUI then
        Interface:Destroy()
    end
end

-- Create main window
local MainWindow = Instance.new("Frame")
MainWindow.Name = "MainWindow"
MainWindow.Size = UDim2.new(0, 500, 0, 350)
MainWindow.Position = UDim2.new(0.5, -250, 0.5, -175)
MainWindow.BackgroundColor3 = Colors.Background
MainWindow.BorderSizePixel = 0
MainWindow.Active = true
MainWindow.Draggable = false -- We'll implement custom dragging
MainWindow.Parent = SkyXUI

-- Add corner
local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 8)
MainCorner.Parent = MainWindow

-- Add shadow effect
local MainShadow = Instance.new("ImageLabel")
MainShadow.Name = "Shadow"
MainShadow.AnchorPoint = Vector2.new(0.5, 0.5)
MainShadow.Size = UDim2.new(1, 30, 1, 30)
MainShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
MainShadow.BackgroundTransparency = 1
MainShadow.Image = "rbxassetid://6015897843" -- Shadow image
MainShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
MainShadow.ImageTransparency = 0.6
MainShadow.ZIndex = 0 -- Behind the main window
MainShadow.Parent = MainWindow

-- Create title bar
local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Size = UDim2.new(1, 0, 0, 40)
TitleBar.BackgroundColor3 = Colors.Button
TitleBar.BorderSizePixel = 0
TitleBar.Parent = MainWindow

-- Add corner to title bar
local TitleCorner = Instance.new("UICorner")
TitleCorner.CornerRadius = UDim.new(0, 8)
TitleCorner.Parent = TitleBar

-- Fix corners
local CornerFix = Instance.new("Frame")
CornerFix.Name = "CornerFix"
CornerFix.Size = UDim2.new(1, 0, 0, 10)
CornerFix.Position = UDim2.new(0, 0, 1, -10)
CornerFix.BackgroundColor3 = Colors.Button
CornerFix.BorderSizePixel = 0
CornerFix.Parent = TitleBar

-- Add title text
local TitleText = Instance.new("TextLabel")
TitleText.Name = "Title"
TitleText.Size = UDim2.new(1, -50, 1, 0)
TitleText.Position = UDim2.new(0, 15, 0, 0)
TitleText.BackgroundTransparency = 1
TitleText.Font = Enum.Font.GothamBold
TitleText.TextSize = 16
TitleText.TextColor3 = Colors.Text
TitleText.TextXAlignment = Enum.TextXAlignment.Left
TitleText.Text = "üåä SkyX Hub - Blox Fruits üåä"
TitleText.Parent = TitleBar

-- Add close button
local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -40, 0, 5)
CloseButton.BackgroundTransparency = 1
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextSize = 20
CloseButton.TextColor3 = Colors.Text
CloseButton.Text = "√ó"
CloseButton.Parent = TitleBar

-- Make title bar draggable
local dragging = false
local dragInput
local dragStart
local startPos

AddConnection(TitleBar.InputBegan, function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = MainWindow.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

AddConnection(TitleBar.InputChanged, function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

AddConnection(UserInputService.InputChanged, function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        MainWindow.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Create tab container
local TabContainer = Instance.new("Frame")
TabContainer.Name = "TabContainer"
TabContainer.Size = UDim2.new(1, 0, 0, 35)
TabContainer.Position = UDim2.new(0, 0, 0, 40)
TabContainer.BackgroundTransparency = 1
TabContainer.Parent = MainWindow

-- Create tab button layout
local TabLayout = Instance.new("UIListLayout")
TabLayout.FillDirection = Enum.FillDirection.Horizontal
TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
TabLayout.Padding = UDim.new(0, 5)
TabLayout.Parent = TabContainer

-- Add padding to tabs
local TabPadding = Instance.new("UIPadding")
TabPadding.PaddingLeft = UDim.new(0, 10)
TabPadding.PaddingRight = UDim.new(0, 10)
TabPadding.Parent = TabContainer

-- Create content container
local ContentContainer = Instance.new("Frame")
ContentContainer.Name = "ContentContainer"
ContentContainer.Size = UDim2.new(1, 0, 1, -75)
ContentContainer.Position = UDim2.new(0, 0, 0, 75)
ContentContainer.BackgroundTransparency = 1
ContentContainer.Parent = MainWindow

-- Tables to store tabs and sections
local Tabs = {}
local SelectedTab = nil

-- Function to create a new tab
local function CreateTab(name)
    -- Create tab button
    local TabButton = Instance.new("TextButton")
    TabButton.Name = name .. "TabButton"
    TabButton.Size = UDim2.new(0, 100, 1, 0)
    TabButton.BackgroundColor3 = Colors.TabInactive
    TabButton.BorderSizePixel = 0
    TabButton.Font = Enum.Font.Gotham
    TabButton.TextSize = 14
    TabButton.TextColor3 = Colors.Text
    TabButton.Text = name
    TabButton.LayoutOrder = #Tabs + 1
    TabButton.Parent = TabContainer
    
    -- Add corner to tab button
    local TabCorner = Instance.new("UICorner")
    TabCorner.CornerRadius = UDim.new(0, 5)
    TabCorner.Parent = TabButton
    
    -- Create tab page
    local TabPage = Instance.new("ScrollingFrame")
    TabPage.Name = name .. "Tab"
    TabPage.Size = UDim2.new(1, -20, 1, -10)
    TabPage.Position = UDim2.new(0, 10, 0, 5)
    TabPage.BackgroundTransparency = 1
    TabPage.BorderSizePixel = 0
    TabPage.ScrollBarThickness = 4
    TabPage.ScrollBarImageColor3 = Colors.Button
    TabPage.Visible = false
    TabPage.Parent = ContentContainer
    
    -- Add layout to tab page
    local TabPageLayout = Instance.new("UIListLayout")
    TabPageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabPageLayout.Padding = UDim.new(0, 10)
    TabPageLayout.Parent = TabPage
    
    -- Auto adjust canvas size
    AddConnection(TabPageLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        TabPage.CanvasSize = UDim2.new(0, 0, 0, TabPageLayout.AbsoluteContentSize.Y + 20)
    end)
    
    -- Create tab object
    local Tab = {
        Name = name,
        Button = TabButton,
        Page = TabPage,
        Sections = {}
    }
    
    -- Add click functionality to switch tabs
    AddConnection(TabButton.MouseButton1Click, function()
        -- Hide all tabs and deactivate buttons
        for _, tab in pairs(Tabs) do
            tab.Page.Visible = false
            tab.Button.BackgroundColor3 = Colors.TabInactive
        end
        
        -- Show selected tab and activate button
        TabPage.Visible = true
        TabButton.BackgroundColor3 = Colors.TabActive
        SelectedTab = Tab
    end)
    
    -- Add to tabs table
    table.insert(Tabs, Tab)
    
    -- If this is the first tab, select it
    if #Tabs == 1 then
        TabPage.Visible = true
        TabButton.BackgroundColor3 = Colors.TabActive
        SelectedTab = Tab
    end
    
    return Tab
end

-- Function to create a section in a tab
local function CreateSection(tab, name)
    -- Create section container
    local Section = Instance.new("Frame")
    Section.Name = name .. "Section"
    Section.Size = UDim2.new(1, 0, 0, 40) -- Initial size, will grow
    Section.BackgroundColor3 = Colors.Container
    Section.BorderSizePixel = 0
    Section.LayoutOrder = #tab.Sections + 1
    Section.Parent = tab.Page
    
    -- Add corner
    local SectionCorner = Instance.new("UICorner")
    SectionCorner.CornerRadius = UDim.new(0, 6)
    SectionCorner.Parent = Section
    
    -- Add title
    local SectionTitle = Instance.new("TextLabel")
    SectionTitle.Name = "Title"
    SectionTitle.Size = UDim2.new(1, -20, 0, 30)
    SectionTitle.Position = UDim2.new(0, 10, 0, 0)
    SectionTitle.BackgroundTransparency = 1
    SectionTitle.Font = Enum.Font.GothamSemibold
    SectionTitle.TextSize = 14
    SectionTitle.TextColor3 = Colors.Text
    SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    SectionTitle.Text = name
    SectionTitle.Parent = Section
    
    -- Add content container
    local SectionContainer = Instance.new("Frame")
    SectionContainer.Name = "Container"
    SectionContainer.Size = UDim2.new(1, -20, 1, -30)
    SectionContainer.Position = UDim2.new(0, 10, 0, 30)
    SectionContainer.BackgroundTransparency = 1
    SectionContainer.Parent = Section
    
    -- Add layout
    local SectionLayout = Instance.new("UIListLayout")
    SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
    SectionLayout.Padding = UDim.new(0, 5)
    SectionLayout.Parent = SectionContainer
    
    -- Auto-size section based on content
    AddConnection(SectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        Section.Size = UDim2.new(1, 0, 0, SectionLayout.AbsoluteContentSize.Y + 40) -- Title height (30) + padding
    end)
    
    -- Create section object with methods
    local SectionObj = {
        Frame = Section,
        Container = SectionContainer,
        Elements = {}
    }
    
    -- Method to add a button
    function SectionObj:AddButton(text, callback)
        local Button = Instance.new("TextButton")
        Button.Name = text .. "Button"
        Button.Size = UDim2.new(1, 0, 0, 30)
        Button.BackgroundColor3 = Colors.Button
        Button.BorderSizePixel = 0
        Button.Font = Enum.Font.Gotham
        Button.TextSize = 14
        Button.TextColor3 = Colors.Text
        Button.Text = text
        Button.LayoutOrder = #self.Elements
        Button.Parent = self.Container
        
        -- Add corner
        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 5)
        ButtonCorner.Parent = Button
        
        -- Add hover effect
        AddConnection(Button.MouseEnter, function()
            Button.BackgroundColor3 = Colors.Highlight
        end)
        
        AddConnection(Button.MouseLeave, function()
            Button.BackgroundColor3 = Colors.Button
        end)
        
        -- Add click functionality
        if callback then
            AddConnection(Button.MouseButton1Click, callback)
        end
        
        -- Create button object
        local ButtonObj = {
            Button = Button,
            SetText = function(_, newText)
                Button.Text = newText
            end
        }
        
        table.insert(self.Elements, ButtonObj)
        return ButtonObj
    end
    
    -- Method to add a toggle
    function SectionObj:AddToggle(text, default, callback)
        -- Create toggle container
        local ToggleContainer = Instance.new("Frame")
        ToggleContainer.Name = text .. "ToggleContainer"
        ToggleContainer.Size = UDim2.new(1, 0, 0, 30)
        ToggleContainer.BackgroundTransparency = 1
        ToggleContainer.LayoutOrder = #self.Elements
        ToggleContainer.Parent = self.Container
        
        -- Create label
        local Label = Instance.new("TextLabel")
        Label.Name = "Label"
        Label.Size = UDim2.new(1, -50, 1, 0)
        Label.BackgroundTransparency = 1
        Label.Font = Enum.Font.Gotham
        Label.TextSize = 14
        Label.TextColor3 = Colors.Text
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Text = text
        Label.Parent = ToggleContainer
        
        -- Create toggle button
        local ToggleFrame = Instance.new("Frame")
        ToggleFrame.Name = "ToggleFrame"
        ToggleFrame.Size = UDim2.new(0, 40, 0, 20)
        ToggleFrame.Position = UDim2.new(1, -40, 0.5, -10)
        ToggleFrame.BackgroundColor3 = default and Colors.Success or Colors.Danger
        ToggleFrame.BorderSizePixel = 0
        ToggleFrame.Parent = ToggleContainer
        
        -- Add corner
        local ToggleCorner = Instance.new("UICorner")
        ToggleCorner.CornerRadius = UDim.new(0, 10)
        ToggleCorner.Parent = ToggleFrame
        
        -- Create toggle indicator
        local Indicator = Instance.new("Frame")
        Indicator.Name = "Indicator"
        Indicator.Size = UDim2.new(0, 16, 0, 16)
        Indicator.Position = default and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        Indicator.BackgroundColor3 = Colors.Text
        Indicator.BorderSizePixel = 0
        Indicator.Parent = ToggleFrame
        
        -- Add corner to indicator
        local IndicatorCorner = Instance.new("UICorner")
        IndicatorCorner.CornerRadius = UDim.new(0, 8)
        IndicatorCorner.Parent = Indicator
        
        -- Create the clickable button that covers the whole thing
        local ClickButton = Instance.new("TextButton")
        ClickButton.Name = "ClickButton"
        ClickButton.Size = UDim2.new(1, 0, 1, 0)
        ClickButton.BackgroundTransparency = 1
        ClickButton.Text = ""
        ClickButton.Parent = ToggleContainer
        
        -- Track state
        local enabled = default or false
        
        -- Add click functionality
        AddConnection(ClickButton.MouseButton1Click, function()
            enabled = not enabled
            
            -- Update visuals
            ToggleFrame.BackgroundColor3 = enabled and Colors.Success or Colors.Danger
            
            -- Create animation
            local newPosition = enabled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
            TweenService:Create(Indicator, TweenInfo.new(0.2), {Position = newPosition}):Play()
            
            -- Callback
            if callback then
                callback(enabled)
            end
        end)
        
        -- Create toggle object
        local ToggleObj = {
            Container = ToggleContainer,
            Frame = ToggleFrame,
            Button = ClickButton,
            Enabled = enabled,
            
            -- Set the toggle state
            SetValue = function(_, value)
                enabled = value
                ToggleFrame.BackgroundColor3 = enabled and Colors.Success or Colors.Danger
                Indicator.Position = enabled and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
                
                if callback then
                    callback(enabled)
                end
            end,
            
            -- Get the current state
            GetValue = function()
                return enabled
            end
        }
        
        table.insert(self.Elements, ToggleObj)
        return ToggleObj
    end
    
    -- Method to add a slider
    function SectionObj:AddSlider(text, min, max, default, callback)
        -- Create slider container
        local SliderContainer = Instance.new("Frame")
        SliderContainer.Name = text .. "SliderContainer"
        SliderContainer.Size = UDim2.new(1, 0, 0, 50)
        SliderContainer.BackgroundTransparency = 1
        SliderContainer.LayoutOrder = #self.Elements
        SliderContainer.Parent = self.Container
        
        -- Create label
        local Label = Instance.new("TextLabel")
        Label.Name = "Label"
        Label.Size = UDim2.new(1, -50, 0, 20)
        Label.BackgroundTransparency = 1
        Label.Font = Enum.Font.Gotham
        Label.TextSize = 14
        Label.TextColor3 = Colors.Text
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Text = text
        Label.Parent = SliderContainer
        
        -- Create value label
        local ValueLabel = Instance.new("TextLabel")
        ValueLabel.Name = "Value"
        ValueLabel.Size = UDim2.new(0, 40, 0, 20)
        ValueLabel.Position = UDim2.new(1, -40, 0, 0)
        ValueLabel.BackgroundTransparency = 1
        ValueLabel.Font = Enum.Font.GothamBold
        ValueLabel.TextSize = 14
        ValueLabel.TextColor3 = Colors.Text
        ValueLabel.Text = tostring(default)
        ValueLabel.Parent = SliderContainer
        
        -- Create slider background
        local SliderBackground = Instance.new("Frame")
        SliderBackground.Name = "Background"
        SliderBackground.Size = UDim2.new(1, 0, 0, 10)
        SliderBackground.Position = UDim2.new(0, 0, 0, 30)
        SliderBackground.BackgroundColor3 = Colors.Container
        SliderBackground.BorderSizePixel = 0
        SliderBackground.Parent = SliderContainer
        
        -- Add corner
        local BackgroundCorner = Instance.new("UICorner")
        BackgroundCorner.CornerRadius = UDim.new(0, 5)
        BackgroundCorner.Parent = SliderBackground
        
        -- Create slider fill
        local SliderFill = Instance.new("Frame")
        SliderFill.Name = "Fill"
        SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        SliderFill.BackgroundColor3 = Colors.Button
        SliderFill.BorderSizePixel = 0
        SliderFill.Parent = SliderBackground
        
        -- Add corner to fill
        local FillCorner = Instance.new("UICorner")
        FillCorner.CornerRadius = UDim.new(0, 5)
        FillCorner.Parent = SliderFill
        
        -- Create slider button for better interaction
        local SliderButton = Instance.new("TextButton")
        SliderButton.Name = "SliderButton"
        SliderButton.Size = UDim2.new(1, 0, 1, 0)
        SliderButton.BackgroundTransparency = 1
        SliderButton.Text = ""
        SliderButton.Parent = SliderBackground
        
        -- Track value
        local value = default or min
        
        -- Function to update slider
        local function updateSlider(newValue)
            -- Clamp value
            newValue = math.clamp(newValue, min, max)
            value = newValue
            
            -- Update visuals
            SliderFill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
            ValueLabel.Text = tostring(math.floor(value * 10) / 10) -- Round to 1 decimal
            
            -- Callback
            if callback then
                callback(value)
            end
        end
        
        -- Add drag functionality
        local isDragging = false
        
        AddConnection(SliderButton.MouseButton1Down, function()
            isDragging = true
        end)
        
        AddConnection(UserInputService.InputEnded, function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                isDragging = false
            end
        end)
        
        AddConnection(UserInputService.InputChanged, function(input)
            if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                -- Calculate the position
                local absPos = SliderBackground.AbsolutePosition
                local absSize = SliderBackground.AbsoluteSize
                local relativePos = input.Position.X - absPos.X
                
                -- Calculate value
                local percent = math.clamp(relativePos / absSize.X, 0, 1)
                local newValue = min + (max - min) * percent
                
                -- Update slider
                updateSlider(newValue)
            end
        end)
        
        -- Create slider object
        local SliderObj = {
            Container = SliderContainer,
            Background = SliderBackground,
            Fill = SliderFill,
            Button = SliderButton,
            Value = value,
            
            -- Set value
            SetValue = function(_, newValue)
                updateSlider(newValue)
            end,
            
            -- Get value
            GetValue = function()
                return value
            end
        }
        
        table.insert(self.Elements, SliderObj)
        return SliderObj
    end
    
    -- Method to add a label
    function SectionObj:AddLabel(text)
        local Label = Instance.new("TextLabel")
        Label.Name = "Label"
        Label.Size = UDim2.new(1, 0, 0, 25)
        Label.BackgroundTransparency = 1
        Label.Font = Enum.Font.Gotham
        Label.TextSize = 14
        Label.TextColor3 = Colors.Text
        Label.TextXAlignment = Enum.TextXAlignment.Left
        Label.Text = text
        Label.LayoutOrder = #self.Elements
        Label.Parent = self.Container
        
        -- Create label object
        local LabelObj = {
            Label = Label,
            
            -- Set text
            SetText = function(_, newText)
                Label.Text = newText
            end
        }
        
        table.insert(self.Elements, LabelObj)
        return LabelObj
    end
    
    -- Add to tab's sections
    table.insert(tab.Sections, SectionObj)
    
    return SectionObj
end

-- Load all modules function (Like MM2)
local function LoadAllModules()
    -- Create modules table like MM2
    Modules = {
        AutoFarm = nil,
        ESP = nil,
        DevilFruit = nil,
        Teleport = nil,
        AntiBan = nil,
        Stats = nil,
        Items = nil,
        Combat = nil
    }
    
    print("Loading modules in MM2 style...")
    
    -- First load anti-ban
    Modules.AntiBan = LoadModule("AntiBan")
    if Modules.AntiBan then
        print("Starting AntiBan module...")
        pcall(function()
            Modules.AntiBan.Start()
        end)
    end

    -- Load core modules one by one - if any fail, UI will still work
    Modules.AutoFarm = LoadModule("AutoFarm")
    wait(0.1) -- Small delay between module loads
    
    Modules.ESP = LoadModule("ESP")
    wait(0.1)
    
    Modules.DevilFruit = LoadModule("DevilFruit")
    wait(0.1)
    
    Modules.Teleport = LoadModule("Teleport")
    wait(0.1)
    
    Modules.Combat = LoadModule("Combat")
    wait(0.1)
    
    Modules.Stats = LoadModule("Stats")
    wait(0.1)
    
    Modules.Items = LoadModule("Items")
    wait(0.1)

    -- Set up module connections (for modules that need to interact)
    if Modules.AutoFarm and Modules.ESP then
        pcall(function()
            Modules.AutoFarm.SetESPModule(Modules.ESP)
        end)
    end

    if Modules.AutoFarm and Modules.Teleport then
        pcall(function()
            Modules.AutoFarm.SetTeleportModule(Modules.Teleport)
        end)
    end

    -- Start other modules - wrapped in pcall to prevent errors
    if Modules.ESP then pcall(function() Modules.ESP.Start() end) end
    if Modules.DevilFruit then pcall(function() Modules.DevilFruit.Start() end) end
    if Modules.Teleport then pcall(function() Modules.Teleport.Start() end) end
    if Modules.Combat then pcall(function() Modules.Combat.Start() end) end
    if Modules.Stats then pcall(function() Modules.Stats.Start() end) end
    if Modules.Items then pcall(function() Modules.Items.Start() end) end
    
    return true
end

-- Create tabs
local MainTab = CreateTab("Main")
local FarmTab = CreateTab("Farm")
local TPTab = CreateTab("Teleport")
local FruitTab = CreateTab("Devil Fruit")
local CombatTab = CreateTab("Combat")
local ESPTab = CreateTab("ESP")
local ItemsTab = CreateTab("Items")
local StatsTab = CreateTab("Stats")
local SettingsTab = CreateTab("Settings")

-- Create main sections
local StatusSection = CreateSection(MainTab, "Script Status")
local PlayerSection = CreateSection(MainTab, "Player Info")

-- Create status elements
local StatusLabel = StatusSection:AddLabel("Loading modules...")
local DiscordButton = StatusSection:AddButton("Join Discord Server", function()
    setclipboard("https://discord.gg/skyx")
    print("Discord link copied to clipboard!")
end)

-- Player info
local PlayerName = PlayerSection:AddLabel("Username: " .. LocalPlayer.Name)
local PlayerLevel = PlayerSection:AddLabel("Level: Loading...")

-- Update player info periodically
spawn(function()
    while wait(5) do
        local level = "Unknown"
        local beli = "Unknown"
        local fragments = "Unknown"
        
        pcall(function()
            if LocalPlayer:FindFirstChild("Data") then
                if LocalPlayer.Data:FindFirstChild("Level") then
                    level = LocalPlayer.Data.Level.Value
                end
                
                if LocalPlayer.Data:FindFirstChild("Beli") then
                    beli = LocalPlayer.Data.Beli.Value
                end
                
                if LocalPlayer.Data:FindFirstChild("Fragments") then
                    fragments = LocalPlayer.Data.Fragments.Value
                end
            end
        end)
        
        PlayerLevel:SetText("Level: " .. tostring(level))
        PlayerSection:AddLabel("Beli: " .. tostring(beli))
        PlayerSection:AddLabel("Fragments: " .. tostring(fragments))
    end
end)

-- Farm tab setup
local FarmSection = CreateSection(FarmTab, "Auto Farm")

-- Always create the UI elements regardless of module loading status
local EnableFarmToggle = FarmSection:AddToggle("Enable Auto Farm", false, function(Value)
    if Modules.AutoFarm then
        pcall(function()
            Modules.AutoFarm.Settings.Enabled = Value
            if Value then
                Modules.AutoFarm:Start()
            else
                Modules.AutoFarm:Stop()
            end
        end)
    end
end)

local FarmDistanceSlider = FarmSection:AddSlider("Farm Distance", 5, 20, 10, function(Value)
    if Modules.AutoFarm then
        pcall(function()
            Modules.AutoFarm.Settings.FarmDistance = Value
        end)
    end
end)

local FastAttackToggle = FarmSection:AddToggle("Fast Attack", true, function(Value)
    if Modules.AutoFarm then
        pcall(function()
            Modules.AutoFarm.Settings.FastAttack = Value
        end)
    end
end)

local AutoQuestToggle = FarmSection:AddToggle("Auto Quest", true, function(Value)
    if Modules.AutoFarm then
        pcall(function()
            Modules.AutoFarm.Settings.AutoQuest = Value
        end)
    end
end)

-- The status label will be added after modules are loaded

-- ESP tab setup
local ESPSection = CreateSection(ESPTab, "ESP Settings")

local EnableESPToggle = ESPSection:AddToggle("Enable ESP", false, function(Value)
    if Modules.ESP then
        Modules.ESP.Settings.Enabled = Value
        if Value then
            Modules.ESP:Start()
        else
            Modules.ESP:Stop()
        end
    end
end)

local ShowPlayersToggle = ESPSection:AddToggle("Show Players", true, function(Value)
    if Modules.ESP then
        Modules.ESP.Settings.ShowPlayers = Value
    end
end)

local ShowNPCsToggle = ESPSection:AddToggle("Show NPCs", true, function(Value)
    if Modules.ESP then
        Modules.ESP.Settings.ShowNPCs = Value
    end
end)

local ShowChestsToggle = ESPSection:AddToggle("Show Chests", true, function(Value)
    if Modules.ESP then
        Modules.ESP.Settings.ShowChests = Value
    end
end)

-- The status label will be added after modules are loaded

-- Devil Fruit tab setup
local FruitSection = CreateSection(FruitTab, "Devil Fruit Settings")

local AutoBuyFruitToggle = FruitSection:AddToggle("Auto Buy Fruits", false, function(Value)
    if Modules.DevilFruit then
        Modules.DevilFruit.Settings.AutoBuy = Value
    end
end)

local NotifyFruitToggle = FruitSection:AddToggle("Notify On Fruit Spawn", true, function(Value)
    if Modules.DevilFruit then
        Modules.DevilFruit.Settings.NotifyOnSpawn = Value
    end
end)

local AutoPickupFruitToggle = FruitSection:AddToggle("Auto Pickup Fruits", true, function(Value)
    if Modules.DevilFruit then
        Modules.DevilFruit.Settings.AutoPickup = Value
        if Value then
            Modules.DevilFruit:Start()
        else
            Modules.DevilFruit:Stop()
        end
    end
end)

-- The status label will be added after modules are loaded

-- Teleport tab setup
local TPSection = CreateSection(TPTab, "Teleport Locations")

-- Common teleport locations even if module fails to load
local CommonLocations = {
    "First Island", 
    "Middle Island", 
    "Pirate Village", 
    "Jungle",
    "Prison",
    "Magma Town",
    "Colosseum"
}

-- Add common locations first (they'll always be shown)
for _, locationName in ipairs(CommonLocations) do
    TPSection:AddButton(locationName, function()
        -- When user clicks, try to use teleport module if it's loaded
        if Modules.Teleport then
            pcall(function()
                Modules.Teleport:TeleportToLocation(locationName)
            end)
        else
            StatusLabel:SetText("Teleport module not loaded!")
        end
    end)
end

-- Add dynamic locations after modules are loaded - moved to end section to match MM2 style

-- Settings tab setup
local ScriptSection = CreateSection(SettingsTab, "Script Settings")

local CleanupButton = ScriptSection:AddButton("Destroy UI", function()
    -- Stop all modules
    for _, module in pairs(Modules) do
        if module and module.Stop then
            pcall(function()
                module:Stop()
            end)
        end
    end
    
    -- Disconnect all connections
    for _, connection in pairs(Connections) do
        if connection.Connected then
            connection:Disconnect()
        end
    end
    
    -- Destroy UI
    SkyXUI:Destroy()
    
    print("SkyX Blox Fruits UI destroyed and cleaned up")
end)

-- Add close button functionality
AddConnection(CloseButton.MouseButton1Click, function()
    CleanupButton.Button.MouseButton1Click:Fire()
end)

-- Now that ALL the UI is created, load modules
StatusLabel:SetText("Loading modules...")
wait(0.5)

-- This is the MM2 approach - load modules last after all UI elements are created
print("Loading modules after UI creation...")
local success = LoadAllModules()

-- Update status based on success
if success then
    StatusLabel:SetText("All modules loaded successfully!")
else
    StatusLabel:SetText("Some modules failed to load!")
end

-- Now check each module and create appropriate UI elements
-- We'll update sections that were conditionally created based on modules
-- This is the key pattern from MM2 - check modules AFTER attempting to load them

-- ESP Tab updates
if Modules.ESP then
    print("ESP module loaded - adding controls")
else
    print("ESP module failed - adding fallback label")
    ESPSection:AddLabel("‚ö†Ô∏è ESP module failed to load")
end

-- Farm Tab updates
if Modules.AutoFarm then
    print("AutoFarm module loaded - adding controls")
else
    print("AutoFarm module failed - adding fallback label")
    FarmSection:AddLabel("‚ö†Ô∏è AutoFarm module failed to load")
end

-- DevilFruit Tab updates
if Modules.DevilFruit then
    print("DevilFruit module loaded - adding controls")
else
    print("DevilFruit module failed - adding fallback label")
    FruitSection:AddLabel("‚ö†Ô∏è DevilFruit module failed to load")
end

-- Teleport Tab updates
if Modules.Teleport then
    print("Teleport module loaded - adding dynamic locations")
    -- Add dynamic locations if module loaded
    spawn(function()
        wait(1)
        pcall(function()
            local locations = Modules.Teleport:GetLocationsList()
            if locations and #locations > 0 then
                for _, location in ipairs(locations) do
                    -- Only add locations that aren't in CommonLocations
                    local isCommon = false
                    for _, commonLoc in ipairs(CommonLocations) do
                        if commonLoc == location.Name then
                            isCommon = true
                            break
                        end
                    end
                    
                    if not isCommon then
                        TPSection:AddButton(location.Name, function()
                            pcall(function()
                                Modules.Teleport:TeleportToLocation(location.Name)
                            end)
                        end)
                    end
                end
            end
        end)
    end)
else
    print("Teleport module failed - adding fallback label")
    TPSection:AddLabel("‚ö†Ô∏è Teleport module failed to load")
end

print("SkyX Blox Fruits Mobile UI has been loaded successfully!")
